ChaosE =
  let
    Decision = STOP |~| Rec
    Rec = [] e: E @ e -> Decision
  within Decision

Limit = [] e: F @ e -> Limit

NoFaults(P) = P \ H [| E |] STOP

Lazy(P) = (P \ H [| E |] ChaosE) \ E

LazyLimit(P) = ((P \ H [| E |] Limit) [| E |] ChaosE) \ E
-----
channel sendRescueInfoToEru, processMessage,
  receiveMessage, serviceRescue, startRecovery1,
  endRecovery1, logFault1, resendRescueInfoToEru

channel fault, error, failure: {1..5}

E = {| fault, error, failure |}
F = {| fault |}
H = {| startRecovery1, endRecovery1, logFault1, resendRescueInfoToEru |}
Alpha = {| sendRescueInfoToEru, processMessage, receiveMessage, 
           serviceRescue, startRecovery1, endRecovery1, 
           logFault1, resendRescueInfoToEru |}
Alpha_LFTSimple = Alpha
Alpha_NFTSimple = Alpha
Alpha_DLSimple = Alpha
Alpha_FFTSimple = Alpha

-- Fault tolerant (limit).
LFTSimple =
  let
    NOMINAL_LFTSimple = sendRescueInfoToEru -> 
      ((processMessage -> RECEIVE_LFTSimple) [] FAULT_LFTSimple)
    RECEIVE_LFTSimple = receiveMessage -> serviceRescue -> NOMINAL_LFTSimple
    FAULT_LFTSimple = fault.1 -> (RECOVERY_LFTSimple [] (error.1 -> failure.1 -> SKIP))
    RECOVERY_LFTSimple = 
      startRecovery1 -> logFault1 -> resendRescueInfoToEru -> 
      processMessage -> receiveMessage -> endRecovery1 -> 
      serviceRescue -> NOMINAL_LFTSimple
  within NOMINAL_LFTSimple
  
assert LFTSimple \ H :[divergence free]
assert LFTSimple \ E :[divergence free]
assert not LFTSimple :[deadlock free]
assert LFTSimple [| {|error.1|} |] STOP :[deadlock free]
assert not NoFaults(LFTSimple) [F= Lazy(LFTSimple)
assert not NoFaults(LFTSimple) [| Alpha_LFTSimple |] Lazy(LFTSimple) :[deadlock free]
assert NoFaults(LFTSimple) [F= LazyLimit(LFTSimple)
assert NoFaults(LFTSimple) [| Alpha_LFTSimple |] LazyLimit(LFTSimple) :[deadlock free]

-- Not fault tolerant
NFTSimple = 
  let
    NOMINAL_NFTSimple = sendRescueInfoToEru -> 
      ((processMessage -> RECEIVE_NFTSimple) [] FAULT_NFTSimple)
    RECEIVE_NFTSimple = receiveMessage -> serviceRescue -> NOMINAL_NFTSimple
    FAULT_NFTSimple = fault.1 -> (RECOVERY_NFTSimple [] (error.1 -> failure.1 -> SKIP))
    RECOVERY_NFTSimple = 
      startRecovery1 -> endRecovery1 -> serviceRescue -> NOMINAL_NFTSimple
  within NOMINAL_NFTSimple

assert NFTSimple \ H :[divergence free]
assert NFTSimple \ E :[divergence free]
assert not NFTSimple :[deadlock free]
assert NFTSimple [| {|error.1|} |] STOP :[deadlock free]
assert not NoFaults(NFTSimple) [F= Lazy(NFTSimple)
assert not NoFaults(NFTSimple) [| Alpha_NFTSimple |] Lazy(NFTSimple) :[deadlock free]
assert not NoFaults(NFTSimple) [F= LazyLimit(NFTSimple)
assert not NoFaults(NFTSimple) [| Alpha_NFTSimple |] LazyLimit(NFTSimple) :[deadlock free]

-- Deadlocked system
DLSimple =
  let
    NOMINAL_DLSimple = sendRescueInfoToEru -> 
      ((processMessage -> RECEIVE_DLSimple) [] FAULT_DLSimple)
    RECEIVE_DLSimple = receiveMessage -> serviceRescue -> STOP
    FAULT_DLSimple = fault.1 -> (RECOVERY_DLSimple [] (error.1 -> failure.1 -> SKIP))
    RECOVERY_DLSimple = 
      startRecovery1 -> logFault1 -> resendRescueInfoToEru -> 
      processMessage -> receiveMessage -> endRecovery1 -> serviceRescue  -> STOP
  within NOMINAL_DLSimple

assert DLSimple \ H :[divergence free]
assert DLSimple \ E :[divergence free]
assert not DLSimple :[deadlock free]
assert not DLSimple [| {|error.1|} |] STOP :[deadlock free]
assert not NoFaults(DLSimple) [F= Lazy(DLSimple)
assert not NoFaults(DLSimple) [| Alpha_DLSimple |] Lazy(DLSimple) :[deadlock free]
assert NoFaults(DLSimple) [F= LazyLimit(DLSimple)
assert not NoFaults(DLSimple) [| Alpha_DLSimple |] LazyLimit(DLSimple) :[deadlock free]

-- Full fault tolerant
FFTSimple =
  let
    NOMINAL_FFTSimple = sendRescueInfoToEru -> 
      ((processMessage -> RECEIVE_FFTSimple) [] FAULT_FFTSimple)
    RECEIVE_FFTSimple = receiveMessage -> serviceRescue -> NOMINAL_FFTSimple
    FAULT_FFTSimple = fault.1 -> RECOVERY_FFTSimple
    RECOVERY_FFTSimple = 
      startRecovery1 -> logFault1 -> resendRescueInfoToEru -> 
      processMessage -> receiveMessage -> endRecovery1 -> serviceRescue -> NOMINAL_FFTSimple
  within NOMINAL_FFTSimple

assert FFTSimple \ H :[divergence free]
assert FFTSimple \ E :[divergence free]
assert FFTSimple :[deadlock free]
assert FFTSimple [| {|error.1|} |] STOP :[deadlock free]
assert NoFaults(FFTSimple) [F= Lazy(FFTSimple)
assert NoFaults(FFTSimple) [| Alpha_FFTSimple |] Lazy(FFTSimple) :[deadlock free]
assert NoFaults(FFTSimple) [F= LazyLimit(FFTSimple)
assert NoFaults(FFTSimple) [| Alpha_FFTSimple |] LazyLimit(FFTSimple) :[deadlock free]