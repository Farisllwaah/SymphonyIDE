/*  CML_{0}, example from Jim Woodcock of a simple register + arith operations; */
  types
    public Byte = nat
    inv n == (0 <= n) and (n <= 127)

  functions
    oflow : (i,j : Byte) b : bool
    post b = ( i+j = 127)

    uflow : (i,j : Byte) b : bool
    post b = (i-j < 0);
 

  channels
   channel init, overflow, underflow
   channel read, load, add, sub : Byte

  Chansets
   chanset I = {| init, overflow, underflow,
          read,load,add,sub |}


process RegisterProc = 
 begin
	
  state 
  reg : Byte	
     
  operatioNs  

   INIT()
   ext wr reg : Byte
   post reg = 0;

   LOAD(i : Byte)
   ext wr reg : Byte
   post reg = i;

   READ() j : Byte
   ext rd reg : Byte;
   post j = reg 

   ADD(i:Byte)
   ext wr reg : Byte
   pre not oflow(reg, i)
   post reg = reg~ + i;

   SUB(i : Byte)
   ext wr reg : Byte
   pre is_Byte(reg - i)
   post reg = reg~ - i;
  
   aCtions
   
   REG = 
     load?i -> LOAD(i) -> REG
     []
     var j: Byte @ j := READ(); read!j -> reg
     [] 
     add?i -> ( oflow(reg,i) & overflow -> INIT(); REG
       	     	 [] 
		 not oflow(reg,i) & ADD(i);REG)
     [] 
     sub?i => ( uflow(reg,i) & underflow -> INIT(); REG
       	     	 [] 
		 not uflow(reg,i) & SUB(i); REG)
   @
     init -> INIT(); REG
 end