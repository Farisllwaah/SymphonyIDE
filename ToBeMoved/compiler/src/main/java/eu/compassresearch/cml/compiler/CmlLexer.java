/* The following code was generated by JFlex 1.4.3 on 4/19/12 4:14 PM */

package eu.compassresearch.cml.compiler;
import java.util.LinkedList;
import java.util.List;
import java.util.HashMap;
import java.util.Vector;
import java.util.Stack;
import eu.compassresearch.cml.compiler.CmlParser.Lexer;
import eu.compassresearch.cml.compiler.CmlParser.Location;

/*
class CmlContext {
  
}
*/
class LexicographicalRuntimeException extends RuntimeException
{
  private int pos,line;
  private  String value;
  public LexicographicalRuntimeException(String chars)
    {
      this.pos = CMLToken.curPos;
      this.line = CMLToken.curLine;
      this.value = chars;
    }
  
  @Override
    public String toString()
    {
      return "Offending syntax "+(value != null ? "starting with \""+value+"\" ":"")+"found at line "+(line+1)+" position "+(pos+1);
    }
}

class CmlLexeme {
  
    private Position startPos;
    private Position endPos;
    protected  String value;
    private int lex;

    public CmlLexeme(Position startPos, Position endPos, int lex, String value)
    {
	this.value = value;
	this.startPos = startPos;
	this.endPos = endPos;
	this.lex = lex;
    }

    public Position getStartPos()
    {
	return startPos;
    }

    public Position getEndPos()
    {
	return endPos;
    }

    public int getLexValue()
    {
	return lex;
    }
    
    public String getValue()
    {
	return this.value;
    }

    public String toString()
    {
	return value + " " + startPos;
    }
}

class CMLToken {
  public static int curLine;
  public static int curPos; 

  private int line;
  private int pos;
  protected  String value;
  public CMLToken(String value)
  {
    this.value = value;
    this.line = line;
    this.pos = pos;
  }

  public String getValue()
  {
    return this.value;
  }

  public static void main(String[] args) throws Exception
  {
    try{
    new CmlLexer(System.in).yylex();
    } catch (LexicographicalRuntimeException e)
	{
	  System.out.println(e);
	}
  }
}

class StringToken extends CMLToken {
  static StringToken currentString;
  private StringBuilder currentLine;
  private List<String> lines = new LinkedList<String>();

  private int endLine;
  private int endPos;

  public StringToken(int startLine, int startPos)
  {
    super("\"");
    currentLine = new StringBuilder();
  }

  public void append(String chars)
  {
    currentLine.append(chars);
  }

  public void newLine()
  {
    lines.add(currentLine.toString());
    currentLine = new StringBuilder();
  }

  public void endString(int line, int pos)
  {
    lines.add(currentLine.toString());
    this.endLine = line;
    this.endPos = pos;
    StringBuilder sb = new StringBuilder();
    for(String s : lines)
      sb.append(s);
    super.value = sb.toString();
    lines=null;
  }
}

class CommentBlock extends CMLToken {
  static CommentBlock current;
  private int level;
  StringBuilder content;

  public CommentBlock()
  {
    super("--");
    current=this;
    content=new StringBuilder();
    level = 1;
  }

  public void appendLine(String line)
  {
    this.content.append(line);
  }

  public void increaseLevel()
  {
    level ++;
  }

  public boolean decreaseLevel()
  {
    level--;
    return level == 0;
  }
}


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/19/12 4:14 PM from the specification file
 * <tt>cml.lex</tt>
 */
public class CmlLexer implements Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int OPERATIONS = 12;
  public static final int TYPES = 8;
  public static final int YYINITIAL = 0;
  public static final int ACTIONS = 18;
  public static final int CHANSETS = 16;
  public static final int STATE = 6;
  public static final int PROCESS = 4;
  public static final int CHANNELS = 14;
  public static final int COMMENT = 20;
  public static final int CLASS = 2;
  public static final int FUNCTIONS = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\47\1\46\1\0\1\47\1\45\22\0\1\6\1\101\1\0"+
    "\1\14\2\0\1\77\1\41\1\112\1\111\1\51\1\56\1\106\1\55"+
    "\1\110\1\50\1\5\1\116\10\4\1\54\1\53\1\107\1\52\1\57"+
    "\1\100\1\103\1\17\1\30\1\21\1\37\1\32\1\2\1\34\1\35"+
    "\1\24\2\12\1\36\1\12\1\26\1\25\1\42\1\12\1\43\1\27"+
    "\1\23\1\11\2\12\1\13\1\44\1\12\1\104\1\7\1\105\1\113"+
    "\1\115\1\15\1\20\1\31\1\22\1\40\1\33\1\3\1\120\1\117"+
    "\1\71\1\12\1\114\1\72\1\70\1\64\1\66\1\65\1\12\1\60"+
    "\1\67\1\63\1\10\1\102\1\61\1\62\1\73\1\12\1\74\1\75"+
    "\1\76\1\16\201\0\ufef1\1\17\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\2\1\2\2\1\3\2\0\7\1\1\3\1\0"+
    "\2\1\1\4\1\5\1\6\1\7\3\1\1\10\1\11"+
    "\1\4\1\12\1\13\1\14\1\15\1\16\11\1\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\4\1\13\1\14\1\15\4\1"+
    "\1\4\2\1\1\13\2\0\1\4\1\33\1\14\1\34"+
    "\1\35\1\36\1\1\1\37\1\23\2\40\1\1\2\0"+
    "\10\1\1\41\1\42\4\1\1\43\1\44\1\45\1\46"+
    "\1\47\1\45\1\50\1\51\7\1\1\52\4\1\1\53"+
    "\1\54\1\0\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\5\1\1\43\1\1\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\1\1\71\1\72\1\40\1\1\1\73\1\0"+
    "\6\1\1\74\2\1\1\75\2\1\1\76\1\77\2\1"+
    "\1\100\1\101\4\1\1\102\1\0\1\103\1\104\1\1"+
    "\1\105\1\106\1\107\2\1\1\0\1\110\1\111\1\1"+
    "\1\112\1\1\1\0\10\1\1\113\1\114\1\115\1\1"+
    "\1\116\3\1\2\0\1\1\1\117\1\1\2\0\2\1"+
    "\1\0\3\1\1\120\1\121\1\1\1\122\1\1\1\123"+
    "\1\124\3\1\2\0\2\1\2\0\7\1\1\125\2\1"+
    "\1\126\1\127\2\1\2\0\1\130\1\1\1\131\3\1"+
    "\1\132\1\1\1\133\1\134\1\135\2\0\1\1\1\136"+
    "\1\137\2\1\2\0\1\140\1\1\1\141\2\0\1\142"+
    "\24\0\1\143\6\0\1\144";

  private static int [] zzUnpackAction() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\121\0\242\0\363\0\u0144\0\u0195\0\u01e6\0\u0237"+
    "\0\u0288\0\u02d9\0\u032a\0\u037b\0\u03cc\0\u041d\0\u046e\0\u04bf"+
    "\0\u0510\0\u0561\0\u05b2\0\u0603\0\u0654\0\u06a5\0\u06f6\0\u0747"+
    "\0\u0798\0\u07e9\0\u083a\0\u088b\0\u08dc\0\u04bf\0\u0510\0\u04bf"+
    "\0\u04bf\0\u092d\0\u097e\0\u09cf\0\u083a\0\u04bf\0\u0a20\0\u04bf"+
    "\0\u0a71\0\u04bf\0\u0ac2\0\u0b13\0\u0b64\0\u0bb5\0\u0c06\0\u0c57"+
    "\0\u0ca8\0\u0cf9\0\u0d4a\0\u0d9b\0\u0dec\0\u04bf\0\u04bf\0\u04bf"+
    "\0\u04bf\0\u04bf\0\u04bf\0\u04bf\0\u0e3d\0\u0e8e\0\u04bf\0\u04bf"+
    "\0\u04bf\0\u0edf\0\u0f30\0\u0f81\0\u0fd2\0\u1023\0\u1074\0\u10c5"+
    "\0\u1116\0\u1167\0\u11b8\0\u1209\0\u04bf\0\u125a\0\u12ab\0\u12fc"+
    "\0\u04bf\0\u134d\0\u04bf\0\u04bf\0\u04bf\0\u139e\0\u04bf\0\u13ef"+
    "\0\u04bf\0\u1440\0\u1491\0\u14e2\0\u1533\0\u1584\0\u15d5\0\u1626"+
    "\0\u1677\0\u16c8\0\u1719\0\u176a\0\u17bb\0\u180c\0\u04bf\0\u185d"+
    "\0\u18ae\0\u18ff\0\u1950\0\u04bf\0\u04bf\0\u04bf\0\u04bf\0\u04bf"+
    "\0\u19a1\0\u04bf\0\u04bf\0\u19f2\0\u1a43\0\u1a94\0\u1ae5\0\u1b36"+
    "\0\u1b87\0\u1bd8\0\u037b\0\u1c29\0\u1c7a\0\u1ccb\0\u1d1c\0\u1d6d"+
    "\0\u04bf\0\u1dbe\0\u04bf\0\u04bf\0\u04bf\0\u19a1\0\u04bf\0\u04bf"+
    "\0\u1e0f\0\u1e60\0\u1eb1\0\u1f02\0\u1f53\0\u1fa4\0\u1ff5\0\u037b"+
    "\0\u037b\0\u04bf\0\u04bf\0\u04bf\0\u04bf\0\u2046\0\u04bf\0\u04bf"+
    "\0\u2097\0\u20e8\0\u14e2\0\u2139\0\u218a\0\u21db\0\u222c\0\u227d"+
    "\0\u22ce\0\u231f\0\u037b\0\u2370\0\u23c1\0\u037b\0\u2412\0\u2463"+
    "\0\u04bf\0\u037b\0\u24b4\0\u2505\0\u2556\0\u037b\0\u25a7\0\u25f8"+
    "\0\u2649\0\u269a\0\u037b\0\u26eb\0\u037b\0\u037b\0\u273c\0\u04bf"+
    "\0\u04bf\0\u037b\0\u278d\0\u27de\0\u282f\0\u037b\0\u04bf\0\u2880"+
    "\0\u037b\0\u28d1\0\u2922\0\u2973\0\u29c4\0\u2a15\0\u2a66\0\u2ab7"+
    "\0\u2b08\0\u2b59\0\u2baa\0\u037b\0\u037b\0\u037b\0\u2bfb\0\u037b"+
    "\0\u2c4c\0\u2c9d\0\u2cee\0\u2d3f\0\u2d90\0\u2de1\0\u037b\0\u2e32"+
    "\0\u2e83\0\u2ed4\0\u2f25\0\u2f76\0\u2fc7\0\u3018\0\u3069\0\u30ba"+
    "\0\u037b\0\u037b\0\u310b\0\u037b\0\u315c\0\u037b\0\u037b\0\u31ad"+
    "\0\u31fe\0\u324f\0\u32a0\0\u32f1\0\u3342\0\u3393\0\u33e4\0\u3435"+
    "\0\u3486\0\u34d7\0\u3528\0\u3579\0\u35ca\0\u361b\0\u366c\0\u037b"+
    "\0\u36bd\0\u370e\0\u04bf\0\u04bf\0\u375f\0\u37b0\0\u3801\0\u3852"+
    "\0\u037b\0\u38a3\0\u037b\0\u38f4\0\u3945\0\u3996\0\u037b\0\u39e7"+
    "\0\u037b\0\u037b\0\u037b\0\u3a38\0\u3a89\0\u3ada\0\u037b\0\u037b"+
    "\0\u3b2b\0\u3b7c\0\u3bcd\0\u3c1e\0\u037b\0\u3c6f\0\u037b\0\u3cc0"+
    "\0\u3d11\0\u037b\0\u3d62\0\u3db3\0\u3e04\0\u3e55\0\u3ea6\0\u3ef7"+
    "\0\u3f48\0\u3f99\0\u3fea\0\u403b\0\u408c\0\u40dd\0\u412e\0\u417f"+
    "\0\u41d0\0\u4221\0\u4272\0\u42c3\0\u4314\0\u4365\0\u04bf\0\u43b6"+
    "\0\u4407\0\u4458\0\u44a9\0\u44fa\0\u454b\0\u04bf";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\14\2\15\1\16\1\17\1\20\1\21\4\14"+
    "\1\22\2\0\2\23\2\24\1\25\1\14\1\26\1\14"+
    "\1\27\2\14\2\30\5\14\1\0\1\31\2\14\1\32"+
    "\2\20\1\33\7\0\3\14\1\25\1\14\1\31\1\26"+
    "\1\27\4\14\6\0\1\14\11\0\1\14\1\0\1\16"+
    "\2\14\1\0\3\14\1\16\1\17\1\20\1\21\4\14"+
    "\1\22\2\0\22\14\1\0\3\14\1\32\2\20\1\33"+
    "\7\0\14\14\6\0\1\14\11\0\1\14\1\0\1\16"+
    "\2\14\1\0\1\14\2\15\1\16\1\17\1\20\1\21"+
    "\4\14\1\22\2\0\2\23\2\34\1\25\1\14\1\26"+
    "\1\14\1\27\2\35\2\30\5\14\1\0\3\14\1\32"+
    "\2\20\1\33\1\0\1\36\5\0\3\14\1\25\2\14"+
    "\1\26\1\27\4\14\6\0\1\14\11\0\1\14\1\0"+
    "\1\16\2\14\1\0\1\14\2\15\1\16\1\17\1\20"+
    "\1\37\4\14\1\22\1\40\1\41\1\23\1\42\1\34"+
    "\1\43\1\25\1\14\1\26\1\14\1\27\1\14\1\44"+
    "\2\30\5\14\1\0\3\14\1\32\2\20\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\2\14"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\14\1\66\1\67\1\70\1\71\1\0\1\71\1\14"+
    "\1\0\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\14\1\0\1\16\2\14\1\0\1\14\2\15"+
    "\1\16\1\17\1\20\1\37\4\14\1\22\1\40\1\41"+
    "\1\23\1\42\1\34\1\43\1\25\1\14\1\26\1\14"+
    "\1\27\1\14\1\44\2\30\5\14\1\0\3\14\1\32"+
    "\2\20\1\45\1\46\1\102\1\50\1\103\1\52\1\53"+
    "\1\54\1\55\2\14\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\14\1\66\1\67\1\70\1\71"+
    "\1\0\1\71\1\14\1\0\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\14\1\0\1\16\2\14"+
    "\1\0\1\14\2\15\1\16\1\17\1\20\1\37\4\14"+
    "\1\22\1\40\1\41\1\23\1\42\1\34\1\43\1\25"+
    "\1\14\1\26\1\14\1\27\1\14\1\44\2\30\5\14"+
    "\1\0\3\14\1\32\2\20\1\45\1\46\1\47\1\50"+
    "\1\51\1\104\1\105\1\54\1\55\2\14\1\56\1\57"+
    "\1\106\1\61\1\62\1\107\1\110\1\65\1\14\1\66"+
    "\1\67\1\70\1\71\1\0\1\71\1\14\1\0\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\14"+
    "\1\0\1\16\2\14\1\0\1\14\2\15\1\16\1\17"+
    "\1\20\1\37\4\14\1\22\1\40\1\41\1\23\1\42"+
    "\1\34\1\43\1\25\1\14\1\26\1\14\1\27\1\14"+
    "\1\44\1\30\1\111\5\14\1\0\3\14\1\32\2\20"+
    "\1\45\1\46\1\112\1\50\1\51\1\52\1\53\1\54"+
    "\1\113\1\114\1\14\1\56\1\57\1\106\1\61\1\62"+
    "\1\107\1\110\1\65\1\14\1\66\1\67\1\70\1\71"+
    "\1\0\1\71\1\14\1\0\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\14\1\0\1\16\2\14"+
    "\1\0\1\14\2\15\1\16\1\17\1\20\1\21\4\14"+
    "\1\22\2\0\2\23\2\34\1\25\1\14\1\26\1\14"+
    "\1\27\2\14\2\30\5\14\1\0\3\14\1\32\2\20"+
    "\1\33\2\0\1\50\1\115\3\0\3\14\1\25\2\14"+
    "\1\26\1\27\4\14\6\0\1\14\3\0\1\74\5\0"+
    "\1\14\1\0\1\16\2\14\1\0\1\14\2\15\1\16"+
    "\1\17\1\20\1\21\4\14\1\22\2\0\2\23\2\34"+
    "\1\25\1\14\1\26\1\14\1\27\2\14\2\30\5\14"+
    "\1\0\3\14\1\32\2\20\1\33\1\0\1\36\1\50"+
    "\1\115\3\0\3\14\1\25\2\14\1\26\1\27\4\14"+
    "\1\116\1\117\4\0\1\14\3\0\1\74\5\0\1\14"+
    "\1\0\1\16\2\14\1\0\1\14\2\15\1\16\1\17"+
    "\1\20\1\37\4\14\1\22\1\40\1\41\1\23\1\42"+
    "\1\34\1\43\1\25\1\14\1\26\1\14\1\27\1\14"+
    "\1\44\2\30\5\14\1\0\3\14\1\32\2\20\1\45"+
    "\1\46\1\120\1\121\1\51\1\122\1\53\1\54\1\55"+
    "\2\14\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\14\1\66\1\67\1\70\1\123\1\124\1\125"+
    "\1\126\1\127\1\130\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\14\1\0\1\16\2\14\51\131\1\132"+
    "\47\131\1\0\5\14\1\0\1\21\4\14\1\22\2\0"+
    "\26\14\13\0\14\14\6\0\1\14\11\0\5\14\1\0"+
    "\5\14\1\0\1\21\2\133\2\14\1\22\2\0\26\14"+
    "\13\0\14\14\6\0\1\14\11\0\5\14\4\0\2\16"+
    "\110\0\1\16\6\0\2\16\1\134\4\0\1\134\46\0"+
    "\1\134\33\0\1\16\133\0\2\135\111\0\2\14\4\0"+
    "\4\14\3\0\22\14\1\0\3\14\13\0\14\14\6\0"+
    "\1\14\11\0\1\14\2\0\2\14\1\0\5\14\1\0"+
    "\1\21\4\14\1\22\2\0\2\14\2\136\22\14\13\0"+
    "\14\14\6\0\1\14\11\0\5\14\1\0\5\14\1\0"+
    "\1\21\4\14\1\22\2\0\16\14\1\137\1\140\6\14"+
    "\13\0\12\14\1\140\1\14\6\0\1\14\11\0\3\14"+
    "\1\137\1\14\1\0\5\14\1\0\1\21\4\14\1\22"+
    "\2\0\25\14\1\141\13\0\13\14\1\141\6\0\1\14"+
    "\11\0\5\14\1\0\5\14\1\0\1\21\4\14\1\22"+
    "\2\0\23\14\1\142\2\14\13\0\5\14\1\142\6\14"+
    "\6\0\1\14\11\0\5\14\1\0\5\14\1\0\1\21"+
    "\4\14\1\22\2\0\4\14\1\143\21\14\13\0\3\14"+
    "\1\143\10\14\6\0\1\14\11\0\5\14\1\0\5\14"+
    "\1\0\1\21\4\14\1\22\2\0\7\14\1\144\16\14"+
    "\13\0\4\14\1\144\7\14\6\0\1\14\11\0\5\14"+
    "\1\0\5\14\1\0\1\21\4\14\1\22\2\0\24\14"+
    "\1\145\1\14\13\0\1\145\13\14\6\0\1\14\11\0"+
    "\5\14\46\0\1\20\122\0\1\146\1\147\50\0\5\14"+
    "\1\0\1\21\4\14\1\22\2\0\16\14\1\137\7\14"+
    "\13\0\14\14\6\0\1\14\11\0\3\14\1\137\1\14"+
    "\1\0\5\14\1\0\1\21\4\14\1\22\2\0\13\14"+
    "\2\150\11\14\13\0\14\14\6\0\1\14\11\0\5\14"+
    "\1\0\5\14\1\0\1\21\4\14\1\22\2\0\2\14"+
    "\2\136\22\14\13\0\4\14\1\151\7\14\6\0\1\14"+
    "\11\0\5\14\1\0\5\14\1\0\1\21\4\14\1\22"+
    "\2\0\16\14\1\137\7\14\13\0\14\14\6\0\1\14"+
    "\11\0\3\14\1\152\1\14\1\0\5\14\1\0\1\21"+
    "\4\14\1\22\2\0\26\14\13\0\6\14\1\153\5\14"+
    "\6\0\1\14\11\0\5\14\52\0\1\154\4\0\1\155"+
    "\41\0\52\156\1\157\1\0\1\160\1\161\31\156\1\0"+
    "\11\156\56\0\1\162\114\0\1\163\47\0\5\14\1\0"+
    "\1\21\4\14\1\22\2\0\1\14\1\164\12\14\1\165"+
    "\11\14\13\0\14\14\6\0\1\14\11\0\5\14\1\0"+
    "\5\14\1\0\1\21\4\14\1\22\2\0\25\14\1\141"+
    "\13\0\6\14\1\166\4\14\1\141\6\0\1\14\11\0"+
    "\5\14\1\0\5\14\1\0\1\21\4\14\1\22\2\0"+
    "\1\14\1\167\24\14\13\0\6\14\1\170\5\14\6\0"+
    "\1\14\11\0\5\14\1\0\5\14\1\0\1\21\1\171"+
    "\3\14\1\22\2\0\26\14\13\0\1\172\13\14\6\0"+
    "\1\14\11\0\5\14\1\0\5\14\1\0\1\21\4\14"+
    "\1\22\2\0\23\14\1\142\2\14\13\0\1\173\4\14"+
    "\1\142\6\14\6\0\1\14\11\0\5\14\1\0\5\14"+
    "\1\0\1\21\4\14\1\22\2\0\4\14\1\143\7\14"+
    "\1\174\11\14\13\0\3\14\1\143\10\14\6\0\1\14"+
    "\11\0\5\14\1\0\5\14\1\0\1\21\4\14\1\22"+
    "\2\0\26\14\13\0\14\14\6\0\1\14\11\0\1\175"+
    "\4\14\1\0\5\14\1\0\1\21\4\14\1\22\2\0"+
    "\26\14\13\0\4\14\1\176\7\14\6\0\1\14\11\0"+
    "\5\14\1\0\5\14\1\0\1\21\4\14\1\22\2\0"+
    "\26\14\13\0\6\14\1\177\5\14\6\0\1\14\11\0"+
    "\5\14\52\0\1\200\1\0\1\201\1\202\1\0\1\203"+
    "\55\0\1\204\156\0\1\205\4\0\1\155\41\0\52\156"+
    "\1\157\1\0\1\160\1\206\31\156\1\0\11\156\57\0"+
    "\1\207\117\0\1\162\1\210\42\0\5\14\1\0\1\21"+
    "\1\171\3\14\1\22\2\0\26\14\13\0\1\211\5\14"+
    "\1\212\5\14\6\0\1\14\11\0\5\14\1\0\5\14"+
    "\1\0\1\21\4\14\1\22\2\0\14\14\1\213\11\14"+
    "\13\0\14\14\6\0\1\14\11\0\1\175\4\14\1\0"+
    "\5\14\1\0\1\21\4\14\1\22\2\0\26\14\13\0"+
    "\4\14\1\176\2\14\1\214\4\14\6\0\1\14\11\0"+
    "\5\14\1\0\5\14\1\0\1\21\4\14\1\22\2\0"+
    "\7\14\1\144\16\14\13\0\2\14\1\215\1\14\1\144"+
    "\7\14\6\0\1\14\11\0\5\14\52\0\1\216\4\0"+
    "\1\155\42\0\5\14\1\0\1\21\4\14\1\22\2\0"+
    "\1\14\1\164\12\14\1\217\4\14\1\220\4\14\13\0"+
    "\14\14\6\0\1\14\11\0\5\14\1\0\5\14\1\0"+
    "\1\21\4\14\1\22\2\0\26\14\13\0\1\221\13\14"+
    "\6\0\1\14\11\0\5\14\75\0\1\222\121\0\1\223"+
    "\74\0\1\154\4\0\1\224\120\0\1\225\42\0\5\14"+
    "\1\0\1\21\4\14\1\22\2\0\1\14\1\226\24\14"+
    "\13\0\14\14\6\0\1\14\11\0\5\14\105\0\1\227"+
    "\13\0\50\131\1\230\1\231\47\131\1\0\5\14\1\0"+
    "\1\21\4\14\1\22\2\0\7\14\1\232\16\14\13\0"+
    "\4\14\1\232\7\14\6\0\1\14\11\0\5\14\2\0"+
    "\4\233\11\0\4\233\5\0\4\233\3\0\2\233\55\0"+
    "\1\233\4\0\4\234\11\0\4\234\5\0\4\234\3\0"+
    "\2\234\55\0\1\234\3\0\5\14\1\0\1\21\4\14"+
    "\1\22\2\0\4\14\1\235\21\14\13\0\3\14\1\235"+
    "\10\14\6\0\1\14\11\0\5\14\1\0\5\14\1\0"+
    "\1\21\4\14\1\22\2\0\2\236\24\14\13\0\14\14"+
    "\6\0\1\14\11\0\5\14\1\0\5\14\1\0\1\21"+
    "\4\14\1\22\2\0\2\237\24\14\13\0\14\14\6\0"+
    "\1\14\11\0\5\14\1\0\5\14\1\0\1\21\4\14"+
    "\1\22\2\0\23\14\1\240\2\14\13\0\5\14\1\240"+
    "\6\14\6\0\1\14\11\0\5\14\1\0\5\14\1\0"+
    "\1\21\4\14\1\22\2\0\13\14\2\241\11\14\13\0"+
    "\14\14\6\0\1\14\11\0\5\14\1\0\5\14\1\0"+
    "\1\21\4\14\1\22\2\0\2\242\24\14\13\0\14\14"+
    "\6\0\1\14\11\0\5\14\1\0\5\14\1\0\1\21"+
    "\4\14\1\22\2\0\20\14\2\243\4\14\13\0\14\14"+
    "\6\0\1\14\11\0\5\14\1\0\5\14\1\0\1\21"+
    "\4\14\1\22\2\0\6\14\1\244\17\14\13\0\6\14"+
    "\1\244\5\14\6\0\1\14\11\0\5\14\46\146\1\0"+
    "\52\146\1\0\5\14\1\0\1\21\4\14\1\22\2\0"+
    "\15\14\1\245\10\14\13\0\14\14\6\0\1\14\11\0"+
    "\4\14\1\245\1\0\5\14\1\0\1\21\4\14\1\22"+
    "\2\0\21\14\1\246\4\14\13\0\14\14\6\0\1\14"+
    "\11\0\5\14\1\0\5\14\1\0\1\21\4\14\1\22"+
    "\2\0\1\236\1\247\24\14\13\0\14\14\6\0\1\14"+
    "\11\0\5\14\1\0\5\14\1\0\1\21\4\14\1\22"+
    "\2\0\26\14\13\0\6\14\1\250\5\14\6\0\1\14"+
    "\11\0\5\14\57\0\1\251\42\0\5\14\1\0\1\21"+
    "\4\14\1\22\2\0\26\14\13\0\3\14\1\252\10\14"+
    "\6\0\1\14\11\0\5\14\1\0\5\14\1\0\1\21"+
    "\4\14\1\22\2\0\1\14\1\253\24\14\13\0\14\14"+
    "\6\0\1\14\11\0\5\14\1\0\5\14\1\0\1\21"+
    "\4\14\1\22\2\0\26\14\13\0\14\14\6\0\1\14"+
    "\11\0\1\254\4\14\1\0\5\14\1\0\1\21\4\14"+
    "\1\22\2\0\26\14\13\0\3\14\1\255\10\14\6\0"+
    "\1\14\11\0\5\14\1\0\5\14\1\0\1\21\4\14"+
    "\1\22\2\0\26\14\13\0\3\14\1\256\10\14\6\0"+
    "\1\14\11\0\5\14\1\0\5\14\1\0\1\21\4\14"+
    "\1\22\2\0\12\14\1\257\13\14\13\0\14\14\6\0"+
    "\1\14\11\0\5\14\1\0\5\14\1\0\1\21\4\14"+
    "\1\22\2\0\26\14\13\0\6\14\1\260\2\14\1\261"+
    "\2\14\6\0\1\14\11\0\5\14\1\0\5\14\1\0"+
    "\1\21\4\14\1\22\2\0\26\14\13\0\3\14\1\262"+
    "\10\14\6\0\1\14\11\0\5\14\1\0\5\14\1\0"+
    "\1\21\4\14\1\22\2\0\26\14\13\0\14\14\6\0"+
    "\1\14\11\0\1\14\1\263\3\14\1\0\5\14\1\264"+
    "\1\21\4\14\1\22\2\0\26\14\13\0\3\14\1\265"+
    "\10\14\6\0\1\266\11\0\5\14\1\0\5\14\1\0"+
    "\1\21\4\14\1\22\2\0\26\14\13\0\14\14\6\0"+
    "\1\14\11\0\4\14\1\267\57\0\1\270\115\0\1\271"+
    "\45\0\5\14\1\0\1\21\4\14\1\22\2\0\14\14"+
    "\1\272\11\14\13\0\6\14\1\260\2\14\1\261\2\14"+
    "\6\0\1\14\11\0\5\14\1\0\5\14\1\0\1\21"+
    "\4\14\1\22\2\0\26\14\13\0\7\14\1\273\4\14"+
    "\6\0\1\14\11\0\5\14\1\0\5\14\1\0\1\21"+
    "\4\14\1\22\2\0\1\14\1\274\24\14\13\0\14\14"+
    "\6\0\1\14\11\0\5\14\1\0\5\14\1\275\1\21"+
    "\4\14\1\22\2\0\26\14\13\0\14\14\6\0\1\14"+
    "\11\0\5\14\1\0\5\14\1\0\1\21\4\14\1\22"+
    "\2\0\26\14\13\0\3\14\1\276\10\14\6\0\1\14"+
    "\11\0\5\14\57\0\1\277\42\0\5\14\1\0\1\21"+
    "\4\14\1\22\2\0\1\14\1\253\24\14\13\0\3\14"+
    "\1\300\10\14\6\0\1\14\11\0\5\14\1\0\5\14"+
    "\1\0\1\21\4\14\1\22\2\0\26\14\13\0\1\301"+
    "\13\14\6\0\1\14\11\0\5\14\50\131\1\0\1\231"+
    "\47\131\1\0\5\14\1\0\1\21\4\14\1\22\2\0"+
    "\2\14\2\302\22\14\13\0\14\14\6\0\1\14\11\0"+
    "\5\14\2\0\4\303\11\0\4\303\5\0\4\303\3\0"+
    "\2\303\55\0\1\303\3\0\5\14\1\0\1\21\4\14"+
    "\1\22\2\0\5\14\1\304\20\14\13\0\11\14\1\304"+
    "\2\14\6\0\1\14\11\0\5\14\1\0\5\14\1\0"+
    "\1\21\4\14\1\22\2\0\7\14\1\305\16\14\13\0"+
    "\4\14\1\305\7\14\6\0\1\14\11\0\5\14\1\0"+
    "\5\14\1\0\1\21\4\14\1\22\2\0\10\14\1\306"+
    "\15\14\13\0\7\14\1\306\4\14\6\0\1\14\11\0"+
    "\5\14\1\0\5\14\1\0\1\21\4\14\1\22\2\0"+
    "\13\14\2\307\11\14\13\0\14\14\6\0\1\14\11\0"+
    "\5\14\1\0\5\14\1\0\1\21\4\14\1\22\2\0"+
    "\24\14\1\310\1\14\13\0\1\310\13\14\6\0\1\14"+
    "\11\0\5\14\1\0\5\14\1\0\1\21\4\14\1\22"+
    "\2\0\4\14\1\311\21\14\13\0\3\14\1\311\10\14"+
    "\6\0\1\14\11\0\5\14\1\0\5\14\1\0\1\21"+
    "\4\14\1\22\2\0\2\14\2\312\22\14\13\0\14\14"+
    "\6\0\1\14\11\0\5\14\1\0\5\14\1\0\1\21"+
    "\4\14\1\22\2\0\5\14\1\313\20\14\13\0\11\14"+
    "\1\313\2\14\6\0\1\14\11\0\5\14\1\0\5\14"+
    "\1\0\1\21\4\14\1\22\2\0\7\14\1\305\16\14"+
    "\13\0\1\314\3\14\1\305\7\14\6\0\1\14\11\0"+
    "\5\14\1\0\5\14\1\0\1\21\4\14\1\22\2\0"+
    "\26\14\13\0\12\14\1\315\1\14\6\0\1\14\11\0"+
    "\5\14\1\0\5\14\1\0\1\21\4\14\1\22\2\0"+
    "\26\14\13\0\12\14\1\316\1\14\6\0\1\14\11\0"+
    "\5\14\1\0\5\14\1\0\1\21\4\14\1\22\2\0"+
    "\14\14\1\317\11\14\13\0\14\14\6\0\1\14\11\0"+
    "\5\14\1\0\5\14\1\0\1\21\4\14\1\22\2\0"+
    "\26\14\13\0\14\14\6\0\1\14\11\0\2\14\1\320"+
    "\2\14\1\0\5\14\1\0\1\21\4\14\1\22\2\0"+
    "\26\14\13\0\12\14\1\321\1\14\6\0\1\14\11\0"+
    "\5\14\1\0\5\14\1\0\1\21\4\14\1\22\2\0"+
    "\26\14\13\0\3\14\1\322\10\14\6\0\1\14\11\0"+
    "\5\14\1\0\5\14\1\0\1\21\4\14\1\22\2\0"+
    "\26\14\13\0\14\14\6\0\1\323\11\0\5\14\1\0"+
    "\5\14\1\324\1\21\4\14\1\22\2\0\26\14\13\0"+
    "\14\14\6\0\1\14\11\0\5\14\67\0\1\325\32\0"+
    "\5\14\1\0\1\21\4\14\1\22\2\0\26\14\13\0"+
    "\11\14\1\326\2\14\6\0\1\14\11\0\5\14\1\0"+
    "\5\14\1\0\1\21\4\14\1\22\2\0\26\14\13\0"+
    "\3\14\1\327\10\14\6\0\1\14\11\0\5\14\1\0"+
    "\5\14\1\0\1\21\4\14\1\22\2\0\26\14\13\0"+
    "\7\14\1\330\4\14\6\0\1\14\11\0\5\14\64\0"+
    "\1\331\2\0\1\332\32\0\5\14\1\0\1\21\1\333"+
    "\3\14\1\22\2\0\26\14\13\0\14\14\6\0\1\14"+
    "\11\0\5\14\1\0\5\14\1\0\1\21\4\14\1\22"+
    "\2\0\4\14\1\334\21\14\13\0\3\14\1\334\10\14"+
    "\6\0\1\14\11\0\5\14\2\0\4\335\11\0\4\335"+
    "\5\0\4\335\3\0\2\335\55\0\1\335\3\0\5\14"+
    "\1\0\1\21\4\14\1\22\2\0\6\14\1\336\17\14"+
    "\13\0\6\14\1\336\5\14\6\0\1\14\11\0\5\14"+
    "\1\0\5\14\1\0\1\21\4\14\1\22\2\0\7\14"+
    "\1\337\1\340\15\14\13\0\4\14\1\337\2\14\1\340"+
    "\4\14\6\0\1\14\11\0\5\14\1\0\5\14\1\0"+
    "\1\21\4\14\1\22\2\0\10\14\1\341\15\14\13\0"+
    "\7\14\1\341\4\14\6\0\1\14\11\0\5\14\1\0"+
    "\5\14\1\0\1\21\4\14\1\22\2\0\10\14\1\342"+
    "\15\14\13\0\7\14\1\342\4\14\6\0\1\14\11\0"+
    "\5\14\1\0\5\14\1\0\1\21\4\14\1\22\2\0"+
    "\2\343\24\14\13\0\14\14\6\0\1\14\11\0\5\14"+
    "\1\0\5\14\1\0\1\21\4\14\1\22\2\0\13\14"+
    "\2\344\11\14\13\0\14\14\6\0\1\14\11\0\5\14"+
    "\1\0\5\14\1\0\1\21\4\14\1\22\2\0\13\14"+
    "\2\345\11\14\13\0\14\14\6\0\1\14\11\0\5\14"+
    "\1\0\5\14\1\0\1\21\4\14\1\22\2\0\7\14"+
    "\1\346\16\14\13\0\4\14\1\346\7\14\6\0\1\14"+
    "\11\0\5\14\1\0\5\14\1\0\1\21\4\14\1\22"+
    "\2\0\26\14\13\0\4\14\1\347\7\14\6\0\1\14"+
    "\11\0\5\14\1\0\5\14\1\0\1\21\4\14\1\22"+
    "\2\0\26\14\13\0\11\14\1\350\2\14\6\0\1\14"+
    "\11\0\5\14\1\0\5\14\1\0\1\21\4\14\1\22"+
    "\2\0\14\14\1\351\11\14\13\0\14\14\6\0\1\14"+
    "\11\0\5\14\1\0\5\14\1\0\1\21\4\14\1\22"+
    "\2\0\1\14\1\352\24\14\13\0\14\14\6\0\1\14"+
    "\11\0\5\14\66\0\1\353\65\0\1\354\66\0\5\14"+
    "\1\0\1\21\4\14\1\22\2\0\3\14\1\355\22\14"+
    "\13\0\14\14\6\0\1\14\11\0\5\14\1\0\5\14"+
    "\1\0\1\21\1\356\3\14\1\22\2\0\26\14\13\0"+
    "\14\14\6\0\1\14\11\0\5\14\66\0\1\357\42\0"+
    "\1\360\111\0\5\14\1\0\1\21\4\14\1\22\2\0"+
    "\26\14\13\0\1\361\13\14\6\0\1\14\11\0\5\14"+
    "\1\0\5\14\1\0\1\21\4\14\1\22\2\0\5\14"+
    "\1\362\20\14\13\0\11\14\1\362\2\14\6\0\1\14"+
    "\11\0\5\14\2\0\4\14\11\0\4\14\5\0\4\14"+
    "\3\0\2\14\55\0\1\14\3\0\5\14\1\0\1\21"+
    "\4\14\1\22\2\0\7\14\1\363\16\14\13\0\4\14"+
    "\1\363\7\14\6\0\1\14\11\0\5\14\1\0\5\14"+
    "\1\0\1\21\4\14\1\22\2\0\13\14\2\364\11\14"+
    "\13\0\14\14\6\0\1\14\11\0\5\14\1\0\5\14"+
    "\1\0\1\21\4\14\1\22\2\0\13\14\2\365\11\14"+
    "\13\0\14\14\6\0\1\14\11\0\5\14\1\0\5\14"+
    "\1\0\1\21\4\14\1\22\2\0\4\14\1\366\21\14"+
    "\13\0\3\14\1\366\10\14\6\0\1\14\11\0\5\14"+
    "\1\0\5\14\1\0\1\21\4\14\1\22\2\0\10\14"+
    "\1\367\15\14\13\0\7\14\1\367\4\14\6\0\1\14"+
    "\11\0\5\14\1\0\5\14\1\0\1\21\4\14\1\22"+
    "\2\0\3\14\1\370\22\14\13\0\14\14\6\0\1\14"+
    "\11\0\5\14\1\0\5\14\1\0\1\21\4\14\1\22"+
    "\2\0\3\14\1\371\22\14\13\0\14\14\6\0\1\14"+
    "\11\0\5\14\1\0\5\14\1\0\1\21\4\14\1\22"+
    "\2\0\26\14\13\0\3\14\1\372\10\14\6\0\1\14"+
    "\11\0\5\14\3\0\1\373\200\0\1\374\36\0\5\14"+
    "\1\0\1\21\4\14\1\22\2\0\1\14\1\375\24\14"+
    "\13\0\14\14\6\0\1\14\11\0\5\14\1\0\5\14"+
    "\1\0\1\21\4\14\1\22\2\0\26\14\13\0\1\376"+
    "\13\14\6\0\1\14\11\0\5\14\63\0\1\377\66\0"+
    "\1\u0100\70\0\5\14\1\0\1\21\4\14\1\22\2\0"+
    "\26\14\13\0\4\14\1\u0101\7\14\6\0\1\14\11\0"+
    "\5\14\1\0\5\14\1\0\1\21\4\14\1\22\2\0"+
    "\6\14\1\u0102\17\14\13\0\6\14\1\u0102\5\14\6\0"+
    "\1\14\11\0\5\14\1\0\5\14\1\0\1\21\4\14"+
    "\1\22\2\0\10\14\1\u0103\15\14\13\0\7\14\1\u0103"+
    "\4\14\6\0\1\14\11\0\5\14\1\0\5\14\1\0"+
    "\1\21\4\14\1\22\2\0\17\14\1\u0104\6\14\13\0"+
    "\12\14\1\u0104\1\14\6\0\1\14\11\0\5\14\1\0"+
    "\5\14\1\0\1\21\4\14\1\22\2\0\4\14\1\u0105"+
    "\21\14\13\0\3\14\1\u0105\10\14\6\0\1\14\11\0"+
    "\5\14\1\0\5\14\1\0\1\21\4\14\1\22\2\0"+
    "\5\14\1\u0106\20\14\13\0\11\14\1\u0106\2\14\6\0"+
    "\1\14\11\0\5\14\1\0\5\14\1\0\1\21\4\14"+
    "\1\22\2\0\10\14\1\u0107\15\14\13\0\7\14\1\u0107"+
    "\4\14\6\0\1\14\11\0\5\14\1\0\5\14\1\0"+
    "\1\21\4\14\1\22\2\0\26\14\13\0\3\14\1\u0108"+
    "\10\14\6\0\1\14\11\0\5\14\1\0\5\14\1\0"+
    "\1\21\4\14\1\22\2\0\14\14\1\u0109\11\14\13\0"+
    "\14\14\6\0\1\14\11\0\5\14\1\0\5\14\1\0"+
    "\1\21\4\14\1\22\2\0\26\14\13\0\12\14\1\u010a"+
    "\1\14\6\0\1\14\11\0\5\14\1\0\5\14\1\0"+
    "\1\21\4\14\1\22\2\0\14\14\1\u010b\11\14\13\0"+
    "\14\14\6\0\1\14\11\0\5\14\6\0\1\u010c\134\0"+
    "\1\u010d\77\0\5\14\1\0\1\21\4\14\1\22\2\0"+
    "\7\14\1\u010e\16\14\13\0\4\14\1\u010e\7\14\6\0"+
    "\1\14\11\0\5\14\1\0\5\14\1\0\1\21\4\14"+
    "\1\22\2\0\10\14\1\u010f\15\14\13\0\7\14\1\u010f"+
    "\4\14\6\0\1\14\11\0\5\14\1\0\5\14\1\0"+
    "\1\21\4\14\1\22\2\0\10\14\1\u0110\15\14\13\0"+
    "\7\14\1\u0110\4\14\6\0\1\14\11\0\5\14\1\0"+
    "\5\14\1\0\1\21\4\14\1\22\2\0\6\14\1\u0111"+
    "\17\14\13\0\6\14\1\u0111\5\14\6\0\1\14\11\0"+
    "\5\14\1\0\5\14\1\0\1\21\4\14\1\22\2\0"+
    "\14\14\1\u0112\11\14\13\0\14\14\6\0\1\14\11\0"+
    "\5\14\73\0\1\u0113\117\0\1\u0114\27\0\5\14\1\0"+
    "\1\21\4\14\1\22\2\0\10\14\1\u0115\15\14\13\0"+
    "\7\14\1\u0115\4\14\6\0\1\14\11\0\5\14\1\0"+
    "\5\14\1\0\1\21\4\14\1\22\2\0\7\14\1\u0116"+
    "\16\14\13\0\4\14\1\u0116\7\14\6\0\1\14\11\0"+
    "\5\14\1\0\5\14\1\0\1\21\4\14\1\22\2\0"+
    "\21\14\1\u0117\4\14\13\0\14\14\6\0\1\14\11\0"+
    "\5\14\33\0\1\u0118\105\0\1\u0119\101\0\5\14\1\0"+
    "\1\21\4\14\1\22\2\0\10\14\1\u011a\15\14\13\0"+
    "\7\14\1\u011a\4\14\6\0\1\14\11\0\5\14\63\0"+
    "\1\u011b\124\0\1\u011c\37\0\1\u011d\201\0\1\u011e\120\0"+
    "\1\u011f\37\0\1\u0120\177\0\1\u0121\113\0\1\u0122\73\0"+
    "\1\u0123\120\0\1\u0124\107\0\1\u0125\165\0\1\u0126\122\0"+
    "\1\u0127\114\0\1\u0128\36\0\1\u0129\203\0\1\u012a\123\0"+
    "\1\u012b\113\0\1\u012c\67\0\1\u012d\154\0\1\u012e\71\0"+
    "\1\u012f\151\0\1\u0130\60\0\1\u0131\160\0\1\u0132\121\0"+
    "\1\u0133\117\0\1\u0134\112\0\1\u0135\130\0\1\u0136\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17820];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\4\1\1\11\2\0\10\1\1\0\2\1\1\11"+
    "\1\1\2\11\4\1\1\11\1\1\1\11\1\1\1\11"+
    "\13\1\7\11\2\1\3\11\13\1\1\11\2\0\1\1"+
    "\1\11\1\1\3\11\1\1\1\11\1\1\1\11\2\1"+
    "\2\0\11\1\1\11\4\1\5\11\1\1\2\11\15\1"+
    "\1\11\1\0\3\11\1\1\2\11\11\1\4\11\1\1"+
    "\2\11\3\1\1\0\14\1\1\11\12\1\1\0\3\1"+
    "\2\11\3\1\1\0\1\1\1\11\3\1\1\0\20\1"+
    "\2\0\3\1\2\0\2\1\1\0\15\1\2\0\2\1"+
    "\2\0\12\1\2\11\2\1\2\0\13\1\2\0\5\1"+
    "\2\0\3\1\2\0\1\1\24\0\1\11\6\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  static private Stack<Integer> stateStack = new Stack<Integer>();
  
  // placeholder for the reserved word (keyword) table
  static private HashMap<String,Integer> keywords = null;
  
  // initialize the reserved word table as a static constructor
  static {
    keywords = new HashMap<String,Integer>();
    
    keywords.put("abs", CmlParser.ABS);
    //keywords.put("all", CmlParser.ALL);
    //keywords.put("always", CmlParser.ALWAYS);
    keywords.put("and", CmlParser.AND);
    keywords.put("atomic", CmlParser.ATOMIC);
    //keywords.put("async", CmlParser.ASYNC);
    //keywords.put("be", CmlParser.BE);
    keywords.put("bool", CmlParser.TBOOL);
    //keywords.put("by", CmlParser.BY);
    keywords.put("card", CmlParser.CARD);
    keywords.put("cases", CmlParser.CASES);
    keywords.put("char", CmlParser.TCHAR);
    keywords.put("class", CmlParser.CLASS);
    /*
    keywords.put("comp", CmlParser.COMP);
    keywords.put("compose", CmlParser.COMPOSE);
    keywords.put("conc", CmlParser.CONC);
    keywords.put("cycles", CmlParser.CYCLES);
    keywords.put("dcl", CmlParser.DCL);
    keywords.put("def", CmlParser.DEF);
    keywords.put("dinter", CmlParser.DINTER);
    keywords.put("div", CmlParser.ARITHMETIC_INTEGER_DIVISION);
    keywords.put("do", CmlParser.DO);
    keywords.put("dom", CmlParser.DOM);
    keywords.put("dunion", CmlParser.DUNION);
    keywords.put("duration", CmlParser.DURATION);
    keywords.put("elems", CmlParser.ELEMS);
    keywords.put("else", CmlParser.ELSE);
    keywords.put("elseif", CmlParser.ELSEIF);
    */
    keywords.put("end", CmlParser.END);
    /*
    keywords.put("error", CmlParser.ERROR);
    keywords.put("errs", CmlParser.ERRS);
    keywords.put("exists", CmlParser.EXISTS);
    keywords.put("exists1", CmlParser.EXISTS1);
    keywords.put("exit", CmlParser.EXIT);
    keywords.put("ext", CmlParser.EXT);
    keywords.put("false", CmlParser.bool_false);
    keywords.put("floor", CmlParser.FLOOR);
    keywords.put("for", CmlParser.FOR);
    keywords.put("forall", CmlParser.FORALL);
    keywords.put("from", CmlParser.FROM);
    keywords.put("functions", CmlParser.FUNCTIONS);
    keywords.put("hd", CmlParser.HD);
    keywords.put("if", CmlParser.IF);
    keywords.put("in", CmlParser.IN);
    keywords.put("inds", CmlParser.INDS);
    keywords.put("inmap", CmlParser.INMAP);
    keywords.put("instance", CmlParser.INSTANCE);
    keywords.put("int", CmlParser.INT);
    keywords.put("inter", CmlParser.SET_INTERSECTION);
    keywords.put("inv", CmlParser.INV);
    keywords.put("inverse", CmlParser.INVERSE);
    keywords.put("iota", CmlParser.IOTA);
    keywords.put("is", CmlParser.IS);
    keywords.put("is_", CmlParser.IS_);
    keywords.put("isofbaseclass", CmlParser.ISOFBASECLASS);
    keywords.put("isofclass", CmlParser.ISOFCLASS);
    keywords.put("lambda", CmlParser.LAMBDA);
    keywords.put("len", CmlParser.LEN);
    keywords.put("let", CmlParser.LET);
    keywords.put("map", CmlParser.MAP);
    keywords.put("merge", CmlParser.DMERGE);
    keywords.put("mk_", CmlParser.MK_);
    keywords.put("mod", CmlParser.MOD);
    keywords.put("mu", CmlParser.MU);
    keywords.put("munion", CmlParser.MAP_MERGE);
    keywords.put("mutex", CmlParser.MUTEX);
    */
    keywords.put("nat", CmlParser.TNAT);
    keywords.put("nat1", CmlParser.TNAT1);
    /*
    keywords.put("new", CmlParser.NEW);
    keywords.put("nil", CmlParser.NIL);
    keywords.put("not", CmlParser.NOT);
    keywords.put("of", CmlParser.OF);
    keywords.put("operations", CmlParser.OPERATIONS);
    keywords.put("or", CmlParser.OR);
    keywords.put("others", CmlParser.OTHERS);
    keywords.put("per", CmlParser.PER);
    keywords.put("periodic", CmlParser.PERIODIC);
    keywords.put("post", CmlParser.POST);
    keywords.put("power", CmlParser.POWER);
    keywords.put("pre", CmlParser.PRE);
    keywords.put("pre_", CmlParser.PRECONDAPPLY);
    */
    //keywords.put("private", CmlParser.PRIVATE);
    keywords.put("process", CmlParser.PROCESS);
    //keywords.put("protected", CmlParser.PROTECTED);
    keywords.put("psubset", CmlParser.PROPER_SUBSET);
    //keywords.put("public", CmlParser.PUBLIC);
    keywords.put("rat", CmlParser.TRAT);
    /*
    keywords.put("rd", CmlParser.VDMRD);
    */
    keywords.put("real", CmlParser.TREAL);
    /*
    keywords.put("rem", CmlParser.REM);
    keywords.put("responsibility", CmlParser.RESPONSIBILITY);
    keywords.put("return", CmlParser.RETURN);
    keywords.put("reverse", CmlParser.REVERSE);
    keywords.put("rng", CmlParser.RNG);
    keywords.put("samebaseclass", CmlParser.SAMEBASECLASS);
    keywords.put("sameclass", CmlParser.SAMECLASS);
    keywords.put("self", CmlParser.SELF);
    keywords.put("seq", CmlParser.SEQ);
    keywords.put("seq1", CmlParser.SEQ1);
    keywords.put("set", CmlParser.SET);
    keywords.put("skip", CmlParser.SKIP);
    keywords.put("specified", CmlParser.SPECIFIED);
    keywords.put("st", CmlParser.ST);
    keywords.put("start", CmlParser.START);
    keywords.put("startlist", CmlParser.STARTLIST);
    keywords.put("static", CmlParser.STATIC);
    keywords.put("subclass", CmlParser.SUBCLASS);
    keywords.put("subset", CmlParser.SUBSET);
    keywords.put("sync", CmlParser.SYNC);
    keywords.put("system", CmlParser.SYSTEM);
    keywords.put("then", CmlParser.THEN);
    keywords.put("thread", CmlParser.THREAD);
    keywords.put("threadid", CmlParser.THREADID);
    keywords.put("time", CmlParser.TIME);
    keywords.put("tixe", CmlParser.TIXE);
    keywords.put("tl", CmlParser.TL);
    keywords.put("to", CmlParser.TO);
    */
    keywords.put("token", CmlParser.TTOKEN);
    /*
    keywords.put("trap", CmlParser.TRAP);
    keywords.put("true", CmlParser.bool_true);
    */
    keywords.put("types", CmlParser.TYPES);
    //keywords.put("undefined", CmlParser.UNDEFINED);
    keywords.put("union", CmlParser.UNION);
    keywords.put("values", CmlParser.VALUES);
    //keywords.put("variables", CmlParser.INSTANCEVARS);
    /*
    keywords.put("while", CmlParser.WHILE);
    keywords.put("with", CmlParser.WITH);
    keywords.put("wr", CmlParser.VDMWR);
    keywords.put("yet", CmlParser.YET);
    */
    
  }


  private CmlLexeme yylvalue;
  
  public int errors = 0;
public List<ParserError> parseErrors = new Vector<ParserError>();
  
    /**
     * Method to retrieve the beginning position of the last scanned token.
     * @return the position at which the last scanned token starts.  */
  public Position getStartPos () { return yylvalue.getStartPos(); }

    /**
     * Method to retrieve the ending position of the last scanned token.
     * @return the first position beyond the last scanned token.  */
  public Position getEndPos () { return yylvalue.getEndPos(); }

    /**
     * Method to retrieve the semantic value of the last scanned token.
     * @return the semantic value of the last scanned token.  */
  public Object getLVal () { return yylvalue; }
  
    /**
     * Entry point for error reporting.  Emits an error
     * referring to the given location in a user-defined way.
     *
     * @param loc The location of the element to which the
     *                error message is related
     * @param s The string for the error message.  */
  public void yyerror (Location loc, String err) { 
    
    System.err.println("Error : " + err + " at " + loc.begin.toString()); 
    
      String msg = new String(err);
	    if (yylvalue != null) {
	    	CmlLexeme currentToken = (CmlLexeme) yylvalue;
	    	if (currentToken.getValue().length() > 0) {
	    		// add position info iff the scanner found a lexem
	    	    msg += " at (" + currentToken.getStartPos().line + ", " + currentToken.getStartPos().column + ")";
	    		msg += " after reading token \"" + currentToken.getValue() + "\"";
	    		
	    		parseErrors.add(new ParserError(err+" after reading token \"" + currentToken.getValue() + "\"", 
	    		currentToken.getStartPos().line, currentToken.getStartPos().column));
	    	}
	    }
		System.out.println(msg);
		errors++;
    
  }
   

  // ************************************
  // *** AUXILIARY PRIVATE OPERATIONS ***
  // ************************************

  // helper function for checking reserved words and identifiers
  private int checkIdentifier(String id) {
      
      int line = yyline + 1;
      int column = yycolumn;
      String value = yytext();
      
      try {
	  if (keywords.containsKey(id)) {
	      //return new OmlLexem(line, column, new Long(keywords.get(id)), id, IOmlLexem.ILEXEMKEYWORD);
	      //return new CmlLexeme(line, column,IDENTIFIER, id);
	      yylvalue = new CmlLexeme(new Position(line,column),new Position(line,column + value.length()),keywords.get(id),value);
	      return keywords.get(id);
	      
	  } else {
	      //DEBUG String theText = yytext();
	      //DEBUG System.out.print(theText + " = ");
	      //DEBUG for (int idx=0; idx< theText.length(); idx++) System.out.format("%04x ", (int) theText.charAt(idx));
	      //DEBUG System.out.println();
	      //return new OmlLexem(line, column, new Long(LEX_identifier), id, IOmlLexem.ILEXEMIDENTIFIER);
	      //return new CmlLexeme(line, column, IDENTIFIER, id);
	      yylvalue = new CmlLexeme(new Position(line,column),new Position(line,column + value.length()),CmlParser.IDENTIFIER,value);
	      return CmlParser.IDENTIFIER;
	  }
      }
      catch (Exception cge) {
	  cge.printStackTrace();
	  return -1;
      }
  }
  
  // helper function for default token creation
  private int defaultToken()
  {
    return createToken(yytext().charAt(0));
  }
  
  
  /* Helper function to return the correct integer for the parser and create the correct Lexeme (semantic) values for the parser and beyond */
  private int createToken(int lex)
  {
    int line = yyline + 1;
    int column = yycolumn;
    String value = yytext();
    try {
      yylvalue = new CmlLexeme(new Position(line,column),new Position(line,column + value.length()),lex,value);
      //return new CmlLexeme(line, column, lex, yytext());
      return lex;
    }
    catch (Exception cge) {
      cge.printStackTrace();
      return -1;
    }
  }
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CmlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CmlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 25: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [655] { return createToken(CmlParser.LPAREN); }");
          { return createToken(CmlParser.LPAREN);
          }
        case 101: break;
        case 62: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [632] { return createToken(CmlParser.RNGSUB /*MAP_RANGE_RESTRICT_BY*/); }");
          { return createToken(CmlParser.RNGSUB /*MAP_RANGE_RESTRICT_BY*/);
          }
        case 102: break;
        case 36: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [638] { return createToken(CmlParser.IMPLY); }");
          { return createToken(CmlParser.IMPLY);
          }
        case 103: break;
        case 6: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [648] { return createToken(CmlParser.BACKTICK); }");
          { return createToken(CmlParser.BACKTICK);
          }
        case 104: break;
        case 17: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [661] { return createToken(CmlParser.RCURLY); }");
          { return createToken(CmlParser.RCURLY);
          }
        case 105: break;
        case 98: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [542] { yybegin(OPERATIONS); return createToken(CmlParser.OPERATIONS); }");
          { yybegin(OPERATIONS); return createToken(CmlParser.OPERATIONS);
          }
        case 106: break;
        case 73: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [578] { return createToken(CmlParser.OPERATIONARROW); }");
          { return createToken(CmlParser.OPERATIONARROW);
          }
        case 107: break;
        case 76: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [683] { return createToken(CmlParser.TBOOL); }");
          { return createToken(CmlParser.TBOOL);
          }
        case 108: break;
        case 56: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [606] { return createToken(CmlParser.RARROW); }");
          { return createToken(CmlParser.RARROW);
          }
        case 109: break;
        case 77: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [688] { return createToken(CmlParser.TREAL); }");
          { return createToken(CmlParser.TREAL);
          }
        case 110: break;
        case 31: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [613] { return createToken(CmlParser.AT); }");
          { return createToken(CmlParser.AT);
          }
        case 111: break;
        case 28: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [609] { return createToken(CmlParser.AMP); }");
          { return createToken(CmlParser.AMP);
          }
        case 112: break;
        case 66: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [680] { return createToken(CmlParser.MKUNDER); }");
          { return createToken(CmlParser.MKUNDER);
          }
        case 113: break;
        case 97: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [696] { return createToken(CmlParser.PROTECTED); }");
          { return createToken(CmlParser.PROTECTED);
          }
        case 114: break;
        case 5: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [670] { return createToken(CmlParser.SETDIFF); }");
          { return createToken(CmlParser.SETDIFF);
          }
        case 115: break;
        case 15: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [660] { return createToken(CmlParser.LCURLY); }");
          { return createToken(CmlParser.LCURLY);
          }
        case 116: break;
        case 93: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [588] { return createToken(CmlParser.MEASURE); }");
          { return createToken(CmlParser.MEASURE);
          }
        case 117: break;
        case 74: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [612] { return createToken(CmlParser.CSP_VARDECL); }");
          { return createToken(CmlParser.CSP_VARDECL);
          }
        case 118: break;
        case 3: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [702] { /* match whitespace; do nothing */ }");
          { /* match whitespace; do nothing */
          }
        case 119: break;
        case 14: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [665] { return createToken(CmlParser.GT); }");
          { return createToken(CmlParser.GT);
          }
        case 120: break;
        case 37: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [626] { return createToken(CmlParser.VDMTYPE); }");
          { return createToken(CmlParser.VDMTYPE);
          }
        case 121: break;
        case 8: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [663] { return createToken(CmlParser.DIV); }");
          { return createToken(CmlParser.DIV);
          }
        case 122: break;
        case 86: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [692] { return createToken(CmlParser.VDMSETOF); }");
          { return createToken(CmlParser.VDMSETOF);
          }
        case 123: break;
        case 79: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [586] { return createToken(CmlParser.POST); }");
          { return createToken(CmlParser.POST);
          }
        case 124: break;
        case 27: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [605] { return createToken(CmlParser.CSPSEQ); }");
          { return createToken(CmlParser.CSPSEQ);
          }
        case 125: break;
        case 20: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [659] { return createToken(CmlParser.RSQUARE); }");
          { return createToken(CmlParser.RSQUARE);
          }
        case 126: break;
        case 100: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [589] { return createToken(CmlParser.VDM_SUBCLASSRESP); }");
          { return createToken(CmlParser.VDM_SUBCLASSRESP);
          }
        case 127: break;
        case 46: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [634] { return createToken(CmlParser.DOTHASH); }");
          { return createToken(CmlParser.DOTHASH);
          }
        case 128: break;
        case 48: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [563] { return createToken(CmlParser.VDMTYPENCMP); }");
          { return createToken(CmlParser.VDMTYPENCMP);
          }
        case 129: break;
        case 81: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [539] { yybegin(TYPES); return createToken(CmlParser.TYPES); }");
          { yybegin(TYPES); return createToken(CmlParser.TYPES);
          }
        case 130: break;
        case 68: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [694] { return createToken(CmlParser.VDMINV); }");
          { return createToken(CmlParser.VDMINV);
          }
        case 131: break;
        case 82: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [540] { yybegin(STATE); return createToken(CmlParser.STATE); }");
          { yybegin(STATE); return createToken(CmlParser.STATE);
          }
        case 132: break;
        case 72: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [581] { return createToken(CmlParser.VDM_EXT); }");
          { return createToken(CmlParser.VDM_EXT);
          }
        case 133: break;
        case 22: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [664] { return createToken(CmlParser.LT); }");
          { return createToken(CmlParser.LT);
          }
        case 134: break;
        case 54: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [599] { return createToken(CmlParser.CSP_CHANSET_END); }");
          { return createToken(CmlParser.CSP_CHANSET_END);
          }
        case 135: break;
        case 9: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [668] { return createToken(CmlParser.STAR); }");
          { return createToken(CmlParser.STAR);
          }
        case 136: break;
        case 45: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [637] { return createToken(CmlParser.NEQ); }");
          { return createToken(CmlParser.NEQ);
          }
        case 137: break;
        case 60: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [543] { yybegin(stateStack.pop()); return createToken(CmlParser.END); }");
          { yybegin(stateStack.pop()); return createToken(CmlParser.END);
          }
        case 138: break;
        case 96: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [541] { yybegin(FUNCTIONS); return createToken(CmlParser.FUNCTIONS); }");
          { yybegin(FUNCTIONS); return createToken(CmlParser.FUNCTIONS);
          }
        case 139: break;
        case 23: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [666] { return createToken(CmlParser.DOT); }");
          { return createToken(CmlParser.DOT);
          }
        case 140: break;
        case 19: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [658] { return createToken(CmlParser.LSQUARE); }");
          { return createToken(CmlParser.LSQUARE);
          }
        case 141: break;
        case 84: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [690] { return createToken(CmlParser.TTOKEN); }");
          { return createToken(CmlParser.TTOKEN);
          }
        case 142: break;
        case 30: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [611] { return createToken(CmlParser.CSP_CHANNEL_READ); }");
          { return createToken(CmlParser.CSP_CHANNEL_READ);
          }
        case 143: break;
        case 12: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [657] { return createToken(CmlParser.MINUS); }");
          { return createToken(CmlParser.MINUS);
          }
        case 144: break;
        case 59: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [705] { return createToken(CmlParser.HEX_LITERAL); }");
          { return createToken(CmlParser.HEX_LITERAL);
          }
        case 145: break;
        case 88: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [582] { return createToken(CmlParser.RETURN); }");
          { return createToken(CmlParser.RETURN);
          }
        case 146: break;
        case 41: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [636] { return createToken(CmlParser.GTE); }");
          { return createToken(CmlParser.GTE);
          }
        case 147: break;
        case 57: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [614] { return createToken(CmlParser.CSPINTCH); }");
          { return createToken(CmlParser.CSPINTCH);
          }
        case 148: break;
        case 42: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [673] { return createToken(CmlParser.OR); }");
          { return createToken(CmlParser.OR);
          }
        case 149: break;
        case 61: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [672] { return createToken(CmlParser.AND); }");
          { return createToken(CmlParser.AND);
          }
        case 150: break;
        case 78: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [685] { return createToken(CmlParser.TNAT1); }");
          { return createToken(CmlParser.TNAT1);
          }
        case 151: break;
        case 87: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [676] { return createToken(CmlParser.INSET); }");
          { return createToken(CmlParser.INSET);
          }
        case 152: break;
        case 29: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [610] { return createToken(CmlParser.CSP_CHANNEL_WRITE); }");
          { return createToken(CmlParser.CSP_CHANNEL_WRITE);
          }
        case 153: break;
        case 1: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [703] { return createToken(CmlParser.IDENTIFIER); }");
          { return createToken(CmlParser.IDENTIFIER);
          }
        case 154: break;
        case 34: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [523] { stateStack.push(yystate()); yybegin(COMMENT); }");
          { stateStack.push(yystate()); yybegin(COMMENT);
          }
        case 155: break;
        case 16: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [656] { return createToken(CmlParser.BAR); }");
          { return createToken(CmlParser.BAR);
          }
        case 156: break;
        case 99: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [590] { return createToken(CmlParser.VDM_NOTYETSPEC); }");
          { return createToken(CmlParser.VDM_NOTYETSPEC);
          }
        case 157: break;
        case 92: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [698] { return createToken(CmlParser.LOGICAL); }");
          { return createToken(CmlParser.LOGICAL);
          }
        case 158: break;
        case 52: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [580] { return createToken(CmlParser.VDM_WR); }");
          { return createToken(CmlParser.VDM_WR);
          }
        case 159: break;
        case 43: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [635] { return createToken(CmlParser.LTE); }");
          { return createToken(CmlParser.LTE);
          }
        case 160: break;
        case 44: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [645] { return createToken(CmlParser.DOMRES/*MAP_DOMAIN_RESTRICT_TO*/); }");
          { return createToken(CmlParser.DOMRES/*MAP_DOMAIN_RESTRICT_TO*/);
          }
        case 161: break;
        case 65: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [674] { return createToken(CmlParser.NOT); }");
          { return createToken(CmlParser.NOT);
          }
        case 162: break;
        case 11: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [651] { return createToken(CmlParser.COLON); }");
          { return createToken(CmlParser.COLON);
          }
        case 163: break;
        case 91: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [695] { return createToken(CmlParser.PRIVATE); }");
          { return createToken(CmlParser.PRIVATE);
          }
        case 164: break;
        case 55: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [615] { return createToken(CmlParser.CSP_OPS_COM); }");
          { return createToken(CmlParser.CSP_OPS_COM);
          }
        case 165: break;
        case 64: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [684] { return createToken(CmlParser.TNAT); }");
          { return createToken(CmlParser.TNAT);
          }
        case 166: break;
        case 69: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [629] { return createToken(CmlParser.BIMPLY); }");
          { return createToken(CmlParser.BIMPLY);
          }
        case 167: break;
        case 26: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [669] { return createToken(CmlParser.CONC); }");
          { return createToken(CmlParser.CONC);
          }
        case 168: break;
        case 39: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [642] { return createToken(CmlParser.VDMRECORDDEF); }");
          { return createToken(CmlParser.VDMRECORDDEF);
          }
        case 169: break;
        case 90: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [530] { stateStack.push(yystate());yybegin(PROCESS); return createToken(CmlParser.PROCESS); }");
          { stateStack.push(yystate());yybegin(PROCESS); return createToken(CmlParser.PROCESS);
          }
        case 170: break;
        case 89: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [536] { yybegin(ACTIONS); return createToken(CmlParser.CSP_ACTIONS); }");
          { yybegin(ACTIONS); return createToken(CmlParser.CSP_ACTIONS);
          }
        case 171: break;
        case 47: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [565] { return createToken(CmlParser.DEQUALS); }");
          { return createToken(CmlParser.DEQUALS);
          }
        case 172: break;
        case 95: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [538] { yybegin(CHANSETS); return createToken(CmlParser.CHANSETS); }");
          { yybegin(CHANSETS); return createToken(CmlParser.CHANSETS);
          }
        case 173: break;
        case 7: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [647] { return createToken(CmlParser.TILDE /*HOOK*/); }");
          { return createToken(CmlParser.TILDE /*HOOK*/);
          }
        case 174: break;
        case 85: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [697] { return createToken(CmlParser.PUBLIC); }");
          { return createToken(CmlParser.PUBLIC);
          }
        case 175: break;
        case 58: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [524] { yybegin(stateStack.pop()); }");
          { yybegin(stateStack.pop());
          }
        case 176: break;
        case 70: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [631] { return createToken(CmlParser.VDM_MAP_DOMAIN_RESTRICT_BY); }");
          { return createToken(CmlParser.VDM_MAP_DOMAIN_RESTRICT_BY);
          }
        case 177: break;
        case 2: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [704] { return createToken(CmlParser.NUMERAL); }");
          { return createToken(CmlParser.NUMERAL);
          }
        case 178: break;
        case 24: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [654] { return createToken(CmlParser.RPAREN); }");
          { return createToken(CmlParser.RPAREN);
          }
        case 179: break;
        case 21: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [649] { return createToken(CmlParser.COMMA); }");
          { return createToken(CmlParser.COMMA);
          }
        case 180: break;
        case 71: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [587] { return createToken(CmlParser.PRE); }");
          { return createToken(CmlParser.PRE);
          }
        case 181: break;
        case 49: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [574] { return createToken(CmlParser.VDMTFUNCARROW); }");
          { return createToken(CmlParser.VDMTFUNCARROW);
          }
        case 182: break;
        case 94: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [537] { yybegin(CHANNELS); return createToken(CmlParser.CHANNELS); }");
          { yybegin(CHANNELS); return createToken(CmlParser.CHANNELS);
          }
        case 183: break;
        case 10: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [652] { return createToken(CmlParser.SEMI); }");
          { return createToken(CmlParser.SEMI);
          }
        case 184: break;
        case 53: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [598] { return createToken(CmlParser.CSP_CHANSET_BEGIN); }");
          { return createToken(CmlParser.CSP_CHANSET_BEGIN);
          }
        case 185: break;
        case 80: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [531] { stateStack.push(yystate());yybegin(CLASS); return createToken(CmlParser.CLASS); }");
          { stateStack.push(yystate());yybegin(CLASS); return createToken(CmlParser.CLASS);
          }
        case 186: break;
        case 4: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [556] { return createToken(CmlParser.EQUALS); }");
          { return createToken(CmlParser.EQUALS);
          }
        case 187: break;
        case 51: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [579] { return createToken(CmlParser.VDM_RD); }");
          { return createToken(CmlParser.VDM_RD);
          }
        case 188: break;
        case 63: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [687] { return createToken(CmlParser.TRAT); }");
          { return createToken(CmlParser.TRAT);
          }
        case 189: break;
        case 32: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [525] { /* match comment text; do nothing */ }");
          { /* match comment text; do nothing */
          }
        case 190: break;
        case 38: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [641] { return createToken(CmlParser.ASSIGN); }");
          { return createToken(CmlParser.ASSIGN);
          }
        case 191: break;
        case 50: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [573] { return createToken(CmlParser.VDMPFUNCARROW); }");
          { return createToken(CmlParser.VDMPFUNCARROW);
          }
        case 192: break;
        case 35: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [639] { return createToken(CmlParser.DEQUALS /*IS_DEFINED_AS*/); }");
          { return createToken(CmlParser.DEQUALS /*IS_DEFINED_AS*/);
          }
        case 193: break;
        case 67: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [686] { return createToken(CmlParser.TINT); }");
          { return createToken(CmlParser.TINT);
          }
        case 194: break;
        case 13: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [662] { return createToken(CmlParser.PLUS); }");
          { return createToken(CmlParser.PLUS);
          }
        case 195: break;
        case 40: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [644] { return createToken(CmlParser.OVERWRITE /*MODIFY_BY*/); }");
          { return createToken(CmlParser.OVERWRITE /*MODIFY_BY*/);
          }
        case 196: break;
        case 33: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [522] { /* match comment; do nothing */ }");
          { /* match comment; do nothing */
          }
        case 197: break;
        case 83: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [557] { return createToken(CmlParser.BEGIN); }");
          { return createToken(CmlParser.BEGIN);
          }
        case 198: break;
        case 75: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [689] { return createToken(CmlParser.TCHAR); }");
          { return createToken(CmlParser.TCHAR);
          }
        case 199: break;
        case 18: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [667] {  }");
          { 
          }
        case 200: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: <<EOF>>");
                System.out.println("action [710] { return 0; }");
                return 0;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java CmlLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        CmlLexer scanner = null;
        try {
          scanner = new CmlLexer( new java.io.FileReader(argv[i]) );
          do {
            System.out.println(scanner.yylex());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
