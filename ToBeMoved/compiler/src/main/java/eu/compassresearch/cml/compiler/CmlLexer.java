/* The following code was generated by JFlex 1.4.3 on 1/27/12 3:54 PM */

package eu.compassresearch.cml.compiler;
import java.util.LinkedList;
import java.util.List;
import java.util.HashMap;
import java.util.Vector;
import eu.compassresearch.cml.compiler.CmlParser.Lexer;
import eu.compassresearch.cml.compiler.CmlParser.Location;

/*
class CmlContext {
  
}
*/
class LexicographicalRuntimeException extends RuntimeException
{
  private int pos,line;
  private  String value;
  public LexicographicalRuntimeException(String chars)
    {
      this.pos = CMLToken.curPos;
      this.line = CMLToken.curLine;
      this.value = chars;
    }
  
  @Override
    public String toString()
    {
      return "Offending syntax "+(value != null ? "starting with \""+value+"\" ":"")+"found at line "+(line+1)+" position "+(pos+1);
    }
}

class CmlLexeme {
  
    private Position startPos;
    private Position endPos;
    protected  String value;
    private int lex;

    public CmlLexeme(Position startPos, Position endPos, int lex, String value)
    {
	this.value = value;
	this.startPos = startPos;
	this.endPos = endPos;
	this.lex = lex;
    }

    public Position getStartPos()
    {
	return startPos;
    }

    public Position getEndPos()
    {
	return endPos;
    }

    public int getLexValue()
    {
	return lex;
    }
    
    public String getValue()
    {
	return this.value;
    }

    public String toString()
    {
	return value + " " + startPos;
    }
}

class CMLToken {
  public static int curLine;
  public static int curPos; 

  private int line;
  private int pos;
  protected  String value;
  public CMLToken(String value)
  {
    this.value = value;
    this.line = line;
    this.pos = pos;
  }

  public String getValue()
  {
    return this.value;
  }

  public static void main(String[] args) throws Exception
  {
    try{
    new CmlLexer(System.in).yylex();
    } catch (LexicographicalRuntimeException e)
	{
	  System.out.println(e);
	}
  }
}

class StringToken extends CMLToken {
  static StringToken currentString;
  private StringBuilder currentLine;
  private List<String> lines = new LinkedList<String>();

  private int endLine;
  private int endPos;

  public StringToken(int startLine, int startPos)
  {
    super("\"");
    currentLine = new StringBuilder();
  }

  public void append(String chars)
  {
    currentLine.append(chars);
  }

  public void newLine()
  {
    lines.add(currentLine.toString());
    currentLine = new StringBuilder();
  }

  public void endString(int line, int pos)
  {
    lines.add(currentLine.toString());
    this.endLine = line;
    this.endPos = pos;
    StringBuilder sb = new StringBuilder();
    for(String s : lines)
      sb.append(s);
    super.value = sb.toString();
    lines=null;
  }
}

class CommentBlock extends CMLToken {
  static CommentBlock current;
  private int level;
  StringBuilder content;

  public CommentBlock()
  {
    super("--");
    current=this;
    content=new StringBuilder();
    level = 1;
  }

  public void appendLine(String line)
  {
    this.content.append(line);
  }

  public void increaseLevel()
  {
    level ++;
  }

  public boolean decreaseLevel()
  {
    level--;
    return level == 0;
  }
}


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 1/27/12 3:54 PM from the specification file
 * <tt>cml.lex</tt>
 */
public class CmlLexer implements Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\21\1\40\1\23\2\21\1\35\22\21\1\40\1\53\1\25\1\10"+
    "\2\21\1\53\1\30\1\56\1\55\1\37\1\17\1\41\1\20\1\14"+
    "\1\36\4\31\4\32\2\3\1\52\1\54\1\33\1\51\1\34\2\21"+
    "\4\2\1\15\1\2\16\7\1\6\5\7\1\60\1\4\1\61\1\64"+
    "\1\13\1\11\2\26\1\22\1\2\1\16\1\26\2\7\1\45\1\7"+
    "\1\50\1\7\1\47\1\42\1\43\2\7\1\27\1\46\1\44\1\5"+
    "\1\27\1\7\1\24\2\7\1\62\1\57\1\63\1\12\1\21\200\21"+
    "\ufef1\1\17\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\2\1\1\13\1\14\1\15"+
    "\1\16\1\17\3\2\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\5\0"+
    "\1\34\1\35\1\36\1\37\1\40\2\0\1\41\6\0"+
    "\1\42\1\43\1\44\1\45\1\0\4\2\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\2\54\6\0\1\55\5\0"+
    "\1\56\1\0\1\57\1\60\2\0\1\2\1\0\2\2"+
    "\1\61\1\62\10\0\1\63\2\0\1\64\2\0\1\65"+
    "\20\0\1\66\12\0\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[137];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\65\0\65"+
    "\0\u013e\0\u0173\0\u01a8\0\65\0\u01dd\0\u0212\0\u0247\0\u027c"+
    "\0\u02b1\0\65\0\65\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba"+
    "\0\65\0\65\0\65\0\65\0\65\0\65\0\65\0\65"+
    "\0\65\0\65\0\324\0\u0109\0\u03ef\0\u0424\0\u0459\0\65"+
    "\0\65\0\65\0\u048e\0\65\0\u01dd\0\u04c3\0\65\0\u04f8"+
    "\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\65\0\u0636\0\65"+
    "\0\65\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\65\0\u0774"+
    "\0\u07a9\0\65\0\65\0\65\0\u07de\0\u0813\0\u0813\0\u0848"+
    "\0\u087d\0\u08b2\0\u08e7\0\u091c\0\65\0\u0951\0\u0986\0\u09bb"+
    "\0\u09f0\0\u0a25\0\65\0\u0a5a\0\65\0\65\0\u0a8f\0\u0ac4"+
    "\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\65\0\65\0\u0bcd\0\u0c02"+
    "\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\65\0\u0d75"+
    "\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d"+
    "\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5"+
    "\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce\0\65\0\u1203\0\u1238"+
    "\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0"+
    "\0\65";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[137];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\3\3\1\6\1\7\1\10"+
    "\1\2\1\11\2\3\1\12\1\13\1\2\1\3\1\14"+
    "\1\3\1\15\2\3\1\16\2\4\1\17\1\20\1\14"+
    "\1\21\1\22\1\14\1\23\1\24\2\3\1\25\1\3"+
    "\1\26\1\3\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\66\0\3\3"+
    "\1\43\3\3\1\44\2\0\1\3\1\0\2\3\3\0"+
    "\1\3\1\0\1\3\1\0\5\3\7\0\7\3\17\0"+
    "\1\4\10\0\1\45\2\46\12\0\2\4\37\0\2\47"+
    "\60\0\1\3\2\0\3\3\5\0\2\3\3\0\1\3"+
    "\1\0\1\3\1\0\2\3\12\0\7\3\24\0\1\50"+
    "\73\0\1\51\14\0\1\52\50\0\1\53\13\0\1\54"+
    "\31\0\3\55\1\56\20\55\1\57\37\55\1\0\3\60"+
    "\1\61\60\60\1\0\2\62\1\0\1\63\3\62\1\64"+
    "\4\0\2\62\1\0\1\65\1\0\1\62\1\0\1\62"+
    "\1\0\2\62\4\0\1\66\5\0\7\62\1\67\1\70"+
    "\63\0\1\71\51\0\1\53\1\72\26\0\3\3\1\43"+
    "\3\3\1\44\2\0\1\3\1\0\2\3\3\0\1\3"+
    "\1\0\1\3\1\0\5\3\7\0\1\3\1\73\5\3"+
    "\15\0\3\3\1\43\3\3\1\44\2\0\1\3\1\0"+
    "\2\3\3\0\1\3\1\0\1\3\1\0\5\3\7\0"+
    "\1\74\3\3\1\75\2\3\15\0\3\3\1\43\3\3"+
    "\1\44\2\0\1\3\1\0\2\3\3\0\1\3\1\0"+
    "\1\3\1\0\5\3\7\0\6\3\1\76\50\0\1\77"+
    "\14\0\1\100\33\0\1\101\13\0\1\102\14\0\1\103"+
    "\1\104\15\0\1\105\25\0\2\105\35\0\1\106\13\0"+
    "\2\107\10\0\2\106\34\0\2\110\11\0\2\110\3\0"+
    "\1\110\3\0\1\110\2\0\2\110\32\0\23\53\1\0"+
    "\11\53\1\0\27\53\4\0\1\55\2\111\7\0\1\55"+
    "\3\0\1\112\1\0\1\113\4\55\1\114\10\0\1\55"+
    "\1\0\1\55\50\0\1\115\40\0\1\60\1\116\1\117"+
    "\7\0\1\60\3\0\1\120\1\0\1\121\4\60\1\122"+
    "\10\0\1\60\1\0\1\60\21\0\3\62\1\63\3\62"+
    "\1\64\2\0\1\62\1\0\2\62\3\0\1\62\1\0"+
    "\1\62\1\0\5\62\1\0\1\123\5\0\7\62\21\0"+
    "\2\124\60\0\1\62\2\0\3\62\5\0\2\62\3\0"+
    "\1\62\1\0\1\62\1\0\2\62\12\0\7\62\66\0"+
    "\1\125\46\0\1\126\30\0\37\127\1\130\25\127\1\0"+
    "\3\3\1\43\3\3\1\44\2\0\1\3\1\0\2\3"+
    "\3\0\1\3\1\0\1\3\1\0\5\3\7\0\2\3"+
    "\1\131\4\3\15\0\3\3\1\43\3\3\1\44\2\0"+
    "\1\3\1\0\2\3\3\0\1\3\1\132\1\3\1\0"+
    "\5\3\2\0\1\132\2\0\1\132\1\0\7\3\15\0"+
    "\3\3\1\43\3\3\1\44\2\0\1\133\1\0\2\3"+
    "\3\0\1\3\1\0\1\3\1\0\5\3\7\0\7\3"+
    "\15\0\3\3\1\43\3\3\1\44\2\0\1\134\1\0"+
    "\2\3\3\0\1\3\1\0\1\3\1\0\5\3\7\0"+
    "\7\3\50\0\1\135\64\0\1\136\33\0\1\105\11\0"+
    "\2\46\12\0\2\105\35\0\1\106\25\0\2\106\34\0"+
    "\2\137\11\0\2\137\3\0\1\137\3\0\1\137\2\0"+
    "\2\137\34\0\2\140\11\0\2\140\3\0\1\140\3\0"+
    "\1\140\2\0\2\140\32\0\23\55\1\0\41\55\23\112"+
    "\1\0\41\112\31\0\2\141\34\0\2\142\11\0\2\142"+
    "\3\0\1\142\3\0\1\142\2\0\2\142\34\0\2\143"+
    "\11\0\2\143\3\0\1\143\3\0\1\143\2\0\2\143"+
    "\32\0\23\60\1\0\41\60\23\120\1\0\41\120\31\0"+
    "\2\144\34\0\2\145\11\0\2\145\3\0\1\145\3\0"+
    "\1\145\2\0\2\145\32\0\37\127\1\146\25\127\36\0"+
    "\1\147\1\130\26\0\3\3\1\43\3\3\1\44\2\0"+
    "\1\3\1\0\2\3\3\0\1\3\1\150\1\3\1\0"+
    "\5\3\2\0\1\150\2\0\1\150\1\0\7\3\37\0"+
    "\1\132\11\0\1\132\2\0\1\132\5\0\1\151\17\0"+
    "\2\152\1\3\1\153\3\152\1\154\2\0\1\3\1\0"+
    "\2\152\3\0\1\152\1\0\1\152\1\0\2\152\3\3"+
    "\7\0\7\152\15\0\2\155\1\3\1\156\3\155\1\157"+
    "\2\0\1\3\1\0\2\155\3\0\1\155\1\0\1\155"+
    "\1\0\2\155\3\3\7\0\7\155\16\0\2\160\11\0"+
    "\2\160\3\0\1\160\3\0\1\160\2\0\2\160\34\0"+
    "\2\161\11\0\2\161\3\0\1\161\3\0\1\161\2\0"+
    "\2\161\63\0\2\55\34\0\2\162\11\0\2\162\3\0"+
    "\1\162\3\0\1\162\2\0\2\162\34\0\2\163\11\0"+
    "\2\163\3\0\1\163\3\0\1\163\2\0\2\163\63\0"+
    "\2\60\34\0\2\164\11\0\2\164\3\0\1\164\3\0"+
    "\1\164\2\0\2\164\32\0\36\127\1\147\1\146\25\127"+
    "\23\0\1\150\11\0\1\150\2\0\1\150\4\0\1\165"+
    "\35\0\1\166\47\0\3\152\1\153\3\152\1\154\2\0"+
    "\1\152\1\0\2\152\3\0\1\152\1\0\1\152\1\0"+
    "\5\152\7\0\7\152\21\0\2\167\60\0\1\152\2\0"+
    "\3\152\5\0\2\152\3\0\1\152\1\0\1\152\1\0"+
    "\2\152\12\0\7\152\15\0\3\155\1\156\3\155\1\157"+
    "\2\0\1\155\1\0\2\155\3\0\1\155\1\0\1\155"+
    "\1\0\5\155\7\0\7\155\21\0\2\170\60\0\1\155"+
    "\2\0\3\155\5\0\2\155\3\0\1\155\1\0\1\155"+
    "\1\0\2\155\12\0\7\155\16\0\2\3\11\0\2\3"+
    "\3\0\1\3\3\0\1\3\2\0\2\3\34\0\2\171"+
    "\11\0\2\171\3\0\1\171\3\0\1\171\2\0\2\171"+
    "\34\0\2\172\11\0\2\172\3\0\1\172\3\0\1\172"+
    "\2\0\2\172\34\0\2\173\11\0\2\173\3\0\1\173"+
    "\3\0\1\173\2\0\2\173\34\0\2\174\11\0\2\174"+
    "\3\0\1\174\3\0\1\174\2\0\2\174\74\0\1\175"+
    "\66\0\1\176\22\0\2\177\11\0\2\177\3\0\1\177"+
    "\3\0\1\177\2\0\2\177\34\0\2\200\11\0\2\200"+
    "\3\0\1\200\3\0\1\200\2\0\2\200\34\0\2\55"+
    "\11\0\2\55\3\0\1\55\3\0\1\55\2\0\2\55"+
    "\34\0\2\201\11\0\2\201\3\0\1\201\3\0\1\201"+
    "\2\0\2\201\34\0\2\60\11\0\2\60\3\0\1\60"+
    "\3\0\1\60\2\0\2\60\34\0\2\62\11\0\2\62"+
    "\3\0\1\62\3\0\1\62\2\0\2\62\55\0\1\202"+
    "\11\0\1\202\2\0\1\202\26\0\2\203\11\0\2\203"+
    "\3\0\1\203\3\0\1\203\2\0\2\203\34\0\2\204"+
    "\11\0\2\204\3\0\1\204\3\0\1\204\2\0\2\204"+
    "\34\0\1\60\2\0\3\60\5\0\2\60\3\0\1\60"+
    "\1\0\1\60\1\0\2\60\1\115\11\0\7\60\37\0"+
    "\1\202\11\0\1\202\2\0\1\202\5\0\1\205\20\0"+
    "\2\206\11\0\2\206\3\0\1\206\3\0\1\206\2\0"+
    "\2\206\34\0\2\207\11\0\2\207\3\0\1\207\3\0"+
    "\1\207\2\0\2\207\50\0\1\210\50\0\2\152\11\0"+
    "\2\152\3\0\1\152\3\0\1\152\2\0\2\152\34\0"+
    "\2\155\11\0\2\155\3\0\1\155\3\0\1\155\2\0"+
    "\2\155\76\0\1\211\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5141];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\2\11\3\1\1\11\5\1\2\11"+
    "\5\1\12\11\5\0\3\11\1\1\1\11\2\0\1\11"+
    "\6\0\1\11\1\1\2\11\1\0\4\1\1\11\2\1"+
    "\3\11\2\1\6\0\1\11\5\0\1\11\1\0\2\11"+
    "\2\0\1\1\1\0\2\1\2\11\10\0\1\11\2\0"+
    "\1\1\2\0\1\1\20\0\1\11\12\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[137];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  
  // placeholder for the reserved word (keyword) table
  static private HashMap<String,Integer> keywords = null;
  
  // initialize the reserved word table as a static constructor
  static {
    keywords = new HashMap<String,Integer>();
    
    keywords.put("abs", CmlParser.ABS);
    //keywords.put("all", CmlParser.ALL);
    //keywords.put("always", CmlParser.ALWAYS);
    keywords.put("and", CmlParser.AND);
    keywords.put("atomic", CmlParser.ATOMIC);
    //keywords.put("async", CmlParser.ASYNC);
    //keywords.put("be", CmlParser.BE);
    keywords.put("bool", CmlParser.TBOOL);
    //keywords.put("by", CmlParser.BY);
    keywords.put("card", CmlParser.CARD);
    keywords.put("cases", CmlParser.CASES);
    keywords.put("char", CmlParser.TCHAR);
    keywords.put("class", CmlParser.CLASS);
    /*
    keywords.put("comp", CmlParser.COMP);
    keywords.put("compose", CmlParser.COMPOSE);
    keywords.put("conc", CmlParser.CONC);
    keywords.put("cycles", CmlParser.CYCLES);
    keywords.put("dcl", CmlParser.DCL);
    keywords.put("def", CmlParser.DEF);
    keywords.put("dinter", CmlParser.DINTER);
    keywords.put("div", CmlParser.ARITHMETIC_INTEGER_DIVISION);
    keywords.put("do", CmlParser.DO);
    keywords.put("dom", CmlParser.DOM);
    keywords.put("dunion", CmlParser.DUNION);
    keywords.put("duration", CmlParser.DURATION);
    keywords.put("elems", CmlParser.ELEMS);
    keywords.put("else", CmlParser.ELSE);
    keywords.put("elseif", CmlParser.ELSEIF);
    */
    keywords.put("end", CmlParser.END);
    /*
    keywords.put("error", CmlParser.ERROR);
    keywords.put("errs", CmlParser.ERRS);
    keywords.put("exists", CmlParser.EXISTS);
    keywords.put("exists1", CmlParser.EXISTS1);
    keywords.put("exit", CmlParser.EXIT);
    keywords.put("ext", CmlParser.EXT);
    keywords.put("false", CmlParser.bool_false);
    keywords.put("floor", CmlParser.FLOOR);
    keywords.put("for", CmlParser.FOR);
    keywords.put("forall", CmlParser.FORALL);
    keywords.put("from", CmlParser.FROM);
    keywords.put("functions", CmlParser.FUNCTIONS);
    keywords.put("hd", CmlParser.HD);
    keywords.put("if", CmlParser.IF);
    keywords.put("in", CmlParser.IN);
    keywords.put("inds", CmlParser.INDS);
    keywords.put("inmap", CmlParser.INMAP);
    keywords.put("instance", CmlParser.INSTANCE);
    keywords.put("int", CmlParser.INT);
    keywords.put("inter", CmlParser.SET_INTERSECTION);
    keywords.put("inv", CmlParser.INV);
    keywords.put("inverse", CmlParser.INVERSE);
    keywords.put("iota", CmlParser.IOTA);
    keywords.put("is", CmlParser.IS);
    keywords.put("is_", CmlParser.IS_);
    keywords.put("isofbaseclass", CmlParser.ISOFBASECLASS);
    keywords.put("isofclass", CmlParser.ISOFCLASS);
    keywords.put("lambda", CmlParser.LAMBDA);
    keywords.put("len", CmlParser.LEN);
    keywords.put("let", CmlParser.LET);
    keywords.put("map", CmlParser.MAP);
    keywords.put("merge", CmlParser.DMERGE);
    keywords.put("mk_", CmlParser.MK_);
    keywords.put("mod", CmlParser.MOD);
    keywords.put("mu", CmlParser.MU);
    keywords.put("munion", CmlParser.MAP_MERGE);
    keywords.put("mutex", CmlParser.MUTEX);
    */
    keywords.put("nat", CmlParser.TNAT);
    keywords.put("nat1", CmlParser.TNAT1);
    /*
    keywords.put("new", CmlParser.NEW);
    keywords.put("nil", CmlParser.NIL);
    keywords.put("not", CmlParser.NOT);
    keywords.put("of", CmlParser.OF);
    keywords.put("operations", CmlParser.OPERATIONS);
    keywords.put("or", CmlParser.OR);
    keywords.put("others", CmlParser.OTHERS);
    keywords.put("per", CmlParser.PER);
    keywords.put("periodic", CmlParser.PERIODIC);
    keywords.put("post", CmlParser.POST);
    keywords.put("power", CmlParser.POWER);
    keywords.put("pre", CmlParser.PRE);
    keywords.put("pre_", CmlParser.PRECONDAPPLY);
    */
    //keywords.put("private", CmlParser.PRIVATE);
    keywords.put("process", CmlParser.PROCESS);
    //keywords.put("protected", CmlParser.PROTECTED);
    keywords.put("psubset", CmlParser.PROPER_SUBSET);
    //keywords.put("public", CmlParser.PUBLIC);
    keywords.put("rat", CmlParser.TRAT);
    keywords.put("rd", CmlParser.VDMRD);
    keywords.put("real", CmlParser.TREAL);
    /*
    keywords.put("rem", CmlParser.REM);
    keywords.put("responsibility", CmlParser.RESPONSIBILITY);
    keywords.put("return", CmlParser.RETURN);
    keywords.put("reverse", CmlParser.REVERSE);
    keywords.put("rng", CmlParser.RNG);
    keywords.put("samebaseclass", CmlParser.SAMEBASECLASS);
    keywords.put("sameclass", CmlParser.SAMECLASS);
    keywords.put("self", CmlParser.SELF);
    keywords.put("seq", CmlParser.SEQ);
    keywords.put("seq1", CmlParser.SEQ1);
    keywords.put("set", CmlParser.SET);
    keywords.put("skip", CmlParser.SKIP);
    keywords.put("specified", CmlParser.SPECIFIED);
    keywords.put("st", CmlParser.ST);
    keywords.put("start", CmlParser.START);
    keywords.put("startlist", CmlParser.STARTLIST);
    keywords.put("static", CmlParser.STATIC);
    keywords.put("subclass", CmlParser.SUBCLASS);
    keywords.put("subset", CmlParser.SUBSET);
    keywords.put("sync", CmlParser.SYNC);
    keywords.put("system", CmlParser.SYSTEM);
    keywords.put("then", CmlParser.THEN);
    keywords.put("thread", CmlParser.THREAD);
    keywords.put("threadid", CmlParser.THREADID);
    keywords.put("time", CmlParser.TIME);
    keywords.put("tixe", CmlParser.TIXE);
    keywords.put("tl", CmlParser.TL);
    keywords.put("to", CmlParser.TO);
    */
    keywords.put("token", CmlParser.TTOKEN);
    /*
    keywords.put("trap", CmlParser.TRAP);
    keywords.put("true", CmlParser.bool_true);
    */
    keywords.put("types", CmlParser.TYPES);
    //keywords.put("undefined", CmlParser.UNDEFINED);
    keywords.put("union", CmlParser.UNION);
    keywords.put("values", CmlParser.VALUES);
    keywords.put("variables", CmlParser.INSTANCEVARS);
    //keywords.put("while", CmlParser.WHILE);
    //keywords.put("with", CmlParser.WITH);
    keywords.put("wr", CmlParser.VDMWR);
    //keywords.put("yet", CmlParser.YET);
    
  }


  private CmlLexeme yylvalue;
  
  public int errors = 0;
public List<ParserError> parseErrors = new Vector<ParserError>();
  
    /**
     * Method to retrieve the beginning position of the last scanned token.
     * @return the position at which the last scanned token starts.  */
  public Position getStartPos () { return yylvalue.getStartPos(); }

    /**
     * Method to retrieve the ending position of the last scanned token.
     * @return the first position beyond the last scanned token.  */
  public Position getEndPos () { return yylvalue.getEndPos(); }

    /**
     * Method to retrieve the semantic value of the last scanned token.
     * @return the semantic value of the last scanned token.  */
  public Object getLVal () { return yylvalue; }
  
    /**
     * Entry point for error reporting.  Emits an error
     * referring to the given location in a user-defined way.
     *
     * @param loc The location of the element to which the
     *                error message is related
     * @param s The string for the error message.  */
  public void yyerror (Location loc, String err) { 
    
    System.err.println("Error : " + err + " at " + loc.begin.toString()); 
    
      String msg = new String(err);
	    if (yylvalue != null) {
	    	CmlLexeme currentToken = (CmlLexeme) yylvalue;
	    	if (currentToken.getValue().length() > 0) {
	    		// add position info iff the scanner found a lexem
	    	    msg += " at (" + currentToken.getStartPos().line + ", " + currentToken.getStartPos().column + ")";
	    		msg += " after reading token \"" + currentToken.getValue() + "\"";
	    		
	    		parseErrors.add(new ParserError(err+" after reading token \"" + currentToken.getValue() + "\"", 
	    		currentToken.getStartPos().line, currentToken.getStartPos().column));
	    	}
	    }
		System.out.println(msg);
		errors++;
    
  }
   

  // ************************************
  // *** AUXILIARY PRIVATE OPERATIONS ***
  // ************************************

  // helper function for checking reserved words and identifiers
  private int checkIdentifier(String id) {
      
      int line = yyline + 1;
      int column = yycolumn;
      String value = yytext();
      
      try {
	  if (keywords.containsKey(id)) {
	      //return new OmlLexem(line, column, new Long(keywords.get(id)), id, IOmlLexem.ILEXEMKEYWORD);
	      //return new CmlLexeme(line, column,IDENTIFIER, id);
	      yylvalue = new CmlLexeme(new Position(line,column),new Position(line,column + value.length()),keywords.get(id),value);
	      return keywords.get(id);
	      
	  } else {
	      //DEBUG String theText = yytext();
	      //DEBUG System.out.print(theText + " = ");
	      //DEBUG for (int idx=0; idx< theText.length(); idx++) System.out.format("%04x ", (int) theText.charAt(idx));
	      //DEBUG System.out.println();
	      //return new OmlLexem(line, column, new Long(LEX_identifier), id, IOmlLexem.ILEXEMIDENTIFIER);
	      //return new CmlLexeme(line, column, IDENTIFIER, id);
	      yylvalue = new CmlLexeme(new Position(line,column),new Position(line,column + value.length()),CmlParser.IDENTIFIER,value);
	      return CmlParser.IDENTIFIER;
	  }
      }
      catch (Exception cge) {
	  cge.printStackTrace();
	  return -1;
      }
  }
  
  // helper function for default token creation
  private int defaultToken()
  {
    return createToken(yytext().charAt(0));
  }
  
  private int createToken(int lex)
  {
    int line = yyline + 1;
    int column = yycolumn;
    String value = yytext();
    try {
      yylvalue = new CmlLexeme(new Position(line,column),new Position(line,column + value.length()),lex,value);
      //return new CmlLexeme(line, column, lex, yytext());
      return lex;
    }
    catch (Exception cge) {
      cge.printStackTrace();
      return -1;
    }
  }
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CmlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CmlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 144) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 33: 
          { return createToken(CmlParser.symbolicLiteral);/*text_lit);*/
          }
        case 56: break;
        case 36: 
          { return createToken(CmlParser.DOMRES/*MAP_DOMAIN_RESTRICT_TO*/);
          }
        case 57: break;
        case 52: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { return createToken(CmlParser.ISUNDER);
          }
        case 58: break;
        case 55: 
          { return createToken(CmlParser.NOTINSET);
          }
        case 59: break;
        case 34: 
          { return createToken(CmlParser.NEQ);
          }
        case 60: break;
        case 50: 
          { return createToken(CmlParser.RNGSUB /*MAP_RANGE_RESTRICT_BY*/);
          }
        case 61: break;
        case 53: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { return createToken(CmlParser.MKUNDER);
          }
        case 62: break;
        case 31: 
          { /*return createToken(CmlParser.COMMENT, OmlLexem.ILEXEMLINECOMMENT);*/
          }
        case 63: break;
        case 17: 
          { return createToken(CmlParser.COLON);
          }
        case 64: break;
        case 24: 
          { return createToken(CmlParser.RSQUARE);
          }
        case 65: break;
        case 40: 
          { return createToken(CmlParser.VDMWHATEVER /*DONTCARE*/);
          }
        case 66: break;
        case 35: 
          { return createToken(CmlParser.LTE);
          }
        case 67: break;
        case 28: 
          { return createToken(CmlParser.DOTHASH);
          }
        case 68: break;
        case 41: 
          { return createToken(CmlParser.RNGRES/*MAP_RANGE_RESTRICT_TO*/);
          }
        case 69: break;
        case 8: 
          { return createToken(CmlParser.PLUS);
          }
        case 70: break;
        case 26: 
          { return createToken(CmlParser.RCURLY);
          }
        case 71: break;
        case 39: 
          { return createToken(CmlParser.DEQUALS /*IS_DEFINED_AS*/);
          }
        case 72: break;
        case 5: 
          { return createToken(CmlParser.BACKTICK);
          }
        case 73: break;
        case 12: 
          { return createToken(CmlParser.GT);
          }
        case 74: break;
        case 9: 
          { return createToken(CmlParser.MINUS);
          }
        case 75: break;
        case 11: 
          { return createToken(CmlParser.LT);
          }
        case 76: break;
        case 49: 
          { return createToken(CmlParser.OPERATIONARROW);
          }
        case 77: break;
        case 20: 
          { return createToken(CmlParser.RPAREN);
          }
        case 78: break;
        case 1: 
          { return defaultToken();
          }
        case 79: break;
        case 2: 
          { return checkIdentifier(yytext());
          }
        case 80: break;
        case 32: 
          { return createToken(CmlParser.VDMPFUNCARROW);
          }
        case 81: break;
        case 4: 
          { return createToken(CmlParser.SETDIFF);
          }
        case 82: break;
        case 48: 
          { return createToken(CmlParser.BIMPLY);
          }
        case 83: break;
        case 47: 
          { return createToken(CmlParser.DOMSUB /*MAP_DOMAIN_RESTRICT_BY*/);
          }
        case 84: break;
        case 45: 
          { return createToken(CmlParser.symbolicLiteral);/*char_lit);*/
          }
        case 85: break;
        case 38: 
          { return createToken(CmlParser.IMPLY);
          }
        case 86: break;
        case 37: 
          { return createToken(CmlParser.GTE);
          }
        case 87: break;
        case 15: 
          { return createToken(CmlParser.COMMA);
          }
        case 88: break;
        case 14: 
          { return createToken(CmlParser.STAR);
          }
        case 89: break;
        case 7: 
          { return createToken(CmlParser.DOT);
          }
        case 90: break;
        case 23: 
          { return createToken(CmlParser.LSQUARE);
          }
        case 91: break;
        case 22: 
          { return createToken(CmlParser.BAR);
          }
        case 92: break;
        case 19: 
          { return createToken(CmlParser.SEMI);
          }
        case 93: break;
        case 3: 
          { return createToken(CmlParser.symbolicLiteral);/*num_lit);*/
          }
        case 94: break;
        case 30: 
          { return createToken(CmlParser.VDMTFUNCARROW);
          }
        case 95: break;
        case 42: 
          { return createToken(CmlParser.ASSIGN);
          }
        case 96: break;
        case 16: 
          { return createToken(CmlParser.EQUALS);
          }
        case 97: break;
        case 29: 
          { return createToken(CmlParser.OVERWRITE /*MODIFY_BY*/);
          }
        case 98: break;
        case 44: 
          { return createToken(CmlParser.symbolicLiteral);/*real_lit);*/
          }
        case 99: break;
        case 27: 
          { return createToken(CmlParser.CONC);
          }
        case 100: break;
        case 51: 
          { /*if (yytext().indexOf('\n') != -1) {
			     					            return createToken(CmlParser.COMMENT, OmlLexem.ILEXEMBLOCKCOMMENT);
  								          } else {
								           return createToken(CmlParser.COMMENT, OmlLexem.ILEXEMLINECOMMENT);
									   }*/
          }
        case 101: break;
        case 25: 
          { return createToken(CmlParser.LCURLY);
          }
        case 102: break;
        case 43: 
          { return createToken(CmlParser.VDMRECORDDEF);
          }
        case 103: break;
        case 13: 
          { return createToken(CmlParser.DIV);
          }
        case 104: break;
        case 10: 
          { /* IGNORE */
          }
        case 105: break;
        case 54: 
          { return createToken(CmlParser.INSET);
          }
        case 106: break;
        case 46: 
          { return createToken(CmlParser.symbolicLiteral);/*quote_lit);*/
          }
        case 107: break;
        case 6: 
          { return createToken(CmlParser.TILDE /*HOOK*/);
          }
        case 108: break;
        case 21: 
          { return createToken(CmlParser.LPAREN);
          }
        case 109: break;
        case 18: 
          { 
          }
        case 110: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return 0;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
