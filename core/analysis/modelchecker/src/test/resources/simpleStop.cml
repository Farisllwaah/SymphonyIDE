types
  MYNAT = nat 
      inv i == i in set {1,...,3}

channels
  a: MYNAT
  c
-- although loop action can have a Stop, the action (loop /_\ c -> Skip) does not deadlock
-- due to the interrupt operator. I have checked this using the animator as well 
process Simple = 
begin
actions
  loop = []i in set {1,2} @  (a.i -> loop [] Skip [] Stop)
@ loop /_\ c -> Skip
end

-- the use of a finite data type in parameters is necessary because it allows all possible 
-- representations for the action sendData (one for each parameter). The above process
-- can be checked normally
process A_SenderTimeOut =
begin
state
data:MYNAT := 0

actions
  mainLoop = ([]i in set {1,2}@ ((sendData(i) /_\ d->Skip);mainLoop)[_ 2 _>d-> mainLoop )
  sendData = i:MYNAT@ (data := i;a!data->Skip)
@ c->(mainLoop /_\c->Skip)
end


-- the expression "card numbersToSend" is not allowed because the use cardinality
-- is not implemented in the visitor. Thus, its translation produces a null reference that 
-- raises the NullPointerException that you see in that boring popup. 
-- Furthermore, the use of numbersToSend as the 
-- set of indexes is not allowed because it is changed dynamically and the visitor 
-- will translate (wrongly) the index []i:numbersToSend.  
-- Is it possible to focus the verification using other processes?
-- At first sight, I cannot see other way to model these indexes statically.   
process A_bug =
begin

state
numbersToSend:set of nat := {1,2}

actions
  loop =  (sendNumber [] ([3 <1]&Skip)) -- it used card numbersToSend instead of 3
  sendNumber =  ([]i in set {1}/*numbersToSend */@  a.i->(numbersToSend := numbersToSend\{i});loop) 
@ loop 
end
