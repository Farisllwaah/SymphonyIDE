values
 N: nat = 2
 V: nat = 2
 M: nat = N*V

types
  Index = nat 
    inv i == i in set {1,...,N}

  Money = nat
    inv m == m in set {0,...,M}
    

channels
  pay, transfer: Index * Index * Money
  accept , reject: Index

    
process Card = val i: Index @
begin
 state 
 	value: nat := 0
 
 operations
    Init: () ==> ()
    Init() == value := V

    Credit: nat ==> ()
    Credit(n) == value := value + n

    Debit: nat ==> ()
    Debit(n) == value := value - n
  
  actions
    Transfer = pay.i?j?n ->
    ( [n > value] & reject!i -> Skip
      []
      [n <= value] & transfer.i.j!n -> accept!i -> Debit(n) )
      
    Receive = transfer?j.i?n -> Credit(n)
    
    Cycle = ( Transfer [] Receive ); Cycle  
@ Cycle

end
