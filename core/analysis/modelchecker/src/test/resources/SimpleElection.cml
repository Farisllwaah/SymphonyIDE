types
  NID = nat
    inv i == i in set {1,...,3}
  ConfData = token
    inv i == i in set {1,...,2}
  ID = nat
    inv i == i in set {1,...,2}

values
  NodeIDs = {1,2,3,4,5,6}

channels
  confs: NID * NID * ConfData
  report: NID * NID * NID

process GreyBox = val i:NID @ begin
  state
    leader: NID
    conf: ConfData
    
  operations
    actUpon (c : ConfData)
    post true
    judge   (c : ConfData)
    post true
    blacklist (k : NID)
    post true
    
  actions
    Confs =  confs.i.leader.conf            -> Confs
          [] confs!leader!i?c               -> actUpon(c); Confs
          [] ([] j in set NodeIDs \ {leader,i} @  confs.j.i?c ->
          		report.i.leader.j -> Confs)

    Lead =  ([] j in set NodeIDs \ {leader} @  confs!j!leader?c -> judge(c) ; Lead)
          [] ([] j in set NodeIDs \ {leader} @  confs.leader.j.conf -> Lead)  
          [] ([] j,k in set NodeIDs \{leader} @ report.j.leader.k -> blacklist(k); Lead)
                                 
  @ if (leader = i) then Lead else Confs  
end

process WhiteBox = val id : ID @ GreyBox(id) 
