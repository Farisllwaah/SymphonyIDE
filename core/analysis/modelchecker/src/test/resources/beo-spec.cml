values
  node_ids : set of nat = {0,...,2} -- the set of node identifiers 

types
  -- NODE_IDs are natural numbers
  NODE_ID = nat 
	inv n == n in set node_ids
  MY_NAT = nat
    inv i == n in set {0,1,2,3,4,5} 	

channels

  leaderClaim : NODE_ID * bool
  on, off : NODE_ID
  init
  
process Spec = 
 begin
 state  

 q_period : nat := 3 
 all_nodes : set of NODE_ID := {0,1,2}
 all_nodes_nat : set of nat := {0,1,2}
 
operations
 
--  unite: set of NODE_ID * set of NODE_ID -> set of NODE_ID
--  unite(s1,s2) == s1 union s2

--  unite: set of NODE_ID * set of NODE_ID ==> set of NODE_ID
--  unite(s1,s2) == return s1 union s2
  
 actions
  
   Alive = alive : set of NODE_ID, t: MY_NAT @ (dcl t_aux : MY_NAT := 0 @ (dcl setAux : set of NODE_ID := {0} @ (dcl setAuxUnion: set of NODE_ID := {0} @
   ((
    ([t > q_period] & Alive(alive,t)) --I have changed Stable(alive,t) by Alive(alive,t) to make it work
    []
    ([t <= q_period] & ( 
      (
       ([] i in set alive @ leaderClaim!i.true -> Alive(alive,t))
       []                
       ([] i in set alive @ (setAux := alive\{i};off!i -> Alive(setAux,0)))
       --;
       []
       ([] i in set (all_nodes\alive) @ (setAuxUnion := alive union {i}; on!i -> Alive(setAuxUnion,0)))
       --
      ) 
     [_1_> 
     (t_aux := t; Alive(alive,t_aux))
     ) 
    )
   )
   ))))
-- leaderClaim.i.true offers a non-deterministic choice between the set of all nodes in alive.  
-- In the case where a node has previously been leader, we know that the model resolves this implementation by favoring the older node. 
-- however, is is worth noting that the specification does not require this solution: it is non-detministic here, and any of the available 
-- cases is a valid implementation. 
  
 @ 
   init -> Alive({},0)  -- begin with no nodes on and no time passed  
 end




