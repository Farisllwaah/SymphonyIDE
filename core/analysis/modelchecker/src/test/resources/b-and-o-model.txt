process P1 =
begin
     actions
     S_rec= mu X @ ((Wait 1; a!1->X) [_ 3 _> X)
    @ (S_rec /_\d ->Skip)
end
 
 
process P2 =
begin
   actions
   R_rec = mu X @ ((Wait 1;a?x->X) [_ 3 _>(X))
  @ (R_rec /_\ d->Skip)
end
 
process SoS = P1[|{a,d}|]P2
 
 
channels
a
b
c
a_b
b_a
 
process Deadlock =
begin
actions
    A_B = A [|{|c|}|]B
    A = mu X @(a->c->X)/_\ b->c->Skip
    B = c->c->Skip
    @A_B
end
 
process DeadlockFree =
begin
actions
    A_B = A [|{|c,a,a_b,b_a|}|]B
    A = mu X @(a->c->X)/_\ b->a_b->Skip []b_a ->Skip
    B = c->c->b_a->Skip /_\a_b->Skip
    @A_B
end
 
process TraceTest =
begin
actions
  trace = a->c->a->c->b->c->Skip --deadlock trace
  trace2 =  a->c->b->c->Skip --  lucky trace
@ trace2
end
 
process deadlocktraceTest = TraceTest [|{|c,a,b|}|]Deadlock
 
process DeadlockFreeTimeOut =
begin
 
operations
 
f:()==>()
f()== Skip
actions
    A_B = A [|{|c,a,a_b,b_a|}|]B
    A = mu X @((a->c->X)[_2 _>a_b->Skip)/_\ b->a_b->Skip []b_a ->Skip
    B = c->c->b_a->Skip /_\a_b->Skip
    @A_B
end