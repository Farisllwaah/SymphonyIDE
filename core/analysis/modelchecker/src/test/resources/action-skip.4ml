//This script is automatically generated. Do not modify it!!!!
//The CSP syntax domain
ï»¿domain CSP_ShallowEmbedding {
    // Types
    primitive Int       ::= (Integer).
    primitive Nat       ::= (Natural).
    primitive Str       ::= (String).
    primitive IR        ::= (Real).
    Types               ::= Int + Nat + IR + Str.   
    // Some relational operators
    primitive EQ        ::= (x : Types, y : Types).
    primitive NEQ       ::= (x : Types, y : Types).
    primitive LT        ::= (x : Types, y : Types).
    primitive GT        ::= (x : Types, y : Types).
    bExps               ::= EQ + NEQ + LT + GT.

	//parameters
	NoPar                   ::= { nopar }.
    SPar                    ::= (Types).
    Param                   ::= NoPar + SPar.
    
	//evaluation functions
	BoolE ::= (bExps).
    Eval                ::= (b : bExps).
    Eval(EQ(x, y))      :- BoolE(EQ(x, y)), x = y.
    Eval(NEQ(x, y))     :- BoolE(NEQ(x, y)), x != y.
    Eval(LT(Nat(x), Nat(y)))      :- BoolE(LT(Nat(x), Nat(y))), x < y.
    Eval(GT(Nat(x), Nat(y)))      :- BoolE(GT(Nat(x), Nat(y))), x > y.
    NEval                ::= (b : bExps).
    NEval(EQ(x, y))      :- BoolE(EQ(x, y)), x != y.
    NEval(NEQ(x, y))     :- BoolE(NEQ(x, y)), x = y.
    NEval(LT(Nat(x), Nat(y)))      :- BoolE(LT(Nat(x), Nat(y))), x >= y.
    NEval(GT(Nat(x), Nat(y)))      :- BoolE(GT(Nat(x), Nat(y))), x <= y.
}
domain CSP_Syntax extends CSP_ShallowEmbedding{
    primitive Sigma       ::= (name: String).
    SpecialEvents           ::= { tick, tau }.
    SigmaTickTau            ::= Sigma + SpecialEvents.
    Omega                   ::= {omega}.
    BasicProcess            ::= {Stop, Skip}.
    primitive Prefix        ::= (ev : Sigma, proc : CSPProcess).
    primitive iChoice       ::= (lProc : CSPProcess, rProc : CSPProcess).
    primitive eChoice       ::= (lProc : CSPProcess, rProc : CSPProcess).
	primitive bChoice       ::= (cond : bExps, lProc : CSPProcess, rProc : CSPProcess).
    primitive seqC          ::= (lProc : CSPProcess, rProc : CSPProcess).
    primitive proc          ::= (name : String, p: Param).
    primitive hide          ::= (proc : CSPProcess, hideS : String).
    
    CSPProcess              ::= Omega + BasicProcess + Prefix + iChoice + eChoice + bChoice + seqC + proc + hide.
}

//The CSP semantic domain
domain CSP_Semantics extends CSP_Syntax {
    State ::= (p: CSPProcess).
    trans ::= (source: State, ev: SigmaTickTau, target: State).

    State(nS) :- trans(State(iS), ev, State(nS)).
    trans(State(Skip), tick, State(omega)) :- State(Skip).
    trans(State(Prefix(a, P)), a, State(P)) :- State(Prefix(a, P)).
    trans(State(iChoice(P, Q)), tau, State(P)) :- State(iChoice(P, Q)).
    trans(State(iChoice(P, Q)), tau, State(Q)) :- State(iChoice(P, Q)).

    State(P) :- State(eChoice(P, Q)), P != Stop. 
    State(Q) :- State(eChoice(P, Q)), Q != Stop.
    trans(iS, tau, State(eChoice(P, Q_))) :- iS is State(eChoice(P, Q)), trans(State(Q), tau, State(Q_)).
    trans(iS, ev, State(P_)) :- iS is State(eChoice(P, Q)), trans(State(P), ev, State(P_)), ev != tau.
    trans(iS, ev, State(Q_)) :- iS is State(eChoice(P, Q)),trans(State(Q), ev, State(Q_)), ev != tau.
    
	BoolE(bExp) :- State(bChoice(bExp, p, q)).
    trans(State(bChoice(bExp, p, q)), tau, State(p)) :- State(bChoice(bExp, p, q)), Eval(bExp).
    trans(State(bChoice(bExp, p, q)), tau, State(q)) :- State(bChoice(bExp, p, q)), NEval(bExp).

	
    State(P) :- State(seqC(P, Q)).
    trans(iS, ev, State(seqC(P_, Q))) :- iS is State(seqC(P,Q)), trans(State(P), ev, State(P_)), ev!=tick.
    trans(iS, tau, State(Q)) :- iS is State(seqC(P, Q)), trans(State(P), tick, State(P_)).

    // Recursive calls
    State(PBody) :- State(proc(P, pP)), ProcDef(P, pP, PBody). 
    trans(State(proc(P, pP)), tau, State(PBody)) :- State(proc(P, pP)), ProcDef(P, pP, PBody), State(PBody).

    ProcDef             ::= (name:String, pproc: Param, proc:CSPProcess).
    State(p)            :- ProcHasDeadlock(np), ProcDef(np,param,p).

    primitive ProcHasDeadlock ::= (name: String).

    DeadlockFound := ProcHasDeadlock(nP), ProcDef(nP, param, p),  trans(_, _, L), fail trans(L, _, _), fail trans(_, tick, L).
    DeadlockFound := ProcHasDeadlock(nP), ProcDef(nP, param, p),  fail trans(State(p),_,_),fail trans(State(p),tick,_).
    conforms := DeadlockFound.
}


domain StartProcDomain includes CSP_Semantics {
  ProcDef("A",nopar,Skip).
  conforms := CSP_Semantics.conforms.
}

partial model StartProcModel of StartProcDomain{
  ProcHasDeadlock("A")
}