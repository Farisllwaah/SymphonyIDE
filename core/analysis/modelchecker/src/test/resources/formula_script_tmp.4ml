//This script is automatically generated. Do not modify it!!!!
//The CSP syntax domain
ï»¿domain CSP_Syntax {
    primitive Sigma       ::= (name: String).
    SpecialEvents           ::= { tick, tau }.
    SigmaTickTau            ::= Sigma + SpecialEvents.
    Omega                   ::= {omega}.
    BasicProcess            ::= {Stop, Skip}.
    primitive Prefix        ::= (ev : Sigma, proc : CSPProcess).
    primitive iChoice       ::= (lProc : CSPProcess, rProc : CSPProcess).
    primitive eChoice       ::= (lProc : CSPProcess, rProc : CSPProcess).
    primitive seqC          ::= (lProc : CSPProcess, rProc : CSPProcess).
    CSPProcess              ::= Omega + BasicProcess + Prefix + iChoice + eChoice + seqC.
}

//The CSP semantic domain
domain CSP_Semantics extends CSP_Syntax {
    State ::= (p: CSPProcess).
    trans ::= (source: State, ev: SigmaTickTau, target: State).

    State(nS) :- trans(State(iS), ev, State(nS)).
    trans(State(Skip), tick, State(omega)) :- State(Skip).
    trans(State(Prefix(a, P)), a, State(P)) :- State(Prefix(a, P)).
    trans(State(iChoice(P, Q)), tau, State(P)) :- State(iChoice(P, Q)).
    trans(State(iChoice(P, Q)), tau, State(Q)) :- State(iChoice(P, Q)).

    State(P) :- State(eChoice(P, Q)), P != Stop. 
    State(Q) :- State(eChoice(P, Q)), Q != Stop.
    trans(iS, tau, State(eChoice(P, Q_))) :- iS is State(eChoice(P, Q)), trans(State(Q), tau, State(Q_)).
    trans(iS, ev, State(P_)) :- iS is State(eChoice(P, Q)), trans(State(P), ev, State(P_)), ev != tau.
    trans(iS, ev, State(Q_)) :- iS is State(eChoice(P, Q)),trans(State(Q), ev, State(Q_)), ev != tau.
    
    State(P) :- State(seqC(P, Q)).
    trans(iS, ev, State(seqC(P_, Q))) :- iS is State(seqC(P,Q)), trans(State(P), ev, State(P_)), ev!=tick.
    trans(iS, tau, State(Q)) :- iS is State(seqC(P, Q)), trans(State(P), tick, State(P_)).

    ProcDef             ::= (name:String, proc:CSPProcess).
    State(p)            :- ProcHasDeadlock(np), ProcDef(np, p).

    primitive ProcHasDeadlock ::= (name: String).

    DeadlockFound := ProcHasDeadlock(nP), ProcDef(nP, p),  trans(_, _, L), fail trans(L, _, _), fail trans(_, tick, L).
    DeadlockFound := ProcHasDeadlock(nP), ProcDef(nP, p),  fail trans(State(p),_,_),fail trans(State(p),tick,_).
    conforms := DeadlockFound.
}


domain StartProcDomain includes CSP_Semantics {
  ProcDef("P", Prefix(Sigma("a"), Stop)).
  conforms := CSP_Semantics.conforms.
}

partial model StartProcModel of StartProcDomain{
  ProcHasDeadlock("P")
}