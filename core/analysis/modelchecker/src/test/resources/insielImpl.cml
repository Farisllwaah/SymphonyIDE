channels
  control: nat;
  endDiagram: ID;
  endFlow: ID.nat;
  interrupted: ID.ID.nat;

  startActivity_fav: ID;
  endActivity_fav: ID;
  startActivity_rv: ID;
  endActivity_rv: ID;

process ad_internal_Initiate_Rescue_Activation___Fault_1 = Fault_1_id: ID; @ begin
  chansets
    Hidden = {|
      control, 
      endDiagram, 
      endFlow, 
      interrupted
    |}
  actions
    START_ACTIVITY = startActivity_fav.Fault_1_id
      atomic -> ()
    END_DIAGRAM = endDiagram.fav -> Skip
    InterruptibleRegion_1 = mu X @ (control.22 -> interrupted.fav.Fault_1_id.1); X
    InterruptibleRegion_2 = mu X @ (control.25 -> interrupted.fav.Fault_1_id.2); X
    InterruptibleRegions = InterruptibleRegion_1 ||| InterruptibleRegion_2
    CNode_1 = (control!1 -> Skip)
      /\ END_DIAGRAM
    Start_rescue_2 = (dcl end_guard: bool = true @ mu X @
      (
      (control.1 -> Skip)
      (Fault_1.sig?m_id?sender!Fault_1_id?signal:Fault_1_types'Start_rescue_S -> (););
      (control.2 -> Skip); X)
      /\ end_guard & END_DIAGRAM)
    CNode_3 = (control!i:{ 2, 15 } -> control.3 -> CNode_3)
      /\ END_DIAGRAM
    Find_idle_ERUs_4 = (dcl end_guard: bool = true @ mu X @
      (
      (control.3 -> Skip)
      (Call_Centre.op?m_id!Fault_1_id!Target!mk_Call_Centre_types'Find_idle_ERUs_I () -> 
      end_guard := false;
      Call_Centre.op?m_id!Fault_1_id!Target!oper: Call_Centre_types'Find_idle_ERUs_O -> (); 
      end_guard := true;);
      (control.4 -> Skip); X)
      /\ end_guard & END_DIAGRAM)
    CNode_5 = (control.4 ->
        if idleERU -> control.5 -> CNode_5
         | no idle ERU -> control.13 -> CNode_5
        end)
      /\ END_DIAGRAM
    Allocate_idle_ERU_6 = (dcl end_guard: bool = true @ mu X @
      (
      (control.5 -> Skip)
      (Call_Centre.op?m_id!Fault_1_id!Target!mk_Call_Centre_types'Allocate_idle_ERU_I () -> 
      end_guard := false;
      Call_Centre.op?m_id!Fault_1_id!Target!oper: Call_Centre_types'Allocate_idle_ERU_O -> (); 
      end_guard := true;);
      (control.6 -> Skip); X)
      /\ end_guard & END_DIAGRAM)
    CNode_7 = (control!i:{ 6, 18 } -> control.7 -> CNode_7)
      /\ END_DIAGRAM
    Send_rescue_info_to_ERU_8 = (dcl end_guard: bool = true @ mu X @
      (
      (control.7 -> Skip)
      (Call_Centre.op?m_id!Fault_1_id!Target!mk_Call_Centre_types'Send_rescue_info_to_ERU_I () -> 
      end_guard := false;
      Call_Centre.op?m_id!Fault_1_id!Target!oper: Call_Centre_types'Send_rescue_info_to_ERU_O -> (); 
      end_guard := true;);
      (control.8 -> Skip); X)
      /\ end_guard & END_DIAGRAM)
    Process_message_9 = (dcl end_guard: bool = true @ mu X @
      (
      (control.8 -> Skip)
      (Radio_System.op?m_id!Fault_1_id!Target!mk_Radio_System_types'Process_message_I () -> 
      end_guard := false;
      Radio_System.op?m_id!Fault_1_id!Target!oper: Radio_System_types'Process_message_O -> (); 
      end_guard := true;);
      (control.9 -> Skip); X)
      /\ end_guard & interrupted.fav.Fault_1_id.1 -> X
      /\ end_guard & END_DIAGRAM)
    Receive_message_RS_10 = (dcl end_guard: bool = true @ mu X @
      (
      (control.9 -> Skip)
      (ERU.op?m_id!Fault_1_id!Target!mk_ERU_types'Receive_message_RS_I () -> end_guard := false;
      ERU.op?m_id!Fault_1_id!Target!oper: ERU_types'Receive_message_RS_O -> (); end_guard := true;);
      (control.10 -> Skip); X)
      /\ end_guard & END_DIAGRAM)
    CNode_11 = (control!i:{ 10, 27 } -> control.11 -> CNode_11)
      /\ END_DIAGRAM
    Service_rescue_12 = (dcl end_guard: bool = true @ mu X @
      (
      (control.11 -> Skip)
      (ControlValue.sig?m_id!Fault_1_id!Target!mk_ControlValue_types'ControlValue_S (Fault_1) -> Skip);
      (control.12 -> Skip); X)
      /\ end_guard & END_DIAGRAM)
    CNode_13 = ((control.12 -> Skip); (endFlow.fav.13) -> Skip [] CNode_13))
      /\ END_DIAGRAM
    CNode_14 = (control.13 ->
        if lower criticality -> control.14 -> CNode_14
         | higher criticality -> control.16 -> CNode_14
        end)
      /\ END_DIAGRAM
    Wait_15 = (dcl end_guard: bool = true @ mu X @
      (
      (control.14 -> Skip)
      (Call_Centre.op?m_id!Fault_1_id!Target!mk_Call_Centre_types'Wait_I () -> 
      end_guard := false;
      Call_Centre.op?m_id!Fault_1_id!Target!oper: Call_Centre_types'Wait_O -> (); 
      end_guard := true;);
      (control.15 -> Skip); X)
      /\ end_guard & END_DIAGRAM)
    Divert_ERU_16 = (dcl end_guard: bool = true @ mu X @
      (
      (control.16 -> Skip)
      (Call_Centre.op?m_id!Fault_1_id!Target!mk_Call_Centre_types'Divert_ERU_I () -> 
      end_guard := false;
      Call_Centre.op?m_id!Fault_1_id!Target!oper: Call_Centre_types'Divert_ERU_O -> (); 
      end_guard := true;);
      (control.17 -> Skip); X)
      /\ end_guard & END_DIAGRAM)
    CNode_17 = (control.17 -> (||| i: { 18, 19 } @ control!i -> Skip); CNode_17)
      /\ END_DIAGRAM
    Log_diversion_18 = (dcl end_guard: bool = true @ mu X @
      (
      (control.19 -> Skip)
      (Call_Centre.op?m_id!Fault_1_id!Target!mk_Call_Centre_types'Log_diversion_I () -> 
      end_guard := false;
      Call_Centre.op?m_id!Fault_1_id!Target!oper: Call_Centre_types'Log_diversion_O -> (); 
      end_guard := true;);
      (control.20 -> Skip); X)
      /\ end_guard & END_DIAGRAM)
    Start_rescue_19 = (dcl end_guard: bool = true @ mu X @
      (
      (control.20 -> Skip)
      (ControlValue.sig?m_id!Fault_1_id!Target!mk_ControlValue_types'ControlValue_S (Fault_1) -> Skip);
      (control.21 -> Skip); X)
      /\ end_guard & END_DIAGRAM)
    CNode_20 = ((control.21 -> Skip); (endFlow.fav.20) -> Skip [] CNode_20))
      /\ END_DIAGRAM
    Fault_1_activation_21 = (dcl end_guard: bool = true @ mu X @
      (
      ((control.8 -> Skip);
      Fault_1.sig?m_id?sender!Fault_1_id?signal:Fault_1_types'Fault_1_activation_S -> (););
      (control.22 -> Skip); X)
      /\ end_guard & interrupted.fav.Fault_1_id.1 -> X
      /\ end_guard & END_DIAGRAM)
    Drop_message_22 = (dcl end_guard: bool = true @ mu X @
      (
      (control.22 -> Skip)
      (Radio_System.op?m_id!Fault_1_id!Target!mk_Radio_System_types'Drop_message_I () -> 
      end_guard := false;
      Radio_System.op?m_id!Fault_1_id!Target!oper: Radio_System_types'Drop_message_O -> (); 
      end_guard := true;);
      (control.23 -> Skip); X)
      /\ end_guard & interrupted.fav.Fault_1_id.2 -> X
      /\ end_guard & END_DIAGRAM)
    Target_not_attended_23 = (dcl end_guard: bool = true @ mu X @
      (
      (control.23 -> Skip)
      (ControlValue.sig?m_id!Fault_1_id!Target!mk_ControlValue_types'ControlValue_S (Fault_1) -> Skip);
      (control.24 -> Skip); X)
      /\ end_guard & interrupted.fav.Fault_1_id.2 -> X
      /\ end_guard & END_DIAGRAM)
    CNode_24 = ((control.24 -> Skip); (endFlow.fav.24) -> Skip [] CNode_24))
      /\ END_DIAGRAM
    Error_1_detection_25 = (dcl end_guard: bool = true @ mu X @
      (
      ((control.22 -> Skip);
      Fault_1.sig?m_id?sender!Fault_1_id?signal:Fault_1_types'Error_1_detection_S -> (););
      (control.25 -> Skip); X)
      /\ end_guard & interrupted.fav.Fault_1_id.2 -> X
      /\ end_guard & END_DIAGRAM)
    Start_Recovery_1_26 = (dcl end_guard: bool = true @ mu X @
      (
      (control.25 -> Skip)
      (ControlValue.sig?m_id!Fault_1_id!Target!mk_ControlValue_types'ControlValue_S (Fault_1) -> Skip);
      (control.26 -> Skip); X)
      /\ end_guard & END_DIAGRAM)
    End_Recovery_1_27 = (dcl end_guard: bool = true @ mu X @
      (
      (control.26 -> Skip)
      (Fault_1.sig?m_id?sender!Fault_1_id?signal:Fault_1_types'End_Recovery_1_S -> (););
      (control.27 -> Skip); X)
      /\ end_guard & END_DIAGRAM)
    Nodes =
      || (P, C): { 
        (CNode_1, {| control.1, endDiagram.fav |}), 
        (Start_rescue_2, {| control.1, control.2, endDiagram.fav |}), 
        (CNode_3, {| control.3, control.2, control.15, endDiagram.fav |}), 
        (Find_idle_ERUs_4, {| control.3, control.4, endDiagram.fav |}), 
        (CNode_5, {| control.4, control.5, control.13, endDiagram.fav |}), 
        (Allocate_idle_ERU_6, {| control.5, control.6, endDiagram.fav |}), 
        (CNode_7, {| control.7, control.6, control.18, endDiagram.fav |}), 
        (Send_rescue_info_to_ERU_8, {| control.7, control.8, endDiagram.fav |}), 
        (Process_message_9, {| control.8, control.9, interrupted.fav.Fault_1_id.1, endDiagram.fav |}), 
        (Receive_message_RS_10, {| control.9, control.10, endDiagram.fav |}), 
        (CNode_11, {| control.11, control.10, control.27, endDiagram.fav |}), 
        (Service_rescue_12, {| control.11, control.12, endDiagram.fav |}), 
        (CNode_13, {| control.12, endFlow.fav.13, endDiagram.fav |}), 
        (CNode_14, {| control.13, control.14, control.16, endDiagram.fav |}), 
        (Wait_15, {| control.14, control.15, endDiagram.fav |}), 
        (Divert_ERU_16, {| control.16, control.17, endDiagram.fav |}), 
        (CNode_17, {| control.17, control.18, control.19, endDiagram.fav |}), 
        (Log_diversion_18, {| control.19, control.20, endDiagram.fav |}), 
        (Start_rescue_19, {| control.20, control.21, endDiagram.fav |}), 
        (CNode_20, {| control.21, endFlow.fav.20, endDiagram.fav |}), 
        (Fault_1_activation_21, {| control.22, interrupted.fav.Fault_1_id.1, endDiagram.fav |}), 
        (Drop_message_22, {| control.22, control.23, interrupted.fav.Fault_1_id.2, endDiagram.fav |}), 
        (Target_not_attended_23, {| control.23, control.24, interrupted.fav.Fault_1_id.2, endDiagram.fav |}), 
        (CNode_24, {| control.24, endFlow.fav.24, endDiagram.fav |}), 
        (Error_1_detection_25, {| control.25, interrupted.fav.Fault_1_id.2, endDiagram.fav |}), 
        (Start_Recovery_1_26, {| control.25, control.26, endDiagram.fav |}), 
        (End_Recovery_1_27, {| control.26, control.27, endDiagram.fav |})
       } @ [C] P
    END_ACTIVITY =
      (endFlow.fav.13 -> Skip 
       ||| endFlow.fav.20 -> Skip 
       ||| endFlow.fav.24 -> Skip); END_DIAGRAM
    @ mu X @ (dcl  @
    START_ACTIVITY; 
    ((Nodes 
      [| {| endFlow.fav.13, 
            endFlow.fav.20, 
            endFlow.fav.24 |} |] END_ACTIVITY) 
            [| interrupted.fav.Fault_1_id.1, 
               control.22, interrupted.fav.Fault_1_id.2, control.25 |] 
            InterruptibleRegions);
      endActivity_fav.Fault_1_id); X \ Hidden
end

process ad_Initiate_Rescue_Activation___Fault_1 = Fault_1_id: ID; @
  ad_internal_Initiate_Rescue_Activation___Fault_1(Fault_1_id)
  
process ad_internal_Recovery_1 = Fault_1_id: ID; @ begin
  chansets
    Hidden = {|
      control, 
      endDiagram, 
      endFlow, 
      interrupted
    |}
  actions
    START_ACTIVITY = startActivity_rv.Fault_1_id
      atomic -> ()
    END_DIAGRAM = endDiagram.rv -> Skip
    CNode_1 = (control!1 -> Skip)
      /\ END_DIAGRAM
    Start_Recovery_1_2 = (dcl end_guard: bool = true @ mu X @
      (
      (control.1 -> Skip)
      (Fault_1.sig?m_id?sender!Fault_1_id?signal:Fault_1_types'Start_Recovery_1_S -> (););
      (control.2 -> Skip); X)
      /\ end_guard & END_DIAGRAM)
    Log_fault_1_3 = (dcl end_guard: bool = true @ mu X @
      (
      (control.2 -> Skip)
      (Call_Centre.op?m_id!Fault_1_id!Target!mk_Call_Centre_types'Log_fault_1_I () -> 
      end_guard := false;
      Call_Centre.op?m_id!Fault_1_id!Target!oper: Call_Centre_types'Log_fault_1_O -> (); 
      end_guard := true;);
      (control.3 -> Skip); X)
      /\ end_guard & END_DIAGRAM)
    Resend_rescue_info_to_ERU_4 = (dcl end_guard: bool = true @ mu X @
      (
      (control.3 -> Skip)
      (Call_Centre.op?m_id!Fault_1_id!Target!mk_Call_Centre_types'Resend_rescue_info_to_ERU_I () -> 
      end_guard := false;
      Call_Centre.op?m_id!Fault_1_id!Target!oper: Call_Centre_types'Resend_rescue_info_to_ERU_O -> (); 
      end_guard := true;);
      (control.4 -> Skip); X)
      /\ end_guard & END_DIAGRAM)
    Process_message_5 = (dcl end_guard: bool = true @ mu X @
      (
      (control.4 -> Skip)
      (Mobile_Phone_System.op?m_id!Fault_1_id!Target!mk_Mobile_Phone_System_types'Process_message_I () -> 
      end_guard := false;
      Mobile_Phone_System.op?m_id!Fault_1_id!Target!oper: Mobile_Phone_System_types'Process_message_O -> (); 
      end_guard := true;);
      (control.5 -> Skip); X)
      /\ end_guard & END_DIAGRAM)
    Receive_message_MPS_6 = (dcl end_guard: bool = true @ mu X @
      (
      (control.5 -> Skip)
      (ERU.op?m_id!Fault_1_id!Target!mk_ERU_types'Receive_message_MPS_I () -> 
      end_guard := false;
      ERU.op?m_id!Fault_1_id!Target!oper: ERU_types'Receive_message_MPS_O -> (); 
      end_guard := true;);
      (control.6 -> Skip); X)
      /\ end_guard & END_DIAGRAM)
    End_Recovery_1_7 = (dcl end_guard: bool = true @ mu X @
      (
      (control.6 -> Skip)
      (ControlValue.sig?m_id!Fault_1_id!Target!mk_ControlValue_types'ControlValue_S (Fault_1) -> Skip);
      (control.7 -> Skip); X)
      /\ end_guard & END_DIAGRAM)
    Nodes =
      || (P, C): { 
        (CNode_1, {| control.1, endDiagram.rv |}), 
        (Start_Recovery_1_2, {| control.1, control.2, endDiagram.rv |}), 
        (Log_fault_1_3, {| control.2, control.3, endDiagram.rv |}), 
        (Resend_rescue_info_to_ERU_4, {| control.3, control.4, endDiagram.rv |}), 
        (Process_message_5, {| control.4, control.5, endDiagram.rv |}), 
        (Receive_message_MPS_6, {| control.5, control.6, endDiagram.rv |}), 
        (End_Recovery_1_7, {| control.6, control.7, endDiagram.rv |})
       } @ [C] P
    END_ACTIVITY =
      (control.7 -> Skip); END_DIAGRAM
    @ mu X @ (dcl  @
    START_ACTIVITY; ((Nodes [| {| control.7 |} |] END_ACTIVITY));
      endActivity_rv.Fault_1_id); X \ Hidden
end
process ad_Recovery_1 = Fault_1_id: ID; @
  ad_internal_Recovery_1(Fault_1_id)

process Fault_1_ads = Fault_1_id : ID @
  || (P, C): { 
    (ad_Initiate_Rescue_Activation___Fault_1 (Fault_1_id), 
      {| startActivity_fav, endActivity_fav |}), 
    (ad_Recovery_1 (Fault_1_id), {| startActivity_rv, endActivity_rv |})
   } @ [C] P

