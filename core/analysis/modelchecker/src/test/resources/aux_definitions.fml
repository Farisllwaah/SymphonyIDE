    //Types
    VOID                    ::= {void}.
    primitive Seq           ::= (v:SeqType).
    EmptySeq                ::= { emptySeq }.
    primitive NonEmptySeq   ::= ( first: Type, rest: SeqType ).
    SeqType                 ::= EmptySeq + NonEmptySeq.
    DerivableSeq            ::= (SeqType).     
	
    primitive Set           ::= (SetType).   
    EmptySet                ::= {emptySet}.     
    NonEmptySet   			::= (head:Type,tail:SetType).     
    SetType                 ::= EmptySet + NonEmptySet.  //This captures the notion of any set contains the empty set
    DerivableSet            ::= (SetType). 

	//Operations and rules over sets
    NonEmptySet(y, emptySet), NonEmptySet(x, S) :- NonEmptySet(y, NonEmptySet(x, S)).
    
    // Membership: x \in S => member(x, S). x \lnot\in S \defs fail member(x, S).
    member                      ::= (elem: Type, set: SetType).
    member(x, NonEmptySet(x, S)) :- NonEmptySet(x, S). 
    member(x, NonEmptySet(y, S)) :- NonEmptySet(y, S), x != y, member(x, S). // It needs a T(_), an aSet(y, S) and a (recursive) member(x, S) to work.

    // union: X \cup Y = Z => union(X, Y, Z)
    union                       ::= (setX: SetType, setY: SetType, setZ: SetType).
    union(emptySet, emptySet, emptySet).
    union(emptySet, Sy, Sy)        :- Sy is NonEmptySet(_, _).
    union(Sx, emptySet, Sx)        :- Sx is NonEmptySet(_, _).
    union(NonEmptySet(x, S), NonEmptySet(y, emptySet), X) :- NonEmptySet(x, S), NonEmptySet(y, emptySet), y = x, X = NonEmptySet(x, S).
    union(NonEmptySet(x, S), NonEmptySet(y, emptySet), X) :- NonEmptySet(x, S), NonEmptySet(y, emptySet), y < x, X = NonEmptySet(y, NonEmptySet(x, S)), fail member(y, S).
    union(NonEmptySet(x, S), NonEmptySet(y, emptySet), X) :- NonEmptySet(x, S), NonEmptySet(y, emptySet), x < y, union(S, NonEmptySet(y, emptySet), X_), X = NonEmptySet(x, X_).
    union(S, NonEmptySet(x, T), X_)    :- T != emptySet, NonEmptySet(x, T), union(S, NonEmptySet(x, emptySet), X), union(X, T, X_).

	// intersection: X \cap Y = Z => inter(X, Y, Z)
    inter                       ::= (setX: SetType, setY: SetType, setZ: SetType).
    inter(emptySet, Sy, emptySet) :- Sy is NonEmptySet(_, _).
    inter(Sy, emptySet, emptySet) :- Sy is NonEmptySet(_, _).
    inter(NonEmptySet(x, S), NonEmptySet(x, emptySet), NonEmptySet(x, emptySet)) :- NonEmptySet(x, S), NonEmptySet(x, emptySet).
    inter(NonEmptySet(x, emptySet), NonEmptySet(x, S), NonEmptySet(x, emptySet)) :- NonEmptySet(x, S), NonEmptySet(x, emptySet).
    inter(NonEmptySet(x, emptySet), NonEmptySet(y, emptySet), emptySet) :- NonEmptySet(x, emptySet), NonEmptySet(y, emptySet), x != y.
    inter(NonEmptySet(x, S), NonEmptySet(y, emptySet), X) :- S != emptySet, NonEmptySet(x, S), NonEmptySet(y, emptySet), inter(NonEmptySet(x, emptySet), NonEmptySet(y, emptySet), X1), inter(S, NonEmptySet(y, emptySet), X2), union(X1, X2, X).
    inter(S, NonEmptySet(x, T), X)     :- S != emptySet, T != emptySet, NonEmptySet(x, T), inter(S, NonEmptySet(x, emptySet), X1), inter(S, T, X2), union(X1, X2, X).

    // set difference: X \minus Y = Z => diff(X, Y, Z)
    diff                       ::= (setX: SetType, setY: SetType, setZ: SetType).
    diff(emptySet, emptySet, emptySet).
    diff(emptySet, Sy, emptySet)     :- Sy is NonEmptySet(_, _).
    diff(Sx, emptySet, Sx)     :- Sx is NonEmptySet(_, _).
    diff(NonEmptySet(x, S), NonEmptySet(x, emptySet), S) :- NonEmptySet(x, S), NonEmptySet(x, emptySet).
    diff(NonEmptySet(x, S), NonEmptySet(y, emptySet), NonEmptySet(x, X)) :- NonEmptySet(x, S), NonEmptySet(y, emptySet), x != y, diff(S, NonEmptySet(y, emptySet), X).
    diff(S, NonEmptySet(x, T), X)     :- S != emptySet, T != emptySet, NonEmptySet(x, T), diff(S, NonEmptySet(x, emptySet), X1), diff(S, T, X2), inter(X1, X2, X).

	
	//Operations and rules over sequences
    primitive SeqBound	::= (Natural).
    card	::= (seqX: SeqType, c: Natural).
    card(emptySeq, 0).
    card(NonEmptySeq(x, S), n_) :- NonEmptySeq(x, S), card(S, n), n_ = n + 1, n_ <= L, SeqBound(L).

    // The head of a sequence
    head	::= (seqX: SeqType, h: Type).
    head(NonEmptySeq(x, S), x) :- NonEmptySeq(x, S).

    // The tail of a sequence
    tail	::= (seqX: SeqType, seqT: SeqType).
    tail(NonEmptySeq(x, S), S) :- NonEmptySeq(x, S).

    // Sequence concatenation
    conc	::= (seqX: SeqType, seqR: SeqType, seqT: SeqType, c: Natural).
    conc(emptySeq, NonEmptySeq(x, S), NonEmptySeq(x, S), n) :- NonEmptySeq(x, S), card(NonEmptySeq(x, S), n), n <= L, SeqBound(L).
    conc(NonEmptySeq(x, S), emptySeq, NonEmptySeq(x, S), n) :- NonEmptySeq(x, S), card(NonEmptySeq(x, S), n), n <= L, SeqBound(L).

	
	//A representation for product type
	primitive ProdType ::= (first: Type, second: Type).
	 
	// User defined types
	//USER_DEF_TYPES
	
	Type ::= VOID + Boolean + Integer + Natural + String + Real + SeqType + SetType + ProdType /*INCLUDE USER_DEF_TYPES*/.

	//wrappers for all types. They will be used to instantiate data (from inifnite sets) used in channels. 
	primitive IntegerW ::= (Integer).
	primitive NaturalW ::= (Natural).
	primitive RealW ::= (Real).
	primitive BooleanW ::= (Boolean).
	primitive StringW ::= (String).
	
	//Wrappers for user defined types
	//WRAPPERS_USER_DEF_TYPES
	
	// Bindings 
    NullBind            ::= {nBind}. 
	primitive SingleBind ::= (name: String, val:Type).               
	primitive BBinding    ::= (b: SingleBind, rest: Binding). 
	Binding       ::= NullBind + BBinding.

	// Operations over bindings. 
	primitive fetch ::= (vName: String, bind: Binding, val:Type).
	upd   ::= (bOld: Binding, b: SingleBind, bNew: Binding).
	primitive del   ::= (bOld: Binding, vName: String, bNew: Binding).
    
    merge   ::= (st1: Binding, lVars: SetType, st2: Binding, rVars: SetType, stF: Binding).
    merge(bindL,setL,bindR,setR,bindRes) :-	filter(bindL, setL, bindRes1), 
									        filter(bindR, setR, bindRes2),
									        unionB(bindRes1, bindRes2, bindRes).
									
    filter  ::= (b: Binding, vars: SetType, st2: Binding).
    filter(bind,set,bindR)	:-	bind is BBinding(SingleBind(vN,vVal),_),
							    set is NonEmptySet(vN,emptySet),
							    bindR = BBinding(SingleBind(vN,vVal),nBind).
									
    filter(bind, set, nBind) :-	bind is BBinding(SingleBind(vN, vVal), restB),
							    set is NonEmptySet(vN_, emptySet), vN != vN_.
									
    filter(bind, set, bindR) :-	set = NonEmptySet(vN, restS),
							    filter(bind, NonEmptySet(vN, emptySet), bind1),
							    filter(bind, restS, bind2),
							    unionB(bind1, bind2, bindR).

    unionB  ::= (bindX:Binding, bindY: Binding, bindZ:Binding).
    unionB(nBind,nBind,nBind).
    unionB(nBind,Sy,Sy) :- Sy is BBinding(_,_) ; Sy = nBind.
    unionB(Sx,nBind,Sx) :- Sx is BBinding(_,_) ; Sx = nBind.
    unionB(BBinding(SingleBind(varX,valX),S),BBinding(SingleBind(varY,valY),nBind),BBinding(SingleBind(varX,valX),S_)) :-  
      	    BBinding(SingleBind(varX,valX),S_), varX != varY,
      	    unionB(S,BBinding(SingleBind(varY,valY),nBind),S_).
    unionB(BBinding(SingleBind(varX,valX),S),BBinding(SingleBind(varY,valX),nBind),BBinding(SingleBind(varX,valX),S_)) :-  
      	BBinding(SingleBind(varX,valX),S_), varX = varY, S_=S.

	//Guard evaluation to handle boolean expression evaluation
	guardDef      ::= (id: Natural, st: Binding).
    guardNDef     ::= (id: Natural, st: Binding).
