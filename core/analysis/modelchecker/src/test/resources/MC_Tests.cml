
channels
a:nat
c
d

process A =
begin

state

actions
  loop = n:set of nat@ (sendNumber (n) [] ([card n <1]&Skip)) 
  sendNumber = n:set of nat@  ([]i in set n @  a.i->loop(n\{i}))
@ loop ({1,2,3}) 
end
-- the process loop({1,2,3}) is
-- sendNumber({1,2,3}) [] Stop. But sendNumber({1,2,3}) is equivalent to 
-- []i:{1,2,3} @ a.i -> loop(n\{i})
-- []i:{1,2,3} @ a.i -> nTemp := {1,2,3}\{i}; loop(nTemp) 


process B =
begin
actions
  loop = ([]i in set {1}@ (c-> a.i->loop [] [i = 1]&Skip)) //must skip since if can only choose the number 1 from the set
@ loop 
end



process A_bug =
begin

state
numbersToSend:set of nat := {1,2}

actions
  loop =  (sendNumber [] ([card numbersToSend <1]&Skip)) 
  sendNumber =  ([]i in set {1}/*numbersToSend */@  a.i->(numbersToSend := numbersToSend\{i});loop) 
@ loop 
end

process A_SenderTimeOut =
begin
state
data:nat := 0
actions
  mainLoop = ([]i in set {1,2}@ ((sendData(i)/_\d->Skip);mainLoop)[_ 2 _>d-> mainLoop )
  sendData = i:nat@ (data := i;a!data->Skip)
@ c->(mainLoop /_\c->Skip)
end
