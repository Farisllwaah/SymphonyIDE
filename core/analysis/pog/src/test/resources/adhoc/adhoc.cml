
values
  n: nat1 = 2													-- R1, Properties 
  ownerset: set of nat1 = {1,...,n}  							-- R1 

types
  OwnerLoc = <InCar> | <Near> | <Far>			       			-- R2a,b,c,  
         
  Car :: engine: <On> | <Off>									-- R3a,b 
         motion: <Moving> | <Stopped>							-- R4a,b
         door: <UnlockedClosed> | <LockedClosed> | <Open>	-- R5a,b,c

  KCard :: holder: OwnerId 										-- A3, R9c
           location: <InCar> | <Near> | <Far>					-- R6a,b,A4

  OwnerId = nat1
  inv o == o in set ownerset

channels
  init
  approach, goaway, getin, getout : OwnerId

process CarKey =
begin

functions

  PreApproach: map OwnerId to OwnerLoc * OwnerId -> bool
  PreApproach(m,i) ==
    i in set dom m and m(i) = <Far>
    
  PreGoAway: map OwnerId to OwnerLoc * OwnerId -> bool
  PreGoAway(m,i) ==
    i in set dom m and m(i) = <Near>
    
  PreGetIn: map OwnerId to OwnerLoc * Car * OwnerId -> bool
  PreGetIn(m,c,i) ==    
    m(i) = <Near> and
    c.door = <Open> and
    c.motion <> <Moving>
    
  PreGetOut: map OwnerId to OwnerLoc * Car * OwnerId -> bool
  PreGetOut(m,c,i) ==    
    m(i) = <InCar> and
    c.door = <Open> and
    c.motion <> <Moving>

state  
  owners: map OwnerId to OwnerLoc
  car: Car
  key: KCard													 
inv dom owners = ownerset

operations

Init: () ==> ()
Init() == (
  owners := {i |-> <Far> | i in set ownerset};			-- R7a
  car := mk_Car(<Off>, <Stopped>, <LockedClosed>);		-- R7b,e,c
  key := mk_KCard(1,owners(1))							-- R7d
)
-- Operations of owner i

Approach(i:OwnerId)	-- R8a
frame wr owners
pre PreApproach(owners, i)
post owners = owners~ ++ {i |-> <Near>}

GoAway(i:OwnerId) -- R8b
frame wr owners
pre PreGoAway(owners,i)
post owners = owners~ ++ {i |-> <Far>}

GetIn(i:OwnerId) -- R8c 
frame wr owners
      rd car
pre PreGetIn(owners,car,i)
post owners = owners~ ++ {i |-> <InCar>}

GetOut(i:OwnerId) -- R8d
frame wr owners
      rd car
pre PreGetOut(owners,car,i)
post owners = owners~ ++ {i |-> <Near>}	-- Assumed the location goes to <Near> when
										-- owner gets out of car

-- Operations of the Key Card -- R9 

-- R9 a,b read as though they are invariants, but this contradicts the opening line of R9. 

-- R9a 
CardInCar()
frame rd owners 
      wr key  
pre owners(key.holder) = <InCar> 			 
post key = mk_KCard(key~.holder, <InCar>)

-- A4
CardNearCar()
frame rd owners 
      wr key   
pre owners(key.holder) = <Near> 			 
post key = mk_KCard(key~.holder, <Near>)

-- R9b 
CardFar()
frame rd owners 
    wr key   
pre owners(key.holder) = <Far> 			 
post key = mk_KCard(key~.holder, <Far>)

-- R9c 
CardPass(i:OwnerId)
frame rd owners
    wr key
pre (key.location = <Far> and owners(i) = <Far>) or  
    (key.location = <InCar> and owners(i) = <InCar>) 
post key = mk_KCard(i,owners(i))

-- R10a 
CarUnlockOpenFromOutside()
frame rd owners
    wr car
    rd key
pre owners(key.holder) = <Near> and 
    car.door = <LockedClosed> and 
    car.motion <> <Moving> 
post car = mk_Car(car~.engine,car~.motion,<Open>)

-- R10b
CarOpenFromOutside()
frame rd owners
    wr car
    rd key
pre owners(key.holder) = <Near> and 
    car.door = <UnlockedClosed> and 
    car.motion <> <Moving> 
post car = mk_Car(car~.engine,car~.motion,<Open>)

-- R10c
-- Note the key appears to play no part in this. 
-- Version 1 - parametric over i
CarOpenFromInside1(i:OwnerId)
frame rd owners
    wr car
pre car.door <> <Open> and 
    owners(i) = <InCar>  
post car = mk_Car(car~.engine,car~.motion,<Open>)

-- Version 2 -- internal choice
CarOpenFromInside2()
frame rd owners
    wr car
pre car.door <> <Open> and 
    <InCar> in set rng owners 			-- exists i in set dom owners & owners(i) = <InCar> 
post car = mk_Car(car~.engine,car~.motion,<Open>)

-- R10d
CarDoorClose()
frame wr car
pre car.door = <Open> 
post car = mk_Car(car~.engine,car~.motion,<UnlockedClosed>)

-- R10e
-- Note the key appears to play no part in this. 
-- Version 1 - paramteric over i
CarLockFromInside1(i:OwnerId) 
frame rd owners
      wr car
pre car.door = <UnlockedClosed> and 	-- or car.door = <Open>? 
    owners(i) = <InCar>
post car = mk_Car(car~.engine,car~.motion,<LockedClosed>)
 
-- Version 2 - internal choice
CarLockFromInside2() 
frame rd owners
      wr car
pre car.door = <UnlockedClosed> and 	-- or car.door = <Open>? 
    <InCar> in set rng owners
post car = mk_Car(car~.engine,car~.motion,<LockedClosed>)

--R10f
CarLockFromOutside()
frame rd owners
      wr car
      rd key
pre car.door = <UnlockedClosed> and		-- or car.door = <Open>?
    owners(key.holder) = <Near>         -- Note no requirement that the key.location is <Near> here. 
post car = mk_Car(car~.engine,car~.motion,<LockedClosed>)

-- Operations on the Engine

-- R11a
EngineOn()
frame rd owners
      wr car
      rd key
pre owners(key.holder) = <InCar> and 
    key.location = <InCar> and 
    car.engine = <Off> 
post car = mk_Car(<On>,car~.motion,car~.door)

-- R11b
-- Assumed that "changed to driving" means "changed to moving" 
CarMoving()
frame rd owners
      wr car
pre car.engine = <On> and 
    <InCar> in set rng owners and 
    car.motion <> <Moving> 
post car = mk_Car(car~.engine,<Moving>,car~.door) 

-- R11c
CarStop()
frame rd owners
      wr car 
pre car.engine = <On> and
    car.motion = <Moving> and 
    <InCar> in set rng owners
post car = mk_Car(car~.engine,<Stopped>,car~.door) 

--R11d 


actions

OwnerOptions = 
  ([] i in set ownerset @
     [PreApproach(owners,i)] & approach.i -> Approach(i))
  []
  ([] i in set ownerset @
     [PreGoAway(owners,i)] & goaway.i -> GoAway(i))
  []
  ([] i in set ownerset @
     [PreGetIn(owners,car,i)] & getin.i -> GetIn(i))
  []
  ([] i in set ownerset @
     [PreGetOut(owners,car,i)] & getout.i -> GetOut(i))

CarOptions = Skip
  
CardOptions = Skip

@ Skip

end
