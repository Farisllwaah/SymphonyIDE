[{"poKind":"type invariant satisfiable","poExp":"(forall u:UID \u0026 (exists u:UID \u0026 ((({(u.server)} inter ((u.gateways) union ((u.agents) union (u.meters)))) \u003d {}) and ((((u.gateways) inter ((u.agents) union (u.meters))) \u003d {}) and (((u.agents) inter (u.meters)) \u003d {})))))"},{"poKind":"type compatibility","poExp":"inv_UID(mk_UID(0, {1, 2}, {3, 4}, {5, 6}))"},{"poKind":"type invariant satisfiable","poExp":"(forall s:Server \u0026 (exists s:Server \u0026 ((s.gateways) subset (uid.gateways))))"},{"poKind":"type invariant satisfiable","poExp":"(forall g:Gateway \u0026 (exists g:Gateway \u0026 ((g.agents) subset (uid.agents))))"},{"poKind":"type invariant satisfiable","poExp":"(forall a:Agent \u0026 (exists a:Agent \u0026 ((a.meters) subset (uid.meters))))"},{"poKind":"type invariant satisfiable","poExp":"(forall mk_Condition(m, o, v):Condition \u0026 (exists mk_Condition(m, o, v):Condition \u0026 (m in set (uid.meters))))"},{"poKind":"type compatibility","poExp":"inv_Server(mk_Server({}))"},{"poKind":"comprehension map injectivity","poExp":"(forall m1, m2 in set {{n |-\u003e []} | n in set (uid.gateways)} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))"},{"poKind":"state invariant","poExp":"((((((dom {n |-\u003e [] | n in set (uid.gateways)}) \u003d (uid.gateways)) and ((dom {n |-\u003e [] | n in set (uid.gateways)}) \u003d (uid.gateways))) and ((dom {n |-\u003e [] | n in set (uid.agents)}) \u003d (uid.agents))) and ((dom {n |-\u003e [] | n in set (uid.agents)}) \u003d (uid.agents))) and ((dom {n |-\u003e [] | n in set (uid.meters)}) \u003d (uid.meters)))"},{"poKind":"state invariant satisfiable","poExp":"(exists time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((dom gateway_meterings) \u003d (uid.gateways)))"},{"poKind":"comprehension map injectivity","poExp":"(forall m1, m2 in set {{n |-\u003e []} | n in set (uid.gateways)} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))"},{"poKind":"state invariant","poExp":"((((((dom {n |-\u003e [] | n in set (uid.gateways)}) \u003d (uid.gateways)) and ((dom {n |-\u003e [] | n in set (uid.gateways)}) \u003d (uid.gateways))) and ((dom {n |-\u003e [] | n in set (uid.agents)}) \u003d (uid.agents))) and ((dom {n |-\u003e [] | n in set (uid.agents)}) \u003d (uid.agents))) and ((dom {n |-\u003e [] | n in set (uid.meters)}) \u003d (uid.meters)))"},{"poKind":"state invariant satisfiable","poExp":"(exists time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((dom gateway_actions) \u003d (uid.gateways)))"},{"poKind":"comprehension map injectivity","poExp":"(forall m1, m2 in set {{n |-\u003e []} | n in set (uid.agents)} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))"},{"poKind":"state invariant","poExp":"((((((dom {n |-\u003e [] | n in set (uid.gateways)}) \u003d (uid.gateways)) and ((dom {n |-\u003e [] | n in set (uid.gateways)}) \u003d (uid.gateways))) and ((dom {n |-\u003e [] | n in set (uid.agents)}) \u003d (uid.agents))) and ((dom {n |-\u003e [] | n in set (uid.agents)}) \u003d (uid.agents))) and ((dom {n |-\u003e [] | n in set (uid.meters)}) \u003d (uid.meters)))"},{"poKind":"state invariant satisfiable","poExp":"(exists time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((dom agent_meterings) \u003d (uid.agents)))"},{"poKind":"comprehension map injectivity","poExp":"(forall m1, m2 in set {{n |-\u003e []} | n in set (uid.agents)} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))"},{"poKind":"state invariant","poExp":"((((((dom {n |-\u003e [] | n in set (uid.gateways)}) \u003d (uid.gateways)) and ((dom {n |-\u003e [] | n in set (uid.gateways)}) \u003d (uid.gateways))) and ((dom {n |-\u003e [] | n in set (uid.agents)}) \u003d (uid.agents))) and ((dom {n |-\u003e [] | n in set (uid.agents)}) \u003d (uid.agents))) and ((dom {n |-\u003e [] | n in set (uid.meters)}) \u003d (uid.meters)))"},{"poKind":"state invariant satisfiable","poExp":"(exists time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((dom agent_actions) \u003d (uid.agents)))"},{"poKind":"comprehension map injectivity","poExp":"(forall m1, m2 in set {{n |-\u003e []} | n in set (uid.meters)} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))"},{"poKind":"state invariant","poExp":"((((((dom {n |-\u003e [] | n in set (uid.gateways)}) \u003d (uid.gateways)) and ((dom {n |-\u003e [] | n in set (uid.gateways)}) \u003d (uid.gateways))) and ((dom {n |-\u003e [] | n in set (uid.agents)}) \u003d (uid.agents))) and ((dom {n |-\u003e [] | n in set (uid.agents)}) \u003d (uid.agents))) and ((dom {n |-\u003e [] | n in set (uid.meters)}) \u003d (uid.meters)))"},{"poKind":"state invariant satisfiable","poExp":"(exists time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((dom meter_actions) \u003d (uid.meters)))"},{"poKind":"state invariant","poExp":"(forall time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((((((dom gateway_meterings) \u003d (uid.gateways)) and ((dom gateway_actions) \u003d (uid.gateways))) and ((dom agent_meterings) \u003d (uid.agents))) and ((dom agent_actions) \u003d (uid.agents))) and ((dom meter_actions) \u003d (uid.meters))))"},{"poKind":"state invariant","poExp":"(forall time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((((((dom gateway_meterings) \u003d (uid.gateways)) and ((dom gateway_actions) \u003d (uid.gateways))) and ((dom agent_meterings) \u003d (uid.agents))) and ((dom agent_actions) \u003d (uid.agents))) and ((dom meter_actions) \u003d (uid.meters))))"},{"poKind":"state invariant","poExp":"(forall time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((((((dom gateway_meterings) \u003d (uid.gateways)) and ((dom gateway_actions) \u003d (uid.gateways))) and ((dom agent_meterings) \u003d (uid.agents))) and ((dom agent_actions) \u003d (uid.agents))) and ((dom meter_actions) \u003d (uid.meters))))"},{"poKind":"enumeration map injectivity","poExp":"(forall time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (forall m1, m2 in set {{1 |-\u003e false}, {2 |-\u003e false}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4))))))"},{"poKind":"type compatibility","poExp":"(forall time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 is_(freezer, Device))"},{"poKind":"type compatibility","poExp":"(forall time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 is_(battery, Device))"},{"poKind":"enumeration map injectivity","poExp":"(forall time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (forall m1, m2 in set {{5 |-\u003e mk_Meter(3, {1 |-\u003e false, 2 |-\u003e false}, freezer)}, {6 |-\u003e mk_Meter(4, {1 |-\u003e false}, battery)}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4))))))"},{"poKind":"state invariant","poExp":"(forall time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((((((dom gateway_meterings) \u003d (uid.gateways)) and ((dom gateway_actions) \u003d (uid.gateways))) and ((dom agent_meterings) \u003d (uid.agents))) and ((dom agent_actions) \u003d (uid.agents))) and ((dom meter_actions) \u003d (uid.meters))))"},{"poKind":"type compatibility","poExp":"(forall time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 inv_Agent(mk_Agent(1, {5})))"},{"poKind":"type compatibility","poExp":"(forall time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 inv_Agent(mk_Agent(2, {6})))"},{"poKind":"enumeration map injectivity","poExp":"(forall time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (forall m1, m2 in set {{3 |-\u003e mk_Agent(1, {5})}, {4 |-\u003e mk_Agent(2, {6})}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4))))))"},{"poKind":"state invariant","poExp":"(forall time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((((((dom gateway_meterings) \u003d (uid.gateways)) and ((dom gateway_actions) \u003d (uid.gateways))) and ((dom agent_meterings) \u003d (uid.agents))) and ((dom agent_actions) \u003d (uid.agents))) and ((dom meter_actions) \u003d (uid.meters))))"},{"poKind":"type compatibility","poExp":"(forall time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 inv_Gateway(mk_Gateway(0, {3})))"},{"poKind":"type compatibility","poExp":"(forall time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 inv_Gateway(mk_Gateway(0, {4})))"},{"poKind":"enumeration map injectivity","poExp":"(forall time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (forall m1, m2 in set {{1 |-\u003e mk_Gateway(0, {3})}, {2 |-\u003e mk_Gateway(0, {4})}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4))))))"},{"poKind":"state invariant","poExp":"(forall time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((((((dom gateway_meterings) \u003d (uid.gateways)) and ((dom gateway_actions) \u003d (uid.gateways))) and ((dom agent_meterings) \u003d (uid.agents))) and ((dom agent_actions) \u003d (uid.agents))) and ((dom meter_actions) \u003d (uid.meters))))"},{"poKind":"type compatibility","poExp":"(forall time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 inv_Server(mk_Server({1, 2})))"},{"poKind":"legal sequence application","poExp":"((n in set (valid_uids \\ {(uid.server)})) \u003d\u003e (((len p) \u003d 4) \u003d\u003e (1 in set (inds p))))"},{"poKind":"legal sequence application","poExp":"((n in set (valid_uids \\ {(uid.server)})) \u003d\u003e (((len p) \u003d 4) \u003d\u003e ((p(1) \u003d n) \u003d\u003e (4 in set (inds p)))))"},{"poKind":"legal sequence application","poExp":"((n in set (valid_uids \\ {(uid.server)})) \u003d\u003e (((len p) \u003d 4) \u003d\u003e ((p(1) \u003d n) \u003d\u003e ((p(4) \u003d (uid.server)) \u003d\u003e (3 in set (inds p))))))"},{"poKind":"legal sequence application","poExp":"((n in set (valid_uids \\ {(uid.server)})) \u003d\u003e (((len p) \u003d 4) \u003d\u003e ((p(1) \u003d n) \u003d\u003e ((p(4) \u003d (uid.server)) \u003d\u003e ((p(3) in set (uid.gateways)) \u003d\u003e (4 in set (inds p)))))))"},{"poKind":"legal map application","poExp":"((n in set (valid_uids \\ {(uid.server)})) \u003d\u003e (((len p) \u003d 4) \u003d\u003e ((p(1) \u003d n) \u003d\u003e ((p(4) \u003d (uid.server)) \u003d\u003e ((p(3) in set (uid.gateways)) \u003d\u003e (p(3) in set (dom {|-\u003e})))))))"},{"poKind":"legal sequence application","poExp":"((n in set (valid_uids \\ {(uid.server)})) \u003d\u003e (((len p) \u003d 4) \u003d\u003e ((p(1) \u003d n) \u003d\u003e ((p(4) \u003d (uid.server)) \u003d\u003e ((p(3) in set (uid.gateways)) \u003d\u003e (3 in set (inds p)))))))"},{"poKind":"legal sequence application","poExp":"((n in set (valid_uids \\ {(uid.server)})) \u003d\u003e (((len p) \u003d 4) \u003d\u003e ((p(1) \u003d n) \u003d\u003e ((p(4) \u003d (uid.server)) \u003d\u003e ((p(3) in set (uid.gateways)) \u003d\u003e ((p(4) \u003d (gateways(p(3)).server)) \u003d\u003e (2 in set (inds p))))))))"},{"poKind":"legal sequence application","poExp":"((n in set (valid_uids \\ {(uid.server)})) \u003d\u003e (((len p) \u003d 4) \u003d\u003e ((p(1) \u003d n) \u003d\u003e ((p(4) \u003d (uid.server)) \u003d\u003e ((p(3) in set (uid.gateways)) \u003d\u003e ((p(4) \u003d (gateways(p(3)).server)) \u003d\u003e ((p(2) in set (uid.agents)) \u003d\u003e (3 in set (inds p)))))))))"},{"poKind":"legal map application","poExp":"((n in set (valid_uids \\ {(uid.server)})) \u003d\u003e (((len p) \u003d 4) \u003d\u003e ((p(1) \u003d n) \u003d\u003e ((p(4) \u003d (uid.server)) \u003d\u003e ((p(3) in set (uid.gateways)) \u003d\u003e ((p(4) \u003d (gateways(p(3)).server)) \u003d\u003e ((p(2) in set (uid.agents)) \u003d\u003e (p(2) in set (dom {3 |-\u003e mk_Agent(1, {5}), 4 |-\u003e mk_Agent(2, {6})})))))))))"},{"poKind":"legal sequence application","poExp":"((n in set (valid_uids \\ {(uid.server)})) \u003d\u003e (((len p) \u003d 4) \u003d\u003e ((p(1) \u003d n) \u003d\u003e ((p(4) \u003d (uid.server)) \u003d\u003e ((p(3) in set (uid.gateways)) \u003d\u003e ((p(4) \u003d (gateways(p(3)).server)) \u003d\u003e ((p(2) in set (uid.agents)) \u003d\u003e (2 in set (inds p)))))))))"},{"poKind":"legal sequence application","poExp":"((n in set (valid_uids \\ {(uid.server)})) \u003d\u003e (((len p) \u003d 4) \u003d\u003e ((p(1) \u003d n) \u003d\u003e ((p(4) \u003d (uid.server)) \u003d\u003e ((p(3) in set (uid.gateways)) \u003d\u003e ((p(4) \u003d (gateways(p(3)).server)) \u003d\u003e ((p(2) in set (uid.agents)) \u003d\u003e ((p(3) \u003d (agents(p(2)).gateway)) \u003d\u003e (1 in set (inds p))))))))))"},{"poKind":"legal sequence application","poExp":"((n in set (valid_uids \\ {(uid.server)})) \u003d\u003e (((len p) \u003d 4) \u003d\u003e ((p(1) \u003d n) \u003d\u003e ((p(4) \u003d (uid.server)) \u003d\u003e ((p(3) in set (uid.gateways)) \u003d\u003e ((p(4) \u003d (gateways(p(3)).server)) \u003d\u003e ((p(2) in set (uid.agents)) \u003d\u003e ((p(3) \u003d (agents(p(2)).gateway)) \u003d\u003e ((p(1) in set (uid.meters)) \u003d\u003e (2 in set (inds p)))))))))))"},{"poKind":"legal map application","poExp":"((n in set (valid_uids \\ {(uid.server)})) \u003d\u003e (((len p) \u003d 4) \u003d\u003e ((p(1) \u003d n) \u003d\u003e ((p(4) \u003d (uid.server)) \u003d\u003e ((p(3) in set (uid.gateways)) \u003d\u003e ((p(4) \u003d (gateways(p(3)).server)) \u003d\u003e ((p(2) in set (uid.agents)) \u003d\u003e ((p(3) \u003d (agents(p(2)).gateway)) \u003d\u003e ((p(1) in set (uid.meters)) \u003d\u003e (p(1) in set (dom meters)))))))))))"},{"poKind":"legal sequence application","poExp":"((n in set (valid_uids \\ {(uid.server)})) \u003d\u003e (((len p) \u003d 4) \u003d\u003e ((p(1) \u003d n) \u003d\u003e ((p(4) \u003d (uid.server)) \u003d\u003e ((p(3) in set (uid.gateways)) \u003d\u003e ((p(4) \u003d (gateways(p(3)).server)) \u003d\u003e ((p(2) in set (uid.agents)) \u003d\u003e ((p(3) \u003d (agents(p(2)).gateway)) \u003d\u003e ((p(1) in set (uid.meters)) \u003d\u003e (1 in set (inds p)))))))))))"},{"poKind":"operation satisfiability","poExp":"(forall n:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((n in set (valid_uids \\ {(uid.server)})) \u003d\u003e (exists time1:nat, freezer2:[Freezer], battery3:[Battery], meters4:map (nat) to (Meter), agents5:map (nat) to (Agent), gateways6:map (nat) to (Gateway), server7:Server, network_messages8:set of (Message), server_actions9:seq of (Action), server_meterings10:set of (Metering), rules11:set of (AgentRule), gateway_meterings12:map (nat) to (seq of (Message)), gateway_actions13:map (nat) to (seq of (Message)), agent_meterings14:map (nat) to (seq of (Message)), agent_actions15:map (nat) to (seq of (Message)), meter_actions16:map (nat) to (seq of (Message)), p:seq of (nat) \u0026 ((((((((len p) \u003d 4) and ((p(1) \u003d n) and ((p(4) \u003d (uid.server)) and ((p(3) in set (uid.gateways)) and ((p(4) \u003d (gateways(p(3)).server)) and ((p(2) in set (uid.agents)) and ((p(3) \u003d (agents(p(2)).gateway)) and ((p(1) in set (uid.meters)) and (p(2) \u003d (meters(p(1)).agent)))))))))) and ((dom gateway_meterings12) \u003d (uid.gateways))) and ((dom gateway_actions13) \u003d (uid.gateways))) and ((dom agent_meterings14) \u003d (uid.agents))) and ((dom agent_actions15) \u003d (uid.agents))) and ((dom meter_actions16) \u003d (uid.meters))))))"},{"poKind":"state invariant","poExp":"(forall m:Message, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((((((dom gateway_meterings) \u003d (uid.gateways)) and ((dom gateway_actions) \u003d (uid.gateways))) and ((dom agent_meterings) \u003d (uid.agents))) and ((dom agent_actions) \u003d (uid.agents))) and ((dom meter_actions) \u003d (uid.meters))))"},{"poKind":"state invariant","poExp":"(forall time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((((((dom gateway_meterings) \u003d (uid.gateways)) and ((dom gateway_actions) \u003d (uid.gateways))) and ((dom agent_meterings) \u003d (uid.agents))) and ((dom agent_actions) \u003d (uid.agents))) and ((dom meter_actions) \u003d (uid.meters))))"},{"poKind":"legal function application","poExp":"(forall time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 pre_chooseM(network_messages))"},{"poKind":"state invariant","poExp":"(forall time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((((((dom gateway_meterings) \u003d (uid.gateways)) and ((dom gateway_actions) \u003d (uid.gateways))) and ((dom agent_meterings) \u003d (uid.agents))) and ((dom agent_actions) \u003d (uid.agents))) and ((dom meter_actions) \u003d (uid.meters))))"},{"poKind":"state invariant","poExp":"(forall time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((((((dom gateway_meterings) \u003d (uid.gateways)) and ((dom gateway_actions) \u003d (uid.gateways))) and ((dom agent_meterings) \u003d (uid.agents))) and ((dom agent_actions) \u003d (uid.agents))) and ((dom meter_actions) \u003d (uid.meters))))"},{"poKind":"non-empty sequence","poExp":"(forall time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (server_actions \u003c\u003e []))"},{"poKind":"state invariant","poExp":"(forall time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((((((dom gateway_meterings) \u003d (uid.gateways)) and ((dom gateway_actions) \u003d (uid.gateways))) and ((dom agent_meterings) \u003d (uid.agents))) and ((dom agent_actions) \u003d (uid.agents))) and ((dom meter_actions) \u003d (uid.meters))))"},{"poKind":"non-empty sequence","poExp":"(forall time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (server_actions \u003c\u003e []))"},{"poKind":"state invariant","poExp":"(forall m:Metering, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((((((dom gateway_meterings) \u003d (uid.gateways)) and ((dom gateway_actions) \u003d (uid.gateways))) and ((dom agent_meterings) \u003d (uid.agents))) and ((dom agent_actions) \u003d (uid.agents))) and ((dom meter_actions) \u003d (uid.meters))))"},{"poKind":"state invariant","poExp":"(forall now:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((((((dom gateway_meterings) \u003d (uid.gateways)) and ((dom gateway_actions) \u003d (uid.gateways))) and ((dom agent_meterings) \u003d (uid.agents))) and ((dom agent_actions) \u003d (uid.agents))) and ((dom meter_actions) \u003d (uid.meters))))"},{"poKind":"state invariant","poExp":"(forall now:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((((((dom gateway_meterings) \u003d (uid.gateways)) and ((dom gateway_actions) \u003d (uid.gateways))) and ((dom agent_meterings) \u003d (uid.agents))) and ((dom agent_actions) \u003d (uid.agents))) and ((dom meter_actions) \u003d (uid.meters))))"},{"poKind":"state invariant","poExp":"(forall gid:nat, m:Message, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((((((dom gateway_meterings) \u003d (uid.gateways)) and ((dom gateway_actions) \u003d (uid.gateways))) and ((dom agent_meterings) \u003d (uid.agents))) and ((dom agent_actions) \u003d (uid.agents))) and ((dom meter_actions) \u003d (uid.meters))))"},{"poKind":"legal map application","poExp":"(forall gid:nat, m:Message, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (gid in set (dom gateway_meterings)))"},{"poKind":"state invariant","poExp":"(forall gid:nat, m:Message, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((((((dom (gateway_meterings ++ {gid |-\u003e (gateway_meterings(gid) ^ [m])})) \u003d (uid.gateways)) and ((dom gateway_actions) \u003d (uid.gateways))) and ((dom agent_meterings) \u003d (uid.agents))) and ((dom agent_actions) \u003d (uid.agents))) and ((dom meter_actions) \u003d (uid.meters))))"},{"poKind":"legal map application","poExp":"(forall gid:nat, m:Message, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (gid in set (dom gateway_actions)))"},{"poKind":"legal map application","poExp":"(forall gid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((gid in set (dom gateway_meterings)) \u003d\u003e (gid in set (dom gateway_meterings))))"},{"poKind":"state invariant","poExp":"(forall gid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((((((dom gateway_meterings) \u003d (uid.gateways)) and ((dom gateway_actions) \u003d (uid.gateways))) and ((dom agent_meterings) \u003d (uid.agents))) and ((dom agent_actions) \u003d (uid.agents))) and ((dom meter_actions) \u003d (uid.meters))))"},{"poKind":"legal map application","poExp":"(forall gid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (gid in set (dom gateway_meterings)))"},{"poKind":"non-empty sequence","poExp":"(forall gid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (gateway_meterings(gid) \u003c\u003e []))"},{"poKind":"state invariant","poExp":"(forall gid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((((((dom gateway_meterings) \u003d (uid.gateways)) and ((dom gateway_actions) \u003d (uid.gateways))) and ((dom agent_meterings) \u003d (uid.agents))) and ((dom agent_actions) \u003d (uid.agents))) and ((dom meter_actions) \u003d (uid.meters))))"},{"poKind":"legal map application","poExp":"(forall gid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (gid in set (dom gateway_meterings)))"},{"poKind":"non-empty sequence","poExp":"(forall gid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (gateway_meterings(gid) \u003c\u003e []))"},{"poKind":"legal map application","poExp":"(forall gid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((gid in set (dom gateway_actions)) \u003d\u003e (gid in set (dom gateway_actions))))"},{"poKind":"state invariant","poExp":"(forall gid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((((((dom gateway_meterings) \u003d (uid.gateways)) and ((dom gateway_actions) \u003d (uid.gateways))) and ((dom agent_meterings) \u003d (uid.agents))) and ((dom agent_actions) \u003d (uid.agents))) and ((dom meter_actions) \u003d (uid.meters))))"},{"poKind":"legal map application","poExp":"(forall gid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (gid in set (dom gateway_actions)))"},{"poKind":"non-empty sequence","poExp":"(forall gid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (gateway_actions(gid) \u003c\u003e []))"},{"poKind":"state invariant","poExp":"(forall gid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((((((dom gateway_meterings) \u003d (uid.gateways)) and ((dom gateway_actions) \u003d (uid.gateways))) and ((dom agent_meterings) \u003d (uid.agents))) and ((dom agent_actions) \u003d (uid.agents))) and ((dom meter_actions) \u003d (uid.meters))))"},{"poKind":"legal map application","poExp":"(forall gid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (gid in set (dom gateway_actions)))"},{"poKind":"non-empty sequence","poExp":"(forall gid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (gateway_actions(gid) \u003c\u003e []))"},{"poKind":"state invariant","poExp":"(forall gid:nat, m:Message, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((((((dom gateway_meterings) \u003d (uid.gateways)) and ((dom gateway_actions) \u003d (uid.gateways))) and ((dom agent_meterings) \u003d (uid.agents))) and ((dom agent_actions) \u003d (uid.agents))) and ((dom meter_actions) \u003d (uid.meters))))"},{"poKind":"legal map application","poExp":"(forall gid:nat, m:Message, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (gid in set (dom agent_meterings)))"},{"poKind":"state invariant","poExp":"(forall gid:nat, m:Message, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((((((dom gateway_meterings) \u003d (uid.gateways)) and ((dom gateway_actions) \u003d (uid.gateways))) and ((dom (agent_meterings ++ {gid |-\u003e (agent_meterings(gid) ^ [m])})) \u003d (uid.agents))) and ((dom agent_actions) \u003d (uid.agents))) and ((dom meter_actions) \u003d (uid.meters))))"},{"poKind":"legal map application","poExp":"(forall gid:nat, m:Message, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (gid in set (dom agent_actions)))"},{"poKind":"legal map application","poExp":"(forall gid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((gid in set (dom agent_meterings)) \u003d\u003e (gid in set (dom agent_meterings))))"},{"poKind":"state invariant","poExp":"(forall gid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((((((dom gateway_meterings) \u003d (uid.gateways)) and ((dom gateway_actions) \u003d (uid.gateways))) and ((dom agent_meterings) \u003d (uid.agents))) and ((dom agent_actions) \u003d (uid.agents))) and ((dom meter_actions) \u003d (uid.meters))))"},{"poKind":"legal map application","poExp":"(forall gid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (gid in set (dom agent_meterings)))"},{"poKind":"non-empty sequence","poExp":"(forall gid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (agent_meterings(gid) \u003c\u003e []))"},{"poKind":"state invariant","poExp":"(forall gid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((((((dom gateway_meterings) \u003d (uid.gateways)) and ((dom gateway_actions) \u003d (uid.gateways))) and ((dom agent_meterings) \u003d (uid.agents))) and ((dom agent_actions) \u003d (uid.agents))) and ((dom meter_actions) \u003d (uid.meters))))"},{"poKind":"legal map application","poExp":"(forall gid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (gid in set (dom agent_meterings)))"},{"poKind":"non-empty sequence","poExp":"(forall gid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (agent_meterings(gid) \u003c\u003e []))"},{"poKind":"legal map application","poExp":"(forall gid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((gid in set (dom agent_actions)) \u003d\u003e (gid in set (dom agent_actions))))"},{"poKind":"state invariant","poExp":"(forall gid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((((((dom gateway_meterings) \u003d (uid.gateways)) and ((dom gateway_actions) \u003d (uid.gateways))) and ((dom agent_meterings) \u003d (uid.agents))) and ((dom agent_actions) \u003d (uid.agents))) and ((dom meter_actions) \u003d (uid.meters))))"},{"poKind":"legal map application","poExp":"(forall gid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (gid in set (dom agent_actions)))"},{"poKind":"non-empty sequence","poExp":"(forall gid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (agent_actions(gid) \u003c\u003e []))"},{"poKind":"state invariant","poExp":"(forall gid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((((((dom gateway_meterings) \u003d (uid.gateways)) and ((dom gateway_actions) \u003d (uid.gateways))) and ((dom agent_meterings) \u003d (uid.agents))) and ((dom agent_actions) \u003d (uid.agents))) and ((dom meter_actions) \u003d (uid.meters))))"},{"poKind":"legal map application","poExp":"(forall gid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (gid in set (dom agent_actions)))"},{"poKind":"non-empty sequence","poExp":"(forall gid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (agent_actions(gid) \u003c\u003e []))"},{"poKind":"state invariant","poExp":"(forall mid:nat, a:Action, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((((((dom gateway_meterings) \u003d (uid.gateways)) and ((dom gateway_actions) \u003d (uid.gateways))) and ((dom agent_meterings) \u003d (uid.agents))) and ((dom agent_actions) \u003d (uid.agents))) and ((dom meter_actions) \u003d (uid.meters))))"},{"poKind":"legal map application","poExp":"(forall mid:nat, a:Action, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (mid in set (dom meters)))"},{"poKind":"legal map application","poExp":"(forall mid:nat, a:Action, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (mid in set (dom meters)))"},{"poKind":"legal map application","poExp":"(forall mid:nat, a:Action, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (mid in set (dom meters)))"},{"poKind":"state invariant","poExp":"(forall mid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 ((((((dom gateway_meterings) \u003d (uid.gateways)) and ((dom gateway_actions) \u003d (uid.gateways))) and ((dom agent_meterings) \u003d (uid.agents))) and ((dom agent_actions) \u003d (uid.agents))) and ((dom meter_actions) \u003d (uid.meters))))"},{"poKind":"legal map application","poExp":"(forall mid:nat, time:nat, freezer:[Freezer], battery:[Battery], meters:map (nat) to (Meter), agents:map (nat) to (Agent), gateways:map (nat) to (Gateway), server:Server, network_messages:set of (Message), server_actions:seq of (Action), server_meterings:set of (Metering), rules:set of (AgentRule), gateway_meterings:map (nat) to (seq of (Message)), gateway_actions:map (nat) to (seq of (Message)), agent_meterings:map (nat) to (seq of (Message)), agent_actions:map (nat) to (seq of (Message)), meter_actions:map (nat) to (seq of (Message)) \u0026 (mid in set (dom meters)))"},{"poKind":"legal function application","poExp":"(forall cs:set of (Condition), m:Metering \u0026 (forall c in set cs \u0026 pre_eval_cond(c, m)))"},{"poKind":"cases exhaustive","poExp":"(forall c:Condition, m:Metering \u0026 (((c.meter) in set (uid.meters)) \u003d\u003e (((m.meter) \u003d (c.meter)) \u003d\u003e (((((((c.op) \u003d \u003cLT\u003e) or ((c.op) \u003d \u003cLE\u003e)) or ((c.op) \u003d \u003cEQ\u003e)) or ((c.op) \u003d \u003cGE\u003e)) or ((c.op) \u003d \u003cGT\u003e)) or ((c.op) \u003d \u003cNE\u003e)))))"},{"poKind":"legal sequence application","poExp":"(forall m:Message \u0026 (exists n:nat \u0026 ((m.pos) in set (inds (m.path)))))"},{"poKind":"function postcondition satisfiable","poExp":"(forall m:Message \u0026 (exists n:nat \u0026 post_mc(m, n)))"},{"poKind":"legal sequence application","poExp":"(forall m:Message \u0026 (exists n:nat \u0026 (0 in set (inds (m.path)))))"},{"poKind":"function postcondition satisfiable","poExp":"(forall m:Message \u0026 (exists n:nat \u0026 post_mo(m, n)))"},{"poKind":"function postcondition satisfiable","poExp":"(forall m:Message \u0026 (exists n:Message \u0026 post_next(m, n)))"},{"poKind":"function postcondition satisfiable","poExp":"(forall c:Contents \u0026 (pre_toMetering(c) \u003d\u003e (exists v:Metering \u0026 post_toMetering(c, v))))"},{"poKind":"function postcondition satisfiable","poExp":"(forall c:Contents \u0026 (pre_toAction(c) \u003d\u003e (exists v:Action \u0026 post_toAction(c, v))))"},{"poKind":"function postcondition satisfiable","poExp":"(forall c:Contents \u0026 (exists b:bool \u0026 post_isMetering(c, b)))"},{"poKind":"function postcondition satisfiable","poExp":"(forall c:Contents \u0026 (exists b:bool \u0026 post_isAction(c, b)))"},{"poKind":"function postcondition satisfiable","poExp":"(forall N:set of (nat) \u0026 (pre_chooseN(N) \u003d\u003e (exists n:nat \u0026 post_chooseN(N, n))))"},{"poKind":"function postcondition satisfiable","poExp":"(forall M:set of (Message) \u0026 (pre_chooseM(M) \u003d\u003e (exists m:Message \u0026 post_chooseM(M, m))))"},{"poKind":"state invariant","poExp":"((min_temp \u003c initial_temp) and (initial_temp \u003c max_temp))"},{"poKind":"state invariant satisfiable","poExp":"(exists hold_curve:seq of (real), leak_rate:real, cool_rate:real, temp:real \u0026 ((min_temp \u003c temp) and (temp \u003c max_temp)))"},{"poKind":"legal map application","poExp":"(forall t:nat, r:map (nat) to (bool), oldself:Freezer \u0026 ((((relay_cool in set (dom r)) and ((relay_hold in set (dom r)) and (not r(relay_cool)))) or (not r(relay_hold))) \u003d\u003e ((relay_cool in set (dom r)) \u003d\u003e ((relay_hold in set (dom r)) \u003d\u003e (relay_cool in set (dom r))))))"},{"poKind":"legal map application","poExp":"(forall t:nat, r:map (nat) to (bool), oldself:Freezer \u0026 ((((relay_cool in set (dom r)) and ((relay_hold in set (dom r)) and (not r(relay_cool)))) or (not r(relay_hold))) \u003d\u003e ((not ((relay_cool in set (dom r)) and ((relay_hold in set (dom r)) and (not r(relay_cool))))) \u003d\u003e (relay_hold in set (dom r)))))"},{"poKind":"legal map application","poExp":"(forall t:nat, r:map (nat) to (bool), oldself:Freezer \u0026 ((((relay_cool in set (dom r)) and ((relay_hold in set (dom r)) and (not r(relay_cool)))) or (not r(relay_hold))) \u003d\u003e (relay_cool in set (dom r))))"},{"poKind":"state invariant","poExp":"(forall t:nat, r:map (nat) to (bool), oldself:Freezer \u0026 ((((relay_cool in set (dom r)) and ((relay_hold in set (dom r)) and (not r(relay_cool)))) or (not r(relay_hold))) \u003d\u003e ((min_temp \u003c temp) and (temp \u003c max_temp))))"},{"poKind":"legal map application","poExp":"(forall t:nat, r:map (nat) to (bool), oldself:Freezer \u0026 ((((relay_cool in set (dom r)) and ((relay_hold in set (dom r)) and (not r(relay_cool)))) or (not r(relay_hold))) \u003d\u003e (relay_hold in set (dom r))))"},{"poKind":"state invariant","poExp":"(forall t:nat, r:map (nat) to (bool), oldself:Freezer \u0026 ((((relay_cool in set (dom r)) and ((relay_hold in set (dom r)) and (not r(relay_cool)))) or (not r(relay_hold))) \u003d\u003e ((min_temp \u003c (temp - ((t - time) * cool_rate))) and ((temp - ((t - time) * cool_rate)) \u003c max_temp))))"},{"poKind":"non-empty sequence","poExp":"(forall t:nat, r:map (nat) to (bool), oldself:Freezer \u0026 ((((relay_cool in set (dom r)) and ((relay_hold in set (dom r)) and (not r(relay_cool)))) or (not r(relay_hold))) \u003d\u003e (hold_curve \u003c\u003e [])))"},{"poKind":"state invariant","poExp":"(forall t:nat, r:map (nat) to (bool), oldself:Freezer \u0026 ((((relay_cool in set (dom r)) and ((relay_hold in set (dom r)) and (not r(relay_cool)))) or (not r(relay_hold))) \u003d\u003e ((min_temp \u003c ((temp - ((t - time) * cool_rate)) + (hd hold_curve))) and (((temp - ((t - time) * cool_rate)) + (hd hold_curve)) \u003c max_temp))))"},{"poKind":"non-empty sequence","poExp":"(forall t:nat, r:map (nat) to (bool), oldself:Freezer \u0026 ((((relay_cool in set (dom r)) and ((relay_hold in set (dom r)) and (not r(relay_cool)))) or (not r(relay_hold))) \u003d\u003e (hold_curve \u003c\u003e [])))"},{"poKind":"non-empty sequence","poExp":"(forall t:nat, r:map (nat) to (bool), oldself:Freezer \u0026 ((((relay_cool in set (dom r)) and ((relay_hold in set (dom r)) and (not r(relay_cool)))) or (not r(relay_hold))) \u003d\u003e (hold_curve \u003c\u003e [])))"},{"poKind":"state invariant","poExp":"(forall t:nat, r:map (nat) to (bool), oldself:Freezer \u0026 ((((relay_cool in set (dom r)) and ((relay_hold in set (dom r)) and (not r(relay_cool)))) or (not r(relay_hold))) \u003d\u003e ((min_temp \u003c ((temp - ((t - time) * cool_rate)) + (hd hold_curve))) and (((temp - ((t - time) * cool_rate)) + (hd hold_curve)) \u003c max_temp))))"},{"poKind":"state invariant","poExp":"(forall x:nat, oldself:Freezer \u0026 ((x \u003e 0) \u003d\u003e ((min_temp \u003c temp) and (temp \u003c max_temp))))"},{"poKind":"legal map application","poExp":"(forall t:nat, r:map (nat) to (bool), oldself:Battery \u0026 ((relay_load in set (dom r)) \u003d\u003e (relay_load in set (dom r))))"}]