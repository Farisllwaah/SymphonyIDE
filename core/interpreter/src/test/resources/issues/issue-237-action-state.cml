/*
	[]
	/\
  S   [] -self
  
     []
	 /\
	S  S
	
--------------------------------------
	[]
	/\
  S   []
  
	[]
	/\
   S   Stop /Skip - termination
*/

/*channels
	a:nat

process Test =
begin

actions
 
  sendNumber =  ([]i in set {1} @  sendNumber;Skip)
  
@ sendNumber 
end*/




channels
a:nat


process Test =
begin

state
numbersToSend:set of nat := {1,2}

operations

op:nat ==>()
op(i)== numbersToSend := numbersToSend\{i}

actions
 //sendNumber =  ([]i in set numbersToSend @  a.i->op(i);loop)
 //sendNumber =  ([]i in set numbersToSend @  a.i->op(i));loop
  sendNumber =  ([]i in set numbersToSend @  a.i->(op(i);loop))//This fails - (op(i));loop)
   loop =  (sendNumber [] ([card numbersToSend =0]&Skip))  
@ //a.1->op(1);loop [] a.2->op(2);loop
loop 
end
