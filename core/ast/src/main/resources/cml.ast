//TODO1: maybe generate classes with the Comparable interface 
Packages
base org.overture.ast.node;
analysis org.overture.ast.analysis;
  
Tokens
/* This section declared tokens as internal types or external classes
 * internal definitions:
 *  plus='+';
 * 
 * external
 *  location = 'java:org.overturetool.vdmj.lex.LexLocation';
 */
  LexToken = 'java:node:org.overturetool.vdmj.lex.LexToken';
  LexNameToken = 'java:node:org.overturetool.vdmj.lex.LexNameToken';
  LexIdentifierToken = 'java:node:org.overturetool.vdmj.lex.LexIdentifierToken';
  LexBooleanToken = 'java:node:org.overturetool.vdmj.lex.LexBooleanToken';
  LexCharacterToken = 'java:node:org.overturetool.vdmj.lex.LexCharacterToken';
  LexIntegerToken = 'java:node:org.overturetool.vdmj.lex.LexIntegerToken';
  LexQuoteToken = 'java:node:org.overturetool.vdmj.lex.LexQuoteToken';
  LexRealToken = 'java:node:org.overturetool.vdmj.lex.LexRealToken';
  LexStringToken = 'java:node:org.overturetool.vdmj.lex.LexStringToken';
  clonableFile ='java:org.overturetool.util.ClonableFile';
  clonableString ='java:org.overturetool.util.ClonableString';
  ClassDefinitionSettings = 'java:enum:org.overturetool.vdmj.typechecker.ClassDefinitionSettings';
  location = 'java:org.overturetool.vdmj.lex.LexLocation';
  nameScope = 'java:enum:org.overturetool.vdmj.typechecker.NameScope';
  
  //Java
  java_Boolean = 'java:java.lang.Boolean';
  java_Integer = 'java:java.lang.Integer';
  java_String = 'java:java.lang.String';
  java_Long = 'java:java.lang.Long';
     
  static = 'static';
  async = 'async';
  
Abstract Syntax Tree
/* This section declares the AST by giving root nodes and their possible sub classes
 *
 * exp {-> package='org.overture.ast.expressions'}
 *      = {subclass1} [field_name]:field_type_must_either_be_root_or_token ...
 *      ;
 *
 */

/*
	Programs
*/

program {-> package='org.overture.ast.program'}
    =  {program} 
       [sourceFiles] : sourcefile* 
       [name]:LexIdentifierToken
       ;

sourcefile {-> package='org.overture.ast.program'}
    = {sourcefile} 
      [file] : clonableFile 
      [name]:java_String 
      [decls]:declaration*
      ;

/*
 Declarations 
*/

declaration {-> package='org.overture.ast.declarations'}
    = {class} [identifier]:LexIdentifierToken [classBody]: definition.classbody
    | {process} [identifier]:LexIdentifierToken [processDefinition]:definition.process
    | {channel} [channelDefinition]:definition.channel
    | {channelName} [declaration]:singleType
    | {chanset} [identifier]:LexIdentifierToken [chansetExpression]:exp.#Set.#Chanset
    | {action} [actionDefinition]:definition.action
    // --- Maybe they should be grouped together in a sub declaration
    | {type} [typeDefinitions]:definition.type*
    | {function} [functionDefinitions]:definition.#function*
    | {value} [definitions]: definition*
    | {operation} [operationDefinitions]:definition.#operation*
    | {state} [stateDefinition]:definition.state
    // ---	
    | {singleType} [identifiers]:LexIdentifierToken* (type):type
;

/*
 Definitions 
*/

definition {-> package='org.overture.ast.definitions'}
    =   {assignment} [expression]:exp (expType):type
    |   {instanceVariable} [expression]:exp (expType):type [initialized]:java_Boolean [oldname]:LexNameToken //this actually inherits assignment in Nicks tree
    |   #class 
    |   {classbody} [declarations]:declaration* 
    |	{process} [declarations]:declaration.singleType* [process]:process
    |   {action} [declarations]:declaration.singleType* [action]:action
    |   {chanset}
    | 	{channel} [channelNameDecls]: declaration.channelName*
    |   {classInvariant}  [expression]:exp
    |   {equals} [pattern]:pattern [typebind]:bind.type [setbind]:bind.set [test]:exp 
                 (expType):type (defType):type [defs]:definition*
    |   #function
    |   {external} (state):definition [readOnly]:java_Boolean (oldname):LexNameToken
	|   #operation    
    |   {imported} (def):definition (name):LexNameToken
    |   {inherited} (superdef):definition [oldname]:LexNameToken //is access missing here
    |   {local} [valueDefinition]:java_Boolean (name):LexNameToken
    |   {multiBindList} (bindings):multipleBind* (defs):definition*
    |   {renamed}  (def):definition 
    |   {state} [fields]:field.field* 
                [invPattern]:pattern [invExpression]:exp (invdef):definition.#function.explicitFunction
                [initPattern]:pattern [initExpression]:exp (initdef):definition.#function.explicitFunction
                (stateDefs):definition* 
    |   {type} (invType):type.#invariant [invPattern]:pattern [invExpression]:exp 
               [invdef]:definition.#function.explicitFunction [infinite]:java_Boolean (name):LexNameToken//is access missing here
    |   {untyped}
    |   {value} [pattern]:pattern [expression]:exp [defs]:definition* (expType):type //is access missing here
    ;
    
    
#operation {-> package='org.overture.ast.definitions'}
	=   {explicitOperation} [parameterPatterns]:pattern* 
                            [body]:stm
                            [precondition]:exp 
                            [postcondition]:exp 
                            
                            (type):type.operation
                            
                            (predef):definition.#function.explicitFunction
                            (postdef):definition.#function.explicitFunction
                            (paramDefinitions):definition*
                            (state):definition.state
                            
                            (actualResult):type
                            [isConstructor]:java_Boolean
                            
    |   {implicitOperation} [parameterPatterns]:pair.patternListType*
                            [result]:pair.identifierType*
                            //[body]:stm
                            [externals]:clause.external*
                            [precondition]:exp 
                            [postcondition]:exp
                            [errors]:case.error*
                            
                            (type):type.operation
                            (predef):definition.#function.explicitFunction
                            (postdef):definition.#function.explicitFunction
                            (state):definition.state
                            (actualResult):type
                            (stateDefinition):definition
                            [isConstructor]:java_Boolean    
    ;
    
#function {-> package='org.overture.ast.definitions'}
    =  {explicitFunction}  [typeParams]:LexNameToken* 
                            [paramPatternList]:pattern**
                            (type):type.function 
                            (body):exp 
                            [precondition]:exp 
                            [postcondition]:exp
                            [measure]:LexNameToken
                            
                            (predef):explicitFunction 
                            (postdef):explicitFunction
                            (measureDef):definition
                            (paramDefinitionList):definition*
                            
                            (recursive):java_Boolean
                            (isUndefined):java_Boolean
                            (measureLexical):java_Integer
                            
                            (expectedResult):type
                            (actualResult):type
                            
                            (isTypeInvariant):java_Boolean
                            (isCurried):java_Boolean 
                            
                            (typeInvariant):java_Boolean
                            //[poluFuncs]:???Map<TypeList, FunctionValue>
	|   {implicitFunction}  [typeParams]:LexNameToken* 
                            [paramPatterns]:pair.patternListType*
                            [result]:pair.patternType*
                            [precondition]:exp 
                            [postcondition]:exp 
                            (predef):explicitFunction 
                            (postdef):explicitFunction 
                            (measureDef):definition
                            (recursive):java_Boolean
                            (isUndefined):java_Boolean 
                            (measureLexical):java_Integer
                             
                            (actualResult):type
                            (type):type.function
                            //[poluFuncs]:???Map<TypeList, FunctionValue>
	;
    
#class {-> package='org.overture.ast.definitions'}
    = {class}//Hmm we cant instanciate SClassDefinition...
    ;

invariant {-> package='org.overture.ast.definitions'}
    = {invariant} [location]:location [invPattern]:pattern [invExpression]:exp
;

/*
	Process
*/

process {-> package='org.overture.ast.process'}
	= {state} [processDeclarations]:declaration* [action]:action
	| {sequentialCombosition}
	| {externalChoice}
	| {internalChoice}
	| {generalisedParallelism}
	| {alphabetisedParallelism}
	| {synchronousParallelism}
	| {interleaving}
	| {interrupt}
	| {timedInterrupt}
	| {untimedInterrupt}
	| {timeout}
	| {hiding} 
	 
;
	
/*
    Expressions
*/    
exp {-> package='org.overture.ast.expressions'}
    =   {apply} [root]:exp [args]:exp* (argtypes):type* (recursive):definition /*cml*/
    |   #Unary /*cml*/
    |   #Binary /*cml*/
    |   {bracketed} [expression]:exp /*cml*/
    |   {cases} [expression]:exp [cases]:alternative.case* [others]:exp /*cml*/
    |   {elseIf} [elseIf]:exp [then]:exp  /*cml*/
    |   {exists1}  [bind]:bind [predicate]:exp [def]:definition
    |   {exists} [bindList]:multipleBind* [predicate]:exp
    |   {field} [object]:exp [memberName]:LexNameToken [field]:LexIdentifierToken
    |   {fieldNumber} [tuple]:exp [field]:LexIntegerToken
    |   {forAll} [bindList]:multipleBind* [predicate]:exp
    |   {funcInstatiation} [function]:exp (actualTypes):type* [expdef]:definition.#function.explicitFunction (impdef):definition.#function.implicitFunction
    |   {history} [hop]:LexToken [opnames]:LexNameToken*
    |   {if} [test]:exp [then]:exp [elseList]:elseIf* [else]:exp /*cml*/
    |   {iota} [bind]:bind [predicate]:exp
    |   {is} [typeName]:LexNameToken (basicType):type [test]:exp [typedef]:definition
    |   {isOfBaseClass} [baseClass]:LexNameToken [exp]:exp
    |   {isOfClass} [className]:LexNameToken (classType):type.class [exp]:exp
    |   {lambda} [bindList]:bind.type* [expression]:exp [paramPatterns]:pattern* [paramDefinitions]:definition* (functionType):type.function     
    |   {letBeSt} [bind]:multipleBind [suchThat]:exp [value]:exp [def]:definition.multiBindList
    |   {letDef} [localDefs]:definition* [expression]:exp
    |   {def} [localDefs]:definition* [expression]:exp
    |   #Map
    |   {maplet}  [left]:exp [right]:exp
    |   {mkBasic} [arg]:exp
    |   {mkType} [typeName]:LexNameToken [args]:exp* (recordType):type.#invariant.record (argTypes):type*
    |   {mu} [record]:exp (recordType):type.#invariant.record [modifiers]:modifier.record* (modTypes):type*
    |   {new} [className]:LexIdentifierToken [args]:exp* (classdef):definition.#class (ctorDefinition):definition
    |   {nil} 
    |   {notYetSpecified} 
    |   {postOp} [opname]:LexNameToken (preexpression):exp (postexpression):exp (errors):case.error* (state):definition.state [errorLocation]:location
    |   {pre} [function]:exp [args]:exp*
    |   {preOp} [opname]:LexNameToken (expression):exp  (errors):case.error* (state):definition.state
    |   {sameBaseClass} [left]:exp [right]:exp
    |   {sameClass} [left]:exp [right]:exp
    |   {self} [name]:LexNameToken
    |   #Seq
    |   #Set
    |   #SymbolicLiteral
    |   {stateInit} (state):definition.state  
    |   {subclassResponsibility} 
    |   {subseq} [seq]:exp [from]:exp [to]:exp (ftype):type (ttype):type
    |   {tuple} [args]:exp* (types):type*
    |   {undefined}
    |   {variable} [name]:LexNameToken [original]:java_String (vardef):definition
    |   {name} [name]:LexNameToken        
    |   {record} [name]:LexNameToken [exprs]: exp*
    |   {tupleSelect} [tuple]:exp [entry]:java_Integer
    |   #Channel
    ;
    
#Channel  {-> package='org.overture.ast.expressions'}
	= #Rename
	| {event} [identifier]:LexNameToken [dotExpressions]:exp*
	;
	
#Rename   {-> package='org.overture.ast.expressions'}
 	= {comprehension} [renamePairs]:pair.rename* [bindings]:multipleBind* [predicate]:exp
 	| {enumeration} [renamePairs]:pair.rename*
    ;
    
#SymbolicLiteral {-> package='org.overture.ast.expressions'}
	= {textLiteral} [value]:LexStringToken
	| {quoteLiteral} [value]:LexQuoteToken   
	| {charLiteral} [value]:LexCharacterToken
	| {booleanLiteral} [value]:LexBooleanToken 
	| {intLiteral} [value]:LexIntegerToken
	| {realLiteral} [value]:LexRealToken
    ; 
   
#Unary {-> package='org.overture.ast.expressions'}
    =   {absolute} 
    |   {cardinality}  
    |   {distConcat} 
    |   {distIntersect}  
    |   {distMerge} 
    |   {distUnion} 
    |   {elements}
    |   {floor}  
    |   {head} 
    |   {indices}  
    |   {len} 
    |   {mapDomain} 
    |   {mapInverse} (mapType):type.#Map
    |   {mapRange} 
    |   {not}  
    |   {powerSet} 
    |   {reverse}  
    |   {tail} 
    |   {unaryMinus}
    |   {unaryPlus}       
    ;


#Binary {-> package='org.overture.ast.expressions'}
    =   #Boolean
    |   {comp} 
    |   {domainResBy}
    |   {domainResTo}
    |   {equals}
    |   {inSet}
    |   {mapUnion}
    |   {notEqual}
    |   {notInSet}
    |   #Numeric
    |   {modify}
    |   {properSubset}
    |   {rangeResBy}
    |   {rangeResTo}
    |   {seqConcat}
    |   {setDifference}
    |   {setIntersect}
    |   {setUnion}
    |   {starStar}
    |   {subset}
    ;
    

    
#Boolean {-> package='org.overture.ast.expressions'}
    =   {and}
    |   {equivalent}
    |   {implies}
    |   {or}
    ;
    
#Numeric {-> package='org.overture.ast.expressions'}
    =   {div}
    |   {divide}
    |   {greaterEqual}
    |   {greater}
    |   {lessEqual}
    |   {less}
    |   {mod}
    |   {plus}
    |   {rem}
    |   {substract}
    |   {times}
    ;
    
#Map {-> package='org.overture.ast.expressions'}
    =   {mapComp} [first]:exp.maplet [bindings]:multipleBind* [predicate]:exp
    |   {mapEnum} [members]:exp.maplet* (domTypes):type* (rngTypes):type*
    ;
    
#Seq {-> package='org.overture.ast.expressions'}
    =   {seqComp} [first]:exp [setBind]:bind.set [predicate]:exp
    |   {seqEnum} [members]:exp* (types):type*
    ;
    
#Set {-> package='org.overture.ast.expressions'}
    =   {setComp} [first]:exp [bindings]:multipleBind* [predicate]:exp
    |   {setEnum} [members]:exp* (types):type*
    |   {setRange} [first]:exp [last]:exp (ftype):type (ltype):type
    |   #Chanset
    ;
    
#Chanset {-> package='org.overture.ast.expressions'}
	= {identifier} [identifier]:LexIdentifierToken
	| {enum} [identifiers]:LexIdentifierToken*
	| {comp}  [identifier]:LexIdentifierToken [dotExpressions]:exp* [bindings]:multipleBind* [predicate]:exp 
    ;
    
modifier {-> package='org.overture.ast.expressions'}
    = {record} [tag]:LexIdentifierToken [value]:exp
    ;
    
alternative {-> package='org.overture.ast.expressions'}
    = {case} [location]:location [cexp]:exp [pattern]:pattern* 
             [result]:exp [defs]:definition*  (type):type (expType):type
    ;
    
/* 
	Types 
*/
   
type {-> package='org.overture.ast.types'}
    =   #basic
    |   {bracket} (type):type
    |   {channel}
    |   {class} [name]:LexNameToken (classdef):definition.#class //change classdef to graf - is this correct dont see how it could have worked before
    |   {function} [partial]:java_Boolean (parameters):type* (result):type 
    |   #invariant
    |   #Map 
    |   {operation} (parameters):type* (result):type
    |   {optional} (type):type
    |   {parameter} [name]:LexNameToken
    |   {product} (types):type*
    |   {quote} [value]:LexQuoteToken 
    |   #seq 
    |   {set} (setof):type [empty]:java_Boolean [infinite]:java_Boolean
    |   {undefined}
    |   {union} (types):type* [infinite]:java_Boolean [expanded]:java_Boolean 
        (seqDone):java_Boolean (seqType):type.#seq 
        (setDone):java_Boolean (setType):type.set 
        (mapDone):java_Boolean (mapType):type.#Map
        (prodCard):java_Integer (prodType):type.product
        (funcDone):java_Boolean (funcType):type.function
        (opDone):java_Boolean (opType):type.operation
        (numDone):java_Boolean (numType):type.#basic.#numeric
        (recDone):java_Boolean (recType):type.#invariant.record
        (classDone):java_Boolean (classType):type.class
    |   {unknown}
    |   {unresolved} (name):LexNameToken 
    |   {voidReturn}
    |   {void} 
    ; 


#seq {-> package='org.overture.ast.types'}
    =   {seq} 
    |   {seq1} 
    ;

#Map  {-> package='org.overture.ast.types'}
    =   {inMap} 
    |   {map}
    ;
#invariant {-> package='org.overture.ast.types'}
    =   {named} (name):LexNameToken (type):type //[invdef]:explicitFunction //super = invariant type
    |   {record} [name]:LexNameToken [fields]:field.field* (infinite):java_Boolean //[invdef]:explicitFunction //super = invariant type
    ;

#basic {-> package='org.overture.ast.types'}
    =   {boolean}
    |   {char}
    |   #numeric     
    |   {token}
    ;

#numeric {-> package='org.overture.ast.types'}
    =   {int} 
    |   {natOne} 
    |   {nat} 
    |   {rational} 
    |   {real} 
    ;

field {-> package='org.overture.ast.types'}
    =   {field} [access]:accessSpecifier.accessSpecifier [tagname]:LexNameToken 
                [tag]:java_String (type):type [equalityAbstraction]:java_Boolean
    ;
accessSpecifier  {-> package='org.overture.ast.types'}
  = {accessSpecifier} [access]:access [static]:static [async]:async [location]:location 
  ;
access  {-> package='org.overture.ast.definitions'}
    =   {public}
    |   {protected}
    |   {private}
    | 	{logical}
    ;

/* 
	Patterns 
*/

pattern {-> package='org.overture.ast.patterns'}
    =   {boolean} [value]:LexBooleanToken
    |   {character} [value]:LexCharacterToken
    |   {concatenation} [left]:pattern [right]:pattern
    |   {expression} [exp]:exp
    |   {identifier} [name]:LexNameToken
    |   {ignore} 
    |   {integer} [value]:LexIntegerToken
    |   {nil}
    |   {quote} [value]:LexQuoteToken
    |   {real} [value]:LexRealToken
    |   {record} [typename]:LexNameToken [plist]:pattern* (type):type
    |   {seq} [plist]:pattern*
    |   {set} [plist]:pattern*
    |   {string} [value]:LexStringToken
    |   {tuple} [plist]:pattern*
    |   {union} [left]:pattern [right]:pattern
    ;
    
pair {-> package='org.overture.ast.patterns'}
    = {patternType} [pattern]:pattern (type):type
    | {patternListType} [patterns]:pattern* (type):type
    | {identifierType} [identifier]:LexIdentifierToken (type):type
    | {rename} [from]:exp.#Channel.event [to]:exp.#Channel.event
    ; 
    
bind {-> package='org.overture.ast.patterns'}
    =   {set} [pattern]:pattern [set]:exp //binds
    |   {type} [pattern]:pattern (type):type //binds
    ;

//This is used in PExp and PDefinition
multipleBind {-> package='org.overture.ast.patterns'}
    =   {set}  [set]:exp //binds
    |   {type} (type):type //binds
    ;

patternBind {-> package='org.overture.ast.patterns'}
    = {def} [location]:location [pattern]:pattern [bind]:bind (defs):definition* (type):type
    ;

/* 
	Modules -- this might get kicked out 
*/

modules {-> package='org.overture.ast.modules'}
    = {module}  [name]:LexIdentifierToken 
                [imports]:imports.module
                [exports]:exports.module
                [defs]:definition*
                [files]:clonableFile*
                (importdefs):definition*
                (exportdefs):definition*
              // [delegate]:Delegate
              	[isFlat]:java_Boolean
                (typeChecked):java_Boolean
                [isDLModule]:java_Boolean //The typechecker needs to know this, since the actual exports does not exists in a DLModule
    ;


imports {-> package='org.overture.ast.modules'} 
    = {module} [name]:LexIdentifierToken [imports]:imports.fromModule* //no root
    | {fromModule} [name]:LexIdentifierToken [signatures]:import** //no root
//    | {signatures} [importList]:import*
    ;
    
import {-> package='org.overture.ast.modules'}
    =   {all}
    |   {type} [def]:definition.type
    |   #value
    ;
    
#value {-> package='org.overture.ast.modules'}
    =   {value}//since we cant instanciate #value
    |   {function} [typeParams]:LexNameToken*
    |   {operation}
    ;
    
exports {-> package='org.overture.ast.modules'}
    =   {module} [exports]:export**
    ;

export {-> package='org.overture.ast.modules'}
    =   {all}
    |   {function} [nameList]:LexNameToken* (exportType):type
    |   {operation} [nameList]:LexNameToken* (exportType):type
    |   {type} [name]:LexNameToken [struct]:java_Boolean
    |   {value} [nameList]:LexNameToken* (exportType):type
    ;

/* 
	Actions 
*/
action {-> package='org.overture.ast.actions'}
	= {skip}
	| {stop}
	| {chaos}
	| {div}
	| {wait}
	| {communication} [identifier]:LexIdentifierToken [communicationParamters]:communicationParameter* [action]:action
	| {guarded} [expression]:exp [action]:action
	| {sequentialComposition} [left]:action [right]:action
	| {externalChoice} [left]:action [right]:action
	| {internalChoice} [left]:action [right]:action
	| {interrupt} [left]:action [right]:action
	| {timedInterrupt} [left]:action [right]:action [timeExpression]:exp
	| {untimedTimeout} [left]:action [right]:action
	| {timeout} [left]:action [right]:action [timeoutExpression]:exp
	| {hiding} [left]:action [chansetExpression]:exp.#Set.#Chanset
	| {startDeadline} [left]:action [expression]:exp
	| {endDeadline} [left]:action [expression]:exp
	| {channelRenaming} [action]:action [renameExpression]:exp.#Channel.#Rename
	| #ControlStatement
	| {block} [declareStatement]:declareStatement [action]:action
	| {identifier}
	;

declareStatement {-> package='org.overture.ast.actions'}
	= {declareStatement}  [location]:location [assignmentDefs]:definition* 
	;
	
#ControlStatement {-> package='org.overture.ast.actions'}
	= #CallStatement
	;
	
#CallStatement {-> package='org.overture.ast.actions'}
	= {call} [designator]:objectDesignator [name]:LexIdentifierToken [args]:exp*
	| {assignmentCall} [designator]:objectDesignator [call]:call 	
	;
	
communicationParameter {-> package='org.overture.ast.actions'}
	= {read} [parameter]:parameter [expression]:exp
	| {write} [expression]:exp 
	| {reference} [expression]:exp	
	;

parameter {-> package='org.overture.ast.actions'}
	= {identifier} [identifier]:LexIdentifierToken
	| {tuple} [parameters]:parameter*
	| {record}	[name]:LexNameToken [parameters]:parameter* 
	;
    
    
/*
    Statements --these should be converted into actions
*/

stm {-> package='org.overture.ast.statements'}
    =   {always} [always]:stm [body]:stm
    |   {assignment} [target]:stateDesignator [exp]:exp (targetType):type (expType):type 
                     (classDefinition):definition.#class (stateDefinition):definition.state (inConstructor):java_Boolean
    |   {atomic} [assignments]:stm.assignment* (statedef):definition.state 
    |   {callObject} [designator]:objectDesignator [classname]:LexNameToken [fieldname]:LexIdentifierToken 
                     [field]:LexNameToken [args]:exp* [explicit]:java_Boolean
    //|   {call} [name]:LexNameToken [args]:exp*
    |   {cases} [exp]:exp [cases]:alternativeStm.case* [others]:stm
    |   {classInvariant} [name]:LexNameToken [invDefs]:definition*
    |   {elseIf} [elseIf]:exp [thenStm]:stm
    |   {error}
    |   {exit} [expression]:exp (expType):type
    |   {forAll} [pattern]:pattern [set]:exp [statement]:stm
    |   {forIndex} [var]:LexNameToken [from]:exp [to]:exp [by]:exp [statement]:stm
    |   {forPatternBind} [patternBind]:patternBind.def [reverse]:java_Boolean [exp]:exp [statement]:stm (seqType):type.#seq
    |   {if} [ifExp]:exp [thenStm]:stm [elseIf]:stm.elseIf* [elseStm]:stm
    |   {letBeSt} [bind]:multipleBind [suchThat]:exp [statement]:stm (def):definition.multiBindList
    |   #LetDef
    |   {notYetSpecified} [opname]:LexNameToken [args]:exp*
    |   {return} [expression]:exp
    |   #SimpleBlock
    |   {specification} [externals]:clause.external* [precondition]:exp [postcondition]:exp [errors]:case.error*
    |   {start} [obj]:exp
    |   {subclassResponsibility}
    |   {trap} [patternBind]:patternBind.def [with]:stm [body]:stm
    |   {while} [exp]:exp [statement]:stm
    ; 
    
#LetDef {-> package='org.overture.ast.statements'}
    =   {def}
    ;
    
#SimpleBlock {-> package='org.overture.ast.statements'}
    =   {block} [assignmentDefs]:definition*
    |   {nonDeterministic}
    ;
    
stateDesignator {-> package='org.overture.ast.statements'}
    =   {field} [object]:stateDesignator [field]:LexIdentifierToken (objectfield):LexNameToken
    |   {identifier} [name]:LexNameToken
    |   {mapSeq} [mapseq]:stateDesignator [exp]:exp (mapType):type.#Map (seqType):type.#seq
    ;
    
objectDesignator {-> package='org.overture.ast.actions'}
    =   {apply} [object]:objectDesignator [args]:exp*
    |   {field} [object]:objectDesignator [className]:LexNameToken [fieldName]:LexIdentifierToken (field):LexNameToken
    |   {name} [name]:LexNameToken [expression]:exp.variable
    |   {self} [self]:LexNameToken
    ;

alternativeStm {-> package='org.overture.ast.statements'}
    = {case} [location]:location [cexp]:exp [pattern]:pattern [result]:stm (defs):definition* (ctype):type 
    ;
    
stmtAlternative {-> package='org.overture.ast.statements'}
    = {tixe} [patternBind]:patternBind.def [statement]:stm (exp):type
    ;
    
clause {-> package='org.overture.ast.statements'}
    = {external} [mode]:LexToken [identifiers]:LexNameToken* (type):type
    ;
    
case {-> package='org.overture.ast.statements'}
    = {error} [name]:LexIdentifierToken [left]:exp [right]:exp
    ;
    
Aspect Declaration
/* This section allows fields of root types to be declared e.g. exp*/

%declaration =  [location]:location [nameScope]:nameScope
	;

%process =  [location]:location 
	;

%action =  [location]:location
	;
	
%communicationParameter = [location]:location
	; 

%parameter = [location]:location
	; 


//%exp->#Chanset = [channelIdentifiers]:LexIdentifierToken*
//	;
	
%exp->#Unary =  [exp]:exp
    ;

%exp = (type):type [location]:location
    ;

%exp->#Binary = [left]:exp [op]:LexToken [right]:exp 
    ; 
    
%exp->#set 
    = (setType):type.set
    ;

%type = [location]:location [resolved]:java_Boolean (definitions):definition*
     ; 

%pattern = [location]:location [definitions]:definition* [resolved]:java_Boolean
    ;

%bind = [location]:location
    ;

%multipleBind = [location]:location [plist]:pattern*
    ;
    
%definition 
    =   [location]:location 
        (name):LexNameToken // try out () 
        [nameScope]:nameScope 
        [used]:java_Boolean 
//        (classDefinition):definition.#class 
	(declaration):declaration
        [access]:accessSpecifier.accessSpecifier
        (type):type 
        // [pass]:pass
    ;

%definition->#class
    =   (supertypes):type* 
        (supernames):LexNameToken*// try out () 
        (definitions):definition* 
        (allInheritedDefinitions):definition*
        (localInheritedDefinitions):definition* 
        [hasContructors]:java_Boolean
        [settingHierarchy]:ClassDefinitionSettings
        (superDefs):definition.#class*
        [gettingInheritable]:java_Boolean
        (superInheritedDefinitions):definition*
        [gettingInvDefs]:java_Boolean
        [isAbstract]:java_Boolean
        [isUndefined]:java_Boolean
        (classtype):type
        (isTypeChecked):java_Boolean
        (invariant):definition.#operation.explicitOperation
    ;
    
%stm
    = [location]:location (type):type
    ;
    
%stm->#LetDef
    = [localDefs]:definition* [statement]:stm
    ;
    
%stm->#SimpleBlock 
    =   [statements]:stm*
    ;
 
%import
    =   [location]:location [name]:LexNameToken [renamed]:LexNameToken [from]:modules.module
    ;  
    
%import->#value 
    = (importType):type
    ;
     
%type->#Map = (from):type (to):type [empty]:java_Boolean
    ;
%export 
    =   [location]:location [definition]:definition*
    ;
    
%pair
    = [resolved]:java_Boolean
    ;
    
%type->#invariant
    =   (opaque):java_Boolean
        (invDef):definition.#function.explicitFunction
    ; 
    
%type->#seq
    = (seqof):type [empty]:java_Boolean
    ;
    
%stateDesignator 
    = [location]:location (type):type
    ;
    
%objectDesignator
    = [location]:location
    ;