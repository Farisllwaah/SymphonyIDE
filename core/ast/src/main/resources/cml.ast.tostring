To String Extensions
// import packages used by external $$ java code
import eu.compassresearch.ast.util.Utils;
import eu.compassresearch.ast.util.ToStringUtil;


%source->file = [name] 
%source->inputStream = [origin]
// %source->tcpStream = "" [ip] ":" [port] ""

// Actions
%action->#Replicated = "Replication of action: " [replicatedAction]

%action->#Parallel->synchronousParallelism = [leftAction] "[ ns-left | ns-right ]" [rightAction]

// %action->specification = "[" +
//             $($[externals]$.isEmpty() ? "" : "\n\text " + $[externals]$) +
//             ($[precondition]$ == null ? "" : "\n\tpre " + $[precondition]$) +
//             ($[postcondition]$ == null ? "" : "\n\tpost " + $[postcondition]$) +
//             ($[errors]$.isEmpty() ? "" : "\n\terrs " + $[errors]$)$ + "]" 
%action->communication = [identifier] "->" [action]
%action->skip = "Skip"
%action->stop = "Stop"
%action->chaos = "Chaos"
%action->div = "Div Action"
%action->wait = "Wait"
%action->sequentialComposition = [left] " ; " [right]
%action->reference = [name]
%action->#Parallel->interleaving = [leftAction] "|||" [rightAction]
%action->#Parallel->generalisedParallelism = [leftAction] "[|" [chansetExpression] "|]" [rightAction]
%action->#Statement->block = "Block {" [action] "}"
%action->#Statement->#GeneralAssignment->single = [stateDesignator] " := " [expression]

%action->parametrised = "params: " [parametrisations] " action: " [action]
%parametrisation->val = "val" [declaration]
%parametrisation->res = "res" [declaration]
%parametrisation->vres = "vres" [declaration]
%action->communication = [identifier] " -> " [action]
%action->guarded = [expression] " & " [action]
%action->#Statement->call = [name] "(" + $org.overture.ast.util.Utils.listToString($  [args]  $)$ + ")"
%declaration->#Single->type = [identifiers] ":" [type]
%declaration->#Single->expression = [identifiers] " := " [expression]

// Processes
%process->action = "state: " [processDefinition] " @ "


%type->error = "Type Error"

// varSetExpressions
%VarsetExpression->fatEnum = "{|" [identifiers] "|}"

//  Expressions
 
//  Patterns

//  Definitions
%definition->process = "Process " [name]$.getName()$
%definition->class = "Class " [name]$.getName()$
%definition->state = "State Paragraph"
%definition->#cmlOperation->implicit = [name] + " " + [type]
%definition->#cmlOperation->explicit = [name] + " " + [type]
//  Statements



//Access
                                    
%access->logical ="logical"

//designator
