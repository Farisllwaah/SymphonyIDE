channels 
a : int

-- interface class pure virtual class

class IObject =
begin

 operations
  
  public execute : () ==> int --sub classes override this function
  execute()== return 1
     
end


class ObjectOne extends IObject =    
begin
operations
    public execute : () ==> int -- override base class function
    execute()== return 2  
end


class ObjectFactory =
begin
 operations

   public createObject : int ==> IObject
   createObject(i) == 
   (
    dcl v : IObject @  -- base class pointer for runtime binding
    
    if i = 1
	then	
    (
     v := new IObject(); 
     return v
    )
    else
    (
     v := new ObjectOne();
--     let x :IObject =v2 in 
  --   v:=x;
     return v
    )
     
   ) 
end


process TestObjectFactory = 
begin 
	@ (
	  dcl factory : ObjectFactory, object : IObject , i : int @ 
	   
	   factory := new ObjectFactory() ; 
	   object := factory.createObject(1); -- expect to get a instance of the base class
	   	 
	   i := object.execute();
	   a.(i) ->Skip 
	  ) 
end




