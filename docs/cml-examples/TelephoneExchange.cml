
/*this definitions should be global, but I had to put them in the class to type check the VDM++ specification
*/
types
	public SUBS = token
	public STATUS = <connecting> | <engaged> | <ringing> | <speech> | <suspended>
	public MSG = <vcallmsg> | <vclearmsg> | <callokmsg> | <callerrormsg>
		
values
	Connected = {<ringing>,<speech>,<suspended>}
	n: nat = undefined
	LOC = {1,...,n-1}
	
functions
	next(i: nat) j: nat
	pre
		i in set LOC
	post
		j = (i+1) mod n

	home(i: nat) s: set of SUBS
	pre
		i in set LOC
	post
		forall j in set LOC @ s inter home(j) = {}
	
	callers: (map SUBS to STATUS) +>  (set of SUBS)
	callers(status) == dom(status :> Connected)
		
	connected: (map SUBS to STATUS) * (map SUBS to SUBS) +> (inmap SUBS to SUBS)
	connected(status,number) == callers(status) <: number
		
	free: (map SUBS to STATUS) * (map SUBS to SUBS) * (set of SUBS) +> (set of SUBS)
	free(status,number,subs) == subs \ dom(status) \ rng(connected(status,number))
		
	connectable: (map SUBS to STATUS) * (map SUBS to SUBS) +> (set of SUBS)
	connectable(status,number) == rng((dom(status:>{<connecting>}))<:number)
		
	suspendable: (map SUBS to STATUS) * (map SUBS to SUBS) +> (set of SUBS)
	suspendable(status,number) == rng((dom(status:>{<speech>}))<:connected(status,number))
		
	ringing: (map SUBS to STATUS) * (map SUBS to SUBS) +> (set of SUBS)
	ringing(status,number) == rng((dom(status:>{<ringing>}))<:connected(status,number))
		
	suspended: (map SUBS to STATUS) * (map SUBS to SUBS) +> (set of SUBS)
	suspended(status,number) == rng((dom(status:>{<suspended>}))<:connected(status,number))
	
channels
	init
	call: SUBS*SUBS
	clear, suspend: SUBS
	answer, unsuspend: SUBS
	callok,clearok,suspendok,answerok,unsuspendok
	callerror,clearerror,suspenderror,answererror,unsuspenderror
	connectfree,connnectbusy: SUBS

process ExchangeProc = lSUBS: (set of SUBS) @ begin -- there's not type "finite set of", and there's not way of putting an invariant at this point
	state 
		status: map SUBS to STATUS
		number: map SUBS to SUBS
		subs: set of SUBS
		inv
			exists n: nat @ card(subs) = n and -- is card a partial or total function?
			dom(status) = dom(number) and
			dom(number) subset subs and
			is_(dom(dom(status:>Connected)<:number),inmap SUBS to SUBS)
			
	functions
		callers: (map SUBS to STATUS) +>  (set of SUBS)
		callers(status) == dom(status :> Connected)
		
		connected: (map SUBS to STATUS) * (map SUBS to SUBS) +> (inmap SUBS to SUBS)
		connected(status,number) == callers(status) <: number
		
		free: (map SUBS to STATUS) * (map SUBS to SUBS) * (set of SUBS) +> (set of SUBS)
		free(status,number,subs) == subs \ dom(status) \ rng(connected(status,number))
		
		connectable: (map SUBS to STATUS) * (map SUBS to SUBS) +> (set of SUBS)
		connectable(status,number) == rng((dom(status:>{<connecting>}))<:number)
		
		suspendable: (map SUBS to STATUS) * (map SUBS to SUBS) +> (set of SUBS)
		suspendable(status,number) == rng((dom(status:>{<speech>}))<:connected(status,number))
		
		ringing: (map SUBS to STATUS) * (map SUBS to SUBS) +> (set of SUBS)
		ringing(status,number) == rng((dom(status:>{<ringing>}))<:connected(status,number))
		
		suspended: (map SUBS to STATUS) * (map SUBS to SUBS) +> (set of SUBS)
		suspended(status,number) == rng((dom(status:>{<suspended>}))<:connected(status,number))
		
	operations
		InitExchange ()
		frame wr status, number, subs
			rd lSUBS
		post 
			status = {|->} and 
			number = {|->} and 
			subs = lSUBS
		
		Add (s: SUBS)
		frame wr subs
		post 
			subs = subs~ union {s}
		
		Del (s: SUBS)
		frame wr subs
		post 
			subs = subs~ \ {s}
		
		Call (s,t: SUBS)
		frame wr status, number
			rd subs
		pre 
			s in set subs and 
			t in set subs and 
			s in set free(status,number,subs)
		post 
			status = status~ ++ {s |-> <connecting>} and 
			number = number~ ++ {s |-> t}
		
		Clear (s,t: SUBS)
		frame wr status, number
			rd subs
		pre 
			s in set subs and 
			t in set subs and 
			s in set dom(status) and 
			t = number(s)
		post 
			status = {s}<-: status~ and number = {s}<-: number~
		
		Suspend(s,t: SUBS)
		frame wr status
			rd subs, number
		pre 
			s in set subs and
			t in set subs and
			s in set dom(status) and
			status(s) = <speech> and
			t = number(s)
		post
			status = status~ ++ {s |-> <suspended>}
			
		ConnectFree(s,t: SUBS)
		frame wr status
			rd subs, number
		pre 
			s in set subs and 
			t in set subs and
			s in set dom(status) and
			status(s) = <connecting> and
			t = number(s) and
			t not in set rng(connected(status,number))
		post
			status = status~ ++ {s |-> <ringing>}
			
		ConnectBusy(s,t: SUBS)
		frame wr status
			rd subs, number
		pre 
			s in set subs and 
			t in set subs and
			s in set dom(status) and
			status(s) = <connecting> and
			t = number(s) and
			t in set rng(connected(status,number))
		post
			status = status~ ++ {s |-> <engaged>}
			
		Answer(s,t: SUBS)
		frame wr status
			rd subs, number
		pre 
			s in set subs and 
			t in set subs and
			s in set dom(status) and
			status(s) = <ringing> and
			t = number(s)
		post
			status = status~ ++ {s |-> <speech>}
				
		Unsuspend(s,t: SUBS)
		frame wr status
			rd subs, number
		pre 
			s in set subs and 
			t in set subs and
			s in set dom(status) and
			status(s) = <suspended> and
			t = number(s)
		post
			status = status~ ++ {s |-> <speech>}		

	actions
		Exch = 
				call?s in set (subs)?t in set (subs) ->
					(if s in set free(status,number,subs) then callok -> Call(s,t)
					else callerror -> SKIP); Exch
				[]
				clear?s in set (subs) ->
					(if s in set dom(status) then clearok -> 
						(dcl t: SUBS @ t := number(s); Clear(s,t))
					else clearerror -> SKIP); Exch
				[]
				suspend?t in set (subs) ->
					(if t in set suspendable(status,number) 
					then suspendok -> (dcl s: SUBS @ s := number(t); Suspend(s,t))
					else suspenderror -> SKIP); Exch
				[]
				connectfree?s in set (connectable(status,number) union free(status,number,subs)) ->
					(dcl t: SUBS @ t:=number(s); ConnectFree(s,t)); Exch
				[]
				connectbusy?s in set (connectable(status,number) \ free(status,number,subs)) ->
					(dcl t: SUBS @ t:=number(s); ConnectBusy(s,t)); Exch
				[]
				answer?t in set (subs) ->
					(if t in set ringing(status,number)
					then answerok -> (dcl s: SUBS @ s:=number(t); Answer(s,t))
					else answererror -> SKIP); Exch
				[]
				unsuspend?t in set (subs) ->
					(if t in set suspended(status,number) 
					then unsuspendok -> (dcl s: SUBS @ s:=number(t); Unsuspend(s,t))
					else unsuspenderror -> SKIP); Exch
		
		@ init -> InitExchange; Exch
end		

channels
	myinit
	mycall: SUBS*SUBS
	myclear,mysuspend,myconnectfree,myconnectbusy: SUBS
	myanswer,myunsuspend: SUBS
	mycallok,myclearok,mysuspendok,myanswerok,myunsuspendok
	mycallerror,myclearerror,mysuspenderror,myanswererror,myunsuspenderror
	link,mid: LOC*MSG*LOC*LOC*SUBS*SUBS
	
process NodeProc = i: nat @ begin
	functions
		next(i: nat) j: nat
		pre
			i in set LOC
		post
			j = (i+1) mod n

		home(i: nat) s: set of SUBS
		pre
			i in set LOC
		post
			forall j in set LOC @ s inter home(j) = {}
	
	state
		i: nat -- process parameter
		away: map SUBS to nat
		origin: map SUBS to nat
		inv
			i in set LOC and
			rng(away) subset LOC and
			rng(origin) subset LOC and
			dom(away) subset home(i) and
			dom(origin) inter home(i) = {}
			
	operations
		InitNode ()
		frame wr away, origin
		post
			away = {|->} and
			origin = {|->}
			

	actions
		Node = 
			call?s in set (home(i) \ (dom(away)))?t in set (home(i) \ (dom(away))) ->
				mycall!s!t -> (mycallok -> callok -> SKIP [] mycallerror -> callerror -> SKIP); Node
			[]
			call?s in set (dom(away))?t -> callerror -> Node
			[]
			call?s in set (home(i))?t in set ({x | x: SUBS @ x not in set home(i)}) ->
				(dcl m: nat @ [frame wr m pre true post t in set home(m)];
							  away := away ++ {s |-> m};
							  mid!i!vcallmsg!i!m!s!t -> SKIP); Node
			[]
			clear?s in set (home(i) \ (dom(away)))?t in set (home(i) \ (dom(away))) ->

				myclear!s!t -> (myclearok -> clearok -> SKIP [] myclearerror -> clearerror -> SKIP); Node
			[]
			clear?s in set (dom(away))?t in set ({x | x: SUBS @ x not in set home(i)}) ->
				mid!i!vclearmsg!i!(away(s))!s!t -> away:={s}<-:away; Node
			[]
			suspend?s in set (home(i)) -> mysuspend!s ->
				(mysuspendok -> suspendok -> SKIP [] mysuspenderror -> suspenderror -> SKIP); Node
			[]
			answer?t in set (home(i)) -> myanswer!s ->
				(myanswerok -> answerok -> SKIP [] myanswererror -> answererror -> SKIP); Node
			[]
			suspend?t in set (home(i)) -> myunsuspend!s ->
				(myunsuspendok -> unsuspendok -> SKIP
				[]
				myunsuspenderror -> unsuspenderror -> SKIP); Node
			[]
			link!i!vcallmsg?j?k?s?t ->
				(if k = i then myadd!s ->
					(myaddok -> mycall!s!t -> 
						(mycallok -> mid!i!callokmsg!i!j!s!t -> SKIP
						[]
						mycallerror -> mid!i!callerrormsg!i!j!s!t -> SKIP)
					[]
					myadderror -> mid!i!callerrormsg!i!j!s!t -> SKIP)
				else mid!i!vcallmsg!j!k!s!t -> SKIP); Node
			[]
			link!i!vclearmsg?j?k?s?t ->
				(if k = i then myclear!s ->
					(myclearok -> mydel!s ->
						(mydelok -> clearok -> SKIP
						[]
						mydelerror -> clearerror -> SKIP)
					[]
					myclearerror -> clearerror -> SKIP)
				else mid!i!vclearmsg!j!k!s!t -> SKIP); Node
			[]
			link!i!callokmsg?j?k?s?t ->
				(if k = i then callok -> SKIP
				else mid!i!callokmsg!j!k!s!t -> SKIP); Node
			[]
			link!i!callerrormsg?j?k?s?t ->
				(if k = i then callerror -> SKIP
				else mid!i!callerrormsg!j!k!s!t -> SKIP); Node
		@ init -> myinit -> InitNode; Node
end

process LinkProc = i: nat @ begin
	@ mu X @ ( mid!i?msg?l?m?s?t -> link!(next(i))!msg!l!m!s!t -> X )
end

--process NodeLinkProc = i: nat @ (NodeProc(i) [|{|mid.i|}|] LinkProc(i)) \\ {|mid.i|}
process NodeLinkProc = i: nat @ (NodeProc(i) [|{|mid|}|] LinkProc(i)) \\ {|mid|}

process SlaveExchangeProc = i: LOC @
	ExchangeProc(home(i))[[
		call <- mycall, clear <- myclear, suspend <- mysuspend,
		connectfree <- myconnectfree, connectbusy <- myconnectbusy,
		answer <- myanswer, unsuspend <- myunsuspend,
		callok <- mycallok, clearok <- myclearok,
		suspendok <- mysuspendok, answerok <- myanswerok,
		unsuspendok <- myunsuspendok,
		callerror <- mycallerror, clearerror <- myclearerror,
		suspenderror <- mysuspenderror, answererror <- myanswererror, 
		unsuspenderror <- myunsuspenderror]]
		
chansets
	SlaveChannels = {| mycall, myclear, mysuspend, myconnectfree,
					   myconnectbusy, myanswer, myunsuspend,
					   mycallok, myclearok,mysuspendok,myanswerok,
					   myunsuspendok,mycallerror,myclearerror,mysuspenderror,
					   myanswererror,myunsuspenderror |}

channels
	left, right: LOC
	
-- process ExchangeSoS =
--   || i: LOC @ [|{|left.i, right.i|}|] NodeLinkExchange(i)
process ExchangeSoS =
  || i: LOC @ [{|left, right|}] NodeLinkExchange(i)
