class CDDatabase =
begin
	types
		
	
		Track :: 
			name : seq of char
			artist : seq of char
			year : int
			album : [(seq of char * CD)]
			duration : int
			;
		
		CD ::
			title : seq of char
			tracks: seq of Track

	state 
		cds : seq of CD

	
	operations
		addCD: (seq of char * seq of Track) ==> ()
		addCD(title, tracks) == cds := cds ^ [mk_CD(title,tracks)]
		
		findByTitle: seq of char ==> [CD]
		findByTitle(title) == ((dcl cur:CD := hd cds, tail:seq of CD := tl cds @
		 while (len(tail)>0) do (if (cur.title = title) then (return (cur)) else tail := tl tail; cur := hd tail)); return (nil))
end

class CDBuilder =
begin
	state 
		cd : CDDatabase.CD := mk_CDDatabase.CD("  ", [])
		
	operations
		setTitle: seq of char ==> CDBuilder
		setTitle(title) == ( cd.title := title; return (self) )
		
		addTrack: Track ==> CDBuilder
		addTrack(track) == ( cd.tracks := cd.tracks ^ [track]; return (self) )

end

class TrackBuilder =
begin
	state 
		track : CDDatabase.Track := mk_CDDatabase.Track("  ","  ",0,nil, 0)
		
	operations
		setName: seq of char ==> TrackBuilder
		setName(name) == ( track.name := name; return (self) )
		
		setArtist: seq of char ==> TrackBuilder
		setArtist(artist) == ( track.artist := artist; return (self) )
		
		setYear: int ==>TrackBuilder
		setYear(year) == ( track.year := year; return (self) )
		
		setAlbum: seq of char * CD ==> TrackBuilder 
		setAlbum(title, cd) == ( track.album := mk_(title, cd); return (self) )
		
		setDuration: int ==> TrackBuilder
		setDuration(duration) == ( track.duration := duration; return (self) )
		
		getTrack: () ==> CDDatabase.Track
		getTrack() == return (track)
end


class Scenario =
begin
	operations
		scenario1: () ==> ()
		scenario1() == (
			dcl t1 : Track := TrackBuilder().setName("What?").setYear(2012).setDuration(189).getTrack(),
			    t2 : Track := TrackBuilder().setName("What?").setYear(2012).setDuration(120).getTrack() 
			@
			(dcl
				builder: CDBuilder
				@
				builder.setTitle("   ")
			)
		)
end