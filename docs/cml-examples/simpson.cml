--class Context =
--  begin
--    exports all

	types
		PI = bool;
		SI = bool;
		Data = nat
channels
inc: nat
--  end
process Observer =
  -- This process should be deadlock free if the order of writes is preserved
  -- by the reads
  begin
--    imports from Context all, from Reader all, from Writer all
    actions
    
      -- produce a sequence of increasing numbers on the input
      OW = n:nat@
        [inc!n] -> OW(n+1)
        
      -- read the numbers from the input and check whether it's an increasing sequence
      OR = n:nat@
       [out?n] -> [n>=m] & OR(n) 
        
      -- the system composed with its property specification
      OP =
        ( -- this is the system consisting of the Reader, Writer and SharedState
          (
            Reader
            |||
            Writer
          )
          [| SharedStateChannels |]
          SharedState
        )
        [| inout |]
        ( -- this is the observation process that specifies the correctness property
          -- of order preservation; on in and out channels are observed here.
          OW(0)
          |||
          OR(1)
        )
	@ OP

  end
process Reader =
  -- the reader process
  -- it modifies the shared state and produces output from the shared state
  -- on channel out
  begin
    
    state
      rpair : PI;
      rindex : SI
    operations 
     choose_pair : PI ==> void
      choose_pair(k) == (
        rpair := k
      )
      signal_pair : () ==> PI
      signal_pair() == (
        --this is a diviation from the correct grammar
	return (rpair)
      )

      choose_index : Context`SI ==> void
      choose_index(i) == (
        rindex := i
      )
      
      -- unused; covered by CSP
      read_output : () ==> Context`Data
      read_output() == (
        return (Shared`slot (mk_(rpair, rindex)))
      )
    actions
      RP = 
        [getLatest?k] -> choose_pair(k) ;
        (dcl r : PI @ r := signal_pair(); [setReading!r] ->
        [getIndex!rpair?i] -> choose_index(i);
        [getSlot!rpair!rindex?s] -> [out!s] -> RP)
  @ RP
  end

chansets

SharedStateChannels ={| getSlot,setSlot,getIndex,setIndex,
getLatest,setLatest,getReading,setReading|}

process SharedState =
  -- the shared state of processes Reader and Writer
  -- the shared state is modified by means of channel communications
  -- the modifications (getting and setting) are modelled atomically
  begin
  	
    state 
      slot : map PI * Context`SI to Context`Data;
      index : map PI to Context`SI;
      latest : PI;
      reading : PI
    actions
      IO = //FIXME:Parser cannot deal state designators others than id ['.' id]
         /*  [setSlot?pi?si?i] -> (slot(mk_(pi,si)) := i); IO
         [getSlot?pi?si!(slot(mk_(pi,si)))] -> IO
        [] setIndex?pi?si -> (index(pi) := si) ; IO
        [] getIndex?pi!(index(pi)) -> IO
        [] setLatest?k -> (latest := k) ; IO
        [] getLatest!latest -> IO
        [] setReading?r -> (reading := r) ; IO
        [] getReading!reading -> */ IO
  @ IO
  end
process Writer =
  -- the writer process
  -- it modifies the shared state and reads input on channel in
  begin
    
    state
      wpair : PI;
      windex : Context`SI
    operations 
      
      choose_pair : PI ==> ()
      choose_pair(r) == (
        wpair := not r
      )
      
      choose_index : () ==> ()
      choose_index() == (
        windex := not Shared.index(wpair)
      )
      
      -- unused; modelled by CSP
      /*write_input : Context`Data ==> ()
      write_input(input) == (
        Shared.slot(mk_(wpair, windex)) := input
      )*/
      
      signal_index : () ==> Context`SI
      signal_index() == (
        return (windex)
      )
      
      signal_pair : () ==> PI
      signal_pair() == (
        return (wpair)
      )
    /*
    actions
      WP =
        getReading?r -> choose_pair(r) ;
        getIndex!wpair?i -> choose_index(i) ;
        imp?x -> setSlot!wpair!windex!x ->
        (dcl k : Context`SI, j : PI @ k := signal_index(); setIndex!wpair!k ->
         j := signal_pair(); setLatest!j -> WP) */
  @ WP
  end
